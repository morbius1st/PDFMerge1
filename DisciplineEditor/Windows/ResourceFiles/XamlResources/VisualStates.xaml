<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:custom="clr-namespace:SharedWPF.ShSupport"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		mc:Ignorable="d"
		>
	<!--  xmlns:sys="clr-namespace:System;assembly=mscorlib"  -->
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="MasterColorList.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<Color x:Key="Blue.Medium">
		#FF26A0DA
	</Color>

	<!--
		button
		-	mouseover = true
		- isdefaulted = true
		-	is pressed = true
		- disabled (enabled is false) = true
		
		- normal
		- unfocused
		- focused
		- defaulted
		
		textbox
		-	mouseover
		-	pressed
		- disabled (enabled is false)
		- normal
		- unfocused
		- focused
		
		
		as in, the value is not valid
		- invalid unfocused
		- invalid focused
		end
	-->

	<!--#region > Values-->


	<CornerRadius x:Key="Btn.Corner.Radius">8, 8, 8, 8</CornerRadius>

	<!--  normal / thicknesses  -->

	<Thickness x:Key="Normal.BorderThickness">
		2
	</Thickness>
	<Thickness x:Key="Normal.Default.BorderThickness.Inner">
		0, 0, 0, 4
	</Thickness>

	<!--#endregion-->

	<!--#region > Brushes-->

	<!--#region > Normal-->

	<!--  normal / window / dark mode  -->
	<SolidColorBrush x:Key="Normal.Window.Background" Color="{StaticResource Gray.200}" />

	<!--  normal / controls  -->
	<!--  normal = true  -->
	<SolidColorBrush x:Key="Normal.Background" Color="{StaticResource Gray.970}" />
	<SolidColorBrush x:Key="Normal.Foreground" Color="{StaticResource Gray.100}" />
	<SolidColorBrush x:Key="Normal.Border" Color="{StaticResource True.Black}" />

	<SolidColorBrush x:Key="Normal.Inactive.Background" Color="{StaticResource Gray.700}" />
	<SolidColorBrush x:Key="Normal.Inactive.Foreground" Color="{StaticResource Gray.300}" />

	<!--  mouseover = true  -->
	<SolidColorBrush x:Key="Normal.MouseOver.Background" Color="{StaticResource Light.Blue.900}" />
	<SolidColorBrush x:Key="Normal.MouseOver.Foreground" Color="{Binding Color, Source={StaticResource Normal.Foreground}}" />
	<SolidColorBrush x:Key="Normal.MouseOver.Border" Color="{StaticResource Light.Blue.700}" />

	<!--  pressed = true  -->
	<SolidColorBrush x:Key="Normal.Pressed.Background" Color="{StaticResource Light.Blue.900}" />
	<SolidColorBrush x:Key="Normal.Pressed.Foreground" Color="{Binding Color, Source={StaticResource Normal.Foreground}}" />
	<SolidColorBrush x:Key="Normal.Pressed.Border" Color="{StaticResource Light.Blue.400}" />
	<SolidColorBrush x:Key="Normal.Pressed.Default.Inner.Border" Color="{StaticResource Light.Blue.300}" />

	<!--  selected active  -->
	<SolidColorBrush x:Key="Normal.SelectedActive.Background" Color="{StaticResource Light.Blue.900}" />

	<SolidColorBrush x:Key="Normal.SelectedActive.Foreground" Color="{Binding Color, Source={StaticResource Normal.Foreground}}" />
	<SolidColorBrush x:Key="Normal.SelectedActive.Border" Color="{StaticResource Light.Blue.500}" />

	<!--  selected inactive  -->
	<SolidColorBrush x:Key="Normal.SelectedInActive.Background" Color="{StaticResource Gray.820}" />
	<SolidColorBrush x:Key="Normal.SelectedInActive.Foreground" Color="{Binding Color, Source={StaticResource Normal.Foreground}}" />
	<SolidColorBrush x:Key="Normal.SelectedInActive.Border" Color="{StaticResource Gray.900}" />

	<!--  disabled = (IsEnabled == false)  -->
	<SolidColorBrush x:Key="Normal.Disabled.Background" Color="{StaticResource Gray.800}" />
	<SolidColorBrush x:Key="Normal.Disabled.Foreground" Color="{StaticResource Gray.500}" />
	<SolidColorBrush x:Key="Normal.Disabled.Border" Color="{StaticResource Gray.700}" />
	<SolidColorBrush x:Key="Normal.Disabled.Border.Inner" Color="{StaticResource Gray.700}" />

	<!--  isDefaulted = true  (e.g. button)  -->
	<SolidColorBrush x:Key="Normal.Default.Border" Color="{Binding Color, Source={StaticResource Normal.Border}}" />
	<SolidColorBrush x:Key="Normal.Default.Border.Inner" Color="{StaticResource Blue.400}" />

	<SolidColorBrush x:Key="Normal.Modified.Foreground" Color="#007FFE" />


	<!-- listbox dark -->
	<SolidColorBrush x:Key="Dark.Border.Inner"          Color="{StaticResource Blue.400}" />

	<SolidColorBrush x:Key="Dark.MouseOver.Background"  Color="{StaticResource Light.Blue.500}" />
	<SolidColorBrush x:Key="Dark.MouseOver.Foreground"  Color="White" />
	<SolidColorBrush x:Key="Dark.MouseOver.Border"      Color="{StaticResource Light.Blue.700}" />

	<SolidColorBrush x:Key="Dark.Pressed.Background"    Color="{StaticResource Light.Blue.300}" />
	<SolidColorBrush x:Key="Dark.Pressed.Foreground"    Color="{Binding Color, Source={StaticResource Normal.Foreground}}" />
	<SolidColorBrush x:Key="Dark.Pressed.Border"        Color="{StaticResource Light.Blue.600}" />
	<SolidColorBrush x:Key="Dark.Pressed.Border.Inner"  Color="{StaticResource Light.Blue.300}" />


	<SolidColorBrush x:Key="Dark.Disabled.Background"   Color="{StaticResource Light.Blue.300}" />
	<SolidColorBrush x:Key="Dark.Disabled.Foreground"   Color="{StaticResource Gray.650}" />
	<SolidColorBrush x:Key="Dark.Disabled.Border"       Color="{StaticResource Light.Blue.400}" />
	<SolidColorBrush x:Key="Dark.Disabled.Border.Inner" Color="{StaticResource Light.Blue.300}" />

	<!--#endregion-->

	<!--#region > Control Specific Brushes-->

	<!--  listbox  -->

	<!--  selected active  -->
	<SolidColorBrush x:Key="Gray.SelectedActive.Background" Color="{StaticResource Gray.900}" />

	<!--  un-selected  -->
	<SolidColorBrush x:Key="Gray.UnSelected.Background" Color="{StaticResource Gray.900}" />
	<SolidColorBrush x:Key="Gray.UnSelected.Foreground" Color="{StaticResource Gray.200}" />

	<!--#endregion-->

	<!--#endregion-->

	<!--#region > Styles-->

	<Style x:Key="Control.Normal.Style"
			TargetType="Control"
			>
		<Setter Property="Background" Value="{StaticResource Normal.Background}" />
		<Setter Property="BorderBrush" Value="{StaticResource Normal.Border}" />
		<Setter Property="BorderThickness" Value="{StaticResource Normal.BorderThickness}" />
		<Setter Property="Foreground" Value="{StaticResource Normal.Foreground}" />
	</Style>

	<Style x:Key="ListBox.Normal.Style"
			TargetType="ListBox"
			BasedOn="{StaticResource Control.Normal.Style}"
			/>

	<Style x:Key="Btn.Base"
			TargetType="Button"
	>
		<Setter Property="Foreground" Value="white" />
	</Style>
		<!-- <Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" /> -->

	<Style x:Key="Button.Normal.Style"
			TargetType="Button"
			BasedOn="{StaticResource Control.Normal.Style}"
			/>

	<Style x:Key="Btn.Stealth"
			TargetType="Button"
			BasedOn="{StaticResource Btn.Base}"
	>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="0,-1,0,-4" />
		<Setter Property="Visibility" Value="Visible" />

		<Setter Property="FontFamily" Value="Segoe UI Symbol" />
		<Setter Property="Template" Value="{DynamicResource Btn.Ct.Stealth}" />
	</Style>



	<!-- <Setter Property="Background" Value="{StaticResource Normal.Disabled.Background}" /> -->
	<!--  listbox item container style  -->
	<Style x:Key="ListBox.Normal.ItemContainer"
			TargetType="{x:Type ListBoxItem}"
			>
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{StaticResource Gray.UnSelected.Foreground}" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin" Value="0,1,0,0" />
		<Setter Property="Opacity" Value="1" />
		<Setter Property="OpacityMask" Value="Black" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Padding" Value="1,1" />
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">

					<Border x:Name="Bd"
							Padding="{TemplateBinding Padding}"
							Background="{StaticResource Gray.UnSelected.Background}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							SnapsToDevicePixels="true"
							>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="true">
							<!--  is enabled  -->
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource Gray.UnSelected.Background}" />
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{StaticResource Normal.Foreground}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<!--  mouse over  -->
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource Normal.MouseOver.Background}" />
							<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Normal.MouseOver.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="False" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<!--  is selected inactive  -->
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource Gray.UnSelected.Background}" />
							<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Normal.SelectedInActive.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelectionActive" Value="True" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<!--  is selected active  -->
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource Gray.UnSelected.Background}" />
							<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Normal.SelectedActive.Border}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<!--  is not enabled  -->
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource Normal.Background}" />
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{StaticResource Normal.Foreground}" />
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

	</Style>

	<!--#endregion-->

	<!--#region > Control Templates-->

	<ContentControl x:Key="ContentControl">

	</ContentControl>


	<ControlTemplate x:Key="Button.Normal.ControlTemplate"
			TargetType="Button"
			>
		<Border x:Name="border"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}"
				SnapsToDevicePixels="True"
				
				>
			<Border x:Name="bdr1"
					Margin="0,0,-1,-1"

					BorderThickness="{StaticResource Normal.Default.BorderThickness.Inner}"
					BorderBrush="Transparent"
					Padding="{TemplateBinding Padding}"
					>

				<ContentPresenter x:Name="contentPresenter"
						Content="{TemplateBinding Content}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						ContentStringFormat="{TemplateBinding ContentStringFormat}"
						Focusable="False"
						RecognizesAccessKey="True"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						/>
				<!--  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
			</Border>
		</Border>

		<ControlTemplate.Resources>



		</ControlTemplate.Resources>

		<ControlTemplate.Triggers>


			<Trigger Property="IsDefault" Value="True">
				<!--  is default  -->
				<Setter TargetName="bdr1" Property="BorderBrush" Value="{StaticResource Normal.Default.Border.Inner}" />
				<Setter TargetName="bdr1" Property="BorderThickness" Value="{StaticResource Normal.Default.BorderThickness.Inner}" />

			</Trigger>
			<Trigger Property="IsDefault" Value="False">
				<!--  is probably the "normal" condition  -->
				<!--  is not default  -->
				<Setter TargetName="bdr1" Property="BorderBrush" Value="Transparent" />
				<Setter TargetName="bdr1" Property="BorderThickness" Value="0" />
			</Trigger>

			<Trigger Property="IsMouseOver" Value="true">
				<!--  is mouse over  -->
				<!-- <Setter Property="Foreground" Value="{StaticResource Normal.MouseOver.Foreground}" /> -->
				<!-- <Setter Property="Foreground" Value="Red" /> -->
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, 
				Path=(custom:CustomProperties.GenericBrushTwo), TargetNullValue={StaticResource Normal.MouseOver.Foreground}}" />
				<Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, 
				Path=(custom:CustomProperties.GenericBrushOne), TargetNullValue={StaticResource Normal.MouseOver.Background}}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Normal.MouseOver.Border}" />
			</Trigger>
			<!-- <Setter Property="Foreground" Value="{StaticResource Normal.MouseOver.Foreground}" /> -->

			<Trigger Property="IsPressed" Value="True">
				<!--  is pressed  -->
				<Setter Property="Foreground" Value="{StaticResource Normal.Pressed.Foreground}" />
				<Setter TargetName="bdr1" Property="BorderBrush" Value="{DynamicResource Normal.Pressed.Default.Inner.Border}" />
				<Setter TargetName="border" Property="Background" Value="{DynamicResource Normal.Pressed.Background}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Normal.Pressed.Border}" />
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<!--  is not enabled  -->
				<Setter Property="Foreground" Value="{DynamicResource Normal.Disabled.Foreground}" />
				<Setter TargetName="bdr1" Property="BorderBrush" Value="{DynamicResource Normal.Disabled.Border.Inner}" />
				<Setter TargetName="border" Property="Background" Value="{DynamicResource Normal.Disabled.Background}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Normal.Disabled.Border}" />
			</Trigger>


		</ControlTemplate.Triggers>
	</ControlTemplate>


	<ControlTemplate x:Key="Button.Dark.ControlTemplate"
			TargetType="Button"
			>
		<Border x:Name="border"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}"
				SnapsToDevicePixels="True"
				
				>
			<Border x:Name="bdr1"
					Margin="0,0,-1,-1"
					BorderThickness="{StaticResource Normal.Default.BorderThickness.Inner}"
					BorderBrush="Transparent"
					Padding="{TemplateBinding Padding}"
					>

				<ContentPresenter x:Name="contentPresenter"
						Content="{TemplateBinding Content}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						ContentStringFormat="{TemplateBinding ContentStringFormat}"
						Focusable="False"
						RecognizesAccessKey="True"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						/>
				<!--  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
			</Border>
		</Border>

		<ControlTemplate.Resources>



		</ControlTemplate.Resources>

		<ControlTemplate.Triggers>


			<Trigger Property="IsDefault" Value="True">
				<!--  is default  -->
				<Setter TargetName="bdr1" Property="BorderBrush" Value="{StaticResource Dark.Border.Inner}" />
				<Setter TargetName="bdr1" Property="BorderThickness" Value="{StaticResource Normal.Default.BorderThickness.Inner}" />

			</Trigger>
			<Trigger Property="IsDefault" Value="False">
				<!--  is probably the "normal" condition  -->
				<!--  is not default  -->
				<Setter TargetName="bdr1" Property="BorderBrush" Value="Transparent" />
				<Setter TargetName="bdr1" Property="BorderThickness" Value="0" />
			</Trigger>

			<Trigger Property="IsMouseOver" Value="True">
				<!--  is mouse over  -->
				<Setter Property="Foreground" Value="{StaticResource Dark.MouseOver.Foreground}" />
				<Setter Property="Background" Value="{StaticResource Dark.MouseOver.Background}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Dark.MouseOver.Border}" />
			</Trigger>
				<!-- <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}},  -->
				<!-- Path=(custom:CustomProperties.GenericBrushTwo), TargetNullValue={StaticResource Dark.MouseOver.Foreground}}" /> -->
				<!-- <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}},  -->
				<!-- Path=(custom:CustomProperties.GenericBrushOne), TargetNullValue={StaticResource Dark.MouseOver.Background}}" /> -->


			<Trigger Property="IsPressed" Value="True">
				<!--  is pressed  -->
				<Setter Property="Foreground"                     Value=  "{DynamicResource Dark.Pressed.Foreground}" />
				<Setter TargetName="bdr1" Property="BorderBrush" Value=  "{DynamicResource Dark.Pressed.Border.Inner}" />
				<Setter TargetName="border" Property="Background" Value= "{DynamicResource Dark.Pressed.Background}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Dark.Pressed.Border}" />
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<!--  is not enabled  -->
				<Setter Property="Foreground"                       Value="{DynamicResource Dark.Disabled.Foreground}" />
				<Setter TargetName="bdr1" Property="BorderBrush" Value=  "{DynamicResource Dark.Disabled.Border.Inner}" />
				<Setter TargetName="border" Property="Background" Value= "{DynamicResource Dark.Disabled.Background}" />
				<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Dark.Disabled.Border}" />
			</Trigger>


		</ControlTemplate.Triggers>
	</ControlTemplate>


	<ControlTemplate x:Key="Btn.Ct.Stealth"
			TargetType="Button"
	>
		<Border x:Name="border"
				Padding="{TemplateBinding Padding}"
				VerticalAlignment="Center"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}"
				SnapsToDevicePixels="True"
				CornerRadius="{StaticResource Btn.Corner.Radius}"
		>
			<!--  CornerRadius="4"  -->
			<Border x:Name="bdr1"
					Margin="{TemplateBinding Padding}"
					VerticalAlignment="Center"
					BorderThickness="0,0,0,0"
					BorderBrush="Transparent"
			>
				<!--  >  -->

				<ContentPresenter x:Name="contentPresenter"
						Content="{TemplateBinding Content}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						ContentStringFormat="{TemplateBinding ContentStringFormat}"
						Focusable="False"
						RecognizesAccessKey="True"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
				/>
			</Border>
		</Border>

	</ControlTemplate>



	<!--#endregion-->

</ResourceDictionary>
