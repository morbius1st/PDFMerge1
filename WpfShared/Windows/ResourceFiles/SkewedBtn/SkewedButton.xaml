<Button x:Name="skewedButton"
				x:Class="WpfShared.Windows.ResourceFiles.SkewedBtn.SkewedButton"
				xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
				xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
				xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
				xmlns:local="clr-namespace:WpfShared.Windows.ResourceFiles.SkewedBtn"
				Padding="0"
				mc:Ignorable="d"
				d:DesignHeight="35"
				ContentTemplate="{DynamicResource DataTemplate}"
				Template="{DynamicResource ControlTemplate}">
	<Button.Style>
		<Style TargetType="Button">
			<Setter Property="BorderBrush"
							Value="Transparent" />
			<Setter Property="BorderThickness"
							Value="0" />
		</Style>
	</Button.Style>

	<Button.Resources>

		<Path x:Key="p"
					Margin="0"
					Width="20"
					Height="15"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Data="M 0,0 0,4 4,4 4,0 z"
					Fill="Red"
					Stretch="Uniform" />

		<TextBlock x:Key="t"
							 Margin="0,0,0,0"
							 Height="20"
							 Padding="0"
							 HorizontalAlignment="right"
							 VerticalAlignment="top"
							 Background="Transparent"
							 Foreground="Black"
							 Text="" />
		<!-- Width="{Binding ElementName=skewedButton, -->
		<!-- Path=ActualWidth}" -->
		<!-- Height="{Binding ElementName=skewedButton, -->
		<!-- Path=ActualHeight}" -->

		<!-- Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SkewedButton}}, Path=ActualWidth}" -->
		<!-- Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SkewedButton}}, Path=ActualHeight}" -->
		<DataTemplate x:Key="DataTemplate">
			<Grid>

				<ContentControl x:Name="IconContent"
												Content="{Binding ElementName=skewedButton,
															Path=Icon,
															FallbackValue={StaticResource p}}"
												HorizontalAlignment="{Binding Content.HorizontalAlignment,
																					RelativeSource={RelativeSource Self}, FallbackValue='Center'}"
												VerticalAlignment="{Binding Content.VerticalAlignment,
																					RelativeSource={RelativeSource Self}, FallbackValue='Center'}" />

				<ContentControl x:Name="TextContent"
												Content="{Binding ElementName=skewedButton,
															Path=TextBlk,
															FallbackValue={StaticResource t}}"
												HorizontalAlignment="{Binding Content.HorizontalAlignment,
																					RelativeSource={RelativeSource Self}, FallbackValue='Center'}"
												VerticalAlignment="{Binding Content.VerticalAlignment,
																					RelativeSource={RelativeSource Self}, FallbackValue='Center'}" />

			</Grid>
		</DataTemplate>

		<ControlTemplate x:Key="ControlTemplate"
										 TargetType="{x:Type Button}">
			<Grid Height="{TemplateBinding Height}"
						Background="Transparent"
						SnapsToDevicePixels="True">
				<Border x:Name="border"
								RenderTransformOrigin="1,1"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}">
					<Border.RenderTransform>
						<TransformGroup>
							<ScaleTransform />
							<SkewTransform AngleY="0"
														 AngleX="20" />
							<RotateTransform />
							<TranslateTransform X="0" />
						</TransformGroup>
					</Border.RenderTransform>
				</Border>

				<ContentPresenter x:Name="contentPresenter"
													Content="{TemplateBinding Content}"
													Margin="{TemplateBinding Padding}"
													HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													ContentStringFormat="{TemplateBinding ContentStringFormat}"
													Focusable="False"
													RecognizesAccessKey="True"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
													ContentTemplate="{TemplateBinding ContentTemplate}" />
			</Grid>

			<ControlTemplate.Triggers>
				<Trigger Property="IsDefaulted"
								 Value="True">
					<Setter TargetName="border"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				</Trigger>
				<Trigger Property="IsMouseOver"
								 Value="True">
					<Setter TargetName="border"
									Property="Background"
									Value="#FFBEE6FD" />
					<Setter TargetName="border"
									Property="BorderBrush"
									Value="#FF3C7FB1" />
				</Trigger>
				<Trigger Property="IsPressed"
								 Value="True">
					<Setter TargetName="border"
									Property="Background"
									Value="#FFC4E5F6" />
					<Setter TargetName="border"
									Property="BorderBrush"
									Value="#FF2C628B" />
				</Trigger>
				<Trigger Property="ToggleButton.IsChecked"
								 Value="True">
					<Setter TargetName="border"
									Property="Background"
									Value="#FFBCDDEE" />
					<Setter TargetName="border"
									Property="BorderBrush"
									Value="#FF245A83" />
				</Trigger>
				<Trigger Property="IsEnabled"
								 Value="False">
					<Setter TargetName="border"
									Property="Background"
									Value="#FFF4F4F4" />
					<Setter TargetName="border"
									Property="BorderBrush"
									Value="#FFADB2B5" />
					<Setter Property="Foreground"
									Value="#FF838383" />
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

	</Button.Resources>

</Button>
