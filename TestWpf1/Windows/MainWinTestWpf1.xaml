<Window
	x:Class="TestWpf1.Windows.MainWinTestWpf1"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:data="clr-namespace:TestWpf1.Data"
	xmlns:local="clr-namespace:TestWpf1.Windows"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	Name="mainWinTestWpf1"
	Title="MainWindow"
	Width="1000"
	Height="550"
	Background="{StaticResource Normal.Window.Background}"
	DataContext="{Binding ElementName=mainWinTestWpf1}"
	mc:Ignorable="d">


	<Window.Resources>

		<Style x:Key="TreeViewItemFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<x:Static x:Key="WAITING" Member="local:PauseState.WAITING" />
		<x:Static x:Key="RUNNING" Member="local:PauseState.RUNNING" />


		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
		<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF" />
		<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181" />



		<Style
			x:Key="button.base"
			BasedOn="{StaticResource Button.Normal.Style}"
			TargetType="Button">
			<Setter Property="Margin" Value="5,0,0,0" />
			<Setter Property="Padding" Value="0" />
			<Setter Property="VerticalAlignment" Value="Bottom" />
		</Style>

		<Style
			x:Key="button.ok.on.waiting"
			BasedOn="{StaticResource button.base}"
			TargetType="Button">
			<Setter Property="IsEnabled" Value="false" />
			<Setter Property="Background" Value="LightCyan" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding PauseStateValue}" Value="{StaticResource WAITING}">
					<Setter Property="IsEnabled" Value="true" />
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<Style
			x:Key="button.ok.on.not.waiting"
			BasedOn="{StaticResource button.base}"
			TargetType="Button">
			<Setter Property="IsEnabled" Value="True" />
			<Setter Property="Background" Value="LightBlue" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding PauseStateValue}" Value="{StaticResource WAITING}">
					<Setter Property="IsEnabled" Value="False" />
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<Style
			x:Key="button.ok.on.running"
			BasedOn="{StaticResource button.base}"
			TargetType="Button">
			<Setter Property="IsEnabled" Value="false" />
			<Setter Property="Background" Value="LightPink" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding PauseStateValue}" Value="{StaticResource RUNNING}">
					<Setter Property="IsEnabled" Value="true" />
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<Style
			x:Key="button.ok.on.not.running"
			BasedOn="{StaticResource button.base}"
			TargetType="Button">
			<Setter Property="IsEnabled" Value="true" />
			<Setter Property="Background" Value="LightGoldenrodYellow" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding PauseStateValue}" Value="{StaticResource RUNNING}">
					<Setter Property="IsEnabled" Value="false" />
				</DataTrigger>
			</Style.Triggers>
		</Style>


		<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Width" Value="16" />
			<Setter Property="Height" Value="16" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border
							Width="16"
							Height="16"
							Padding="5,5,5,5"
							Background="Transparent">
							<Path
								x:Name="ExpandPath"
								Data="{StaticResource TreeArrow}"
								Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
								Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
								<Path.RenderTransform>
									<RotateTransform Angle="135" CenterX="3" CenterY="3" />
								</Path.RenderTransform>
							</Path>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ExpandPath" Property="RenderTransform">
									<Setter.Value>
										<RotateTransform Angle="180" CenterX="3" CenterY="3" />
									</Setter.Value>
								</Setter>
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="True" />
									<Condition Property="IsChecked" Value="True" />
								</MultiTrigger.Conditions>
								<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
			<!-- <Setter Property="IsExpanded" Value="True"/> -->
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
			<Setter Property="Padding" Value="1,0,0,0" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" MinWidth="19" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition />
							</Grid.RowDefinitions>
							<ToggleButton
								x:Name="Expander"
								ClickMode="Press"
								IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
								Style="{StaticResource ExpandCollapseToggleStyle}" />
							<Border
								x:Name="Bd"
								Grid.Column="1"
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="true">
								<ContentPresenter
									x:Name="PART_Header"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
							<ItemsPresenter
								x:Name="ItemsHost"
								Grid.Row="1"
								Grid.Column="1"
								Grid.ColumnSpan="2" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="false">
								<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
							</Trigger>
							<Trigger Property="HasItems" Value="false">
								<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
							</Trigger>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true" />
									<Condition Property="IsSelectionActive" Value="false" />
								</MultiTrigger.Conditions>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>



	</Window.Resources>

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="12*" />
			<ColumnDefinition Width="12*" />
			<ColumnDefinition Width="10*" />
		</Grid.ColumnDefinitions>

		<Grid.RowDefinitions>
			<RowDefinition Height="6" />
			<RowDefinition Height="*" />
			<RowDefinition Height="50" />
		</Grid.RowDefinitions>

		<ProgressBar
			x:Name="Pb1"
			Grid.Row="0"
			Grid.Column="0"
			Height="2"
			Margin="0,0,18,0"
			VerticalAlignment="Bottom"
			Background="Transparent"
			BorderThickness="0"
			Maximum="{Binding Pb1MaxValue}"
			Value="{Binding Pb1Value}" />

		<ProgressBar
			x:Name="Pb2"
			Grid.Row="0"
			Grid.Column="1"
			Height="2"
			Margin="0,0,18,0"
			VerticalAlignment="Bottom"
			Background="Transparent"
			BorderThickness="0"
			Maximum="{Binding Pb2MaxValue}"
			Value="{Binding Pb2Value}" />

		<DockPanel
			Grid.Row="2"
			Grid.Column="0"
			Grid.ColumnSpan="3"
			Margin="5"
			HorizontalAlignment="Right">

			<Button
				x:Name="BtnDebug"
				Width="70"
				Height="30"
				Click="BtnDebug_OnClick"
				Content="Debug"
				Style="{StaticResource button.ok.on.not.running}" />

			<Button
				x:Name="BtnPauseResumeTask"
				Width="70"
				Height="30"
				Click="BtnPauseResumeTask_OnClick"
				Content="{Binding PauseStateMessage}"
				Style="{StaticResource button.ok.on.not.waiting}" />

			<Button
				x:Name="BtnCancelTask"
				Width="70"
				Height="30"
				Click="BtnCancelTask_OnClick"
				Content="Cancel Task"
				Style="{StaticResource button.ok.on.running}" />

			<Button
				x:Name="BtnTestProgress"
				Width="70"
				Height="30"
				Click="BtnTestProgBar_OnClick"
				Content="Test ProgBar"
				Style="{StaticResource button.ok.on.waiting}" />

			<Button
				x:Name="BtnClear"
				Width="70"
				Height="30"
				Click="BtnClear_OnClick"
				Content="Clear"
				Style="{StaticResource button.ok.on.waiting}" />

			<Button
				x:Name="BtnCount"
				Width="70"
				Height="30"
				Click="BtnCount_OnClick"
				Content="Count"
				Style="{StaticResource button.ok.on.not.running}" />

			<Button
				x:Name="BtnTest"
				Width="70"
				Height="30"
				Click="BtnTest_OnClick"
				Content="Test"
				Style="{StaticResource button.ok.on.waiting}" />

		</DockPanel>

		<DockPanel
			Grid.Row="1"
			Grid.Column="2"
			Margin="15,5,5,0"
			HorizontalAlignment="Left"
			VerticalAlignment="Top">

			<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
				<Label
					Width="120"
					Margin="0"
					Padding="0"
					Content="Task Status"
					Foreground="White" />
				<Label
					Margin="0,0,0,0"
					Padding="0"
					Content="{Binding Path=ProcessStatus, Mode=OneWay, TargetNullValue='n/a', FallbackValue='0'}"
					Foreground="White" />
			</StackPanel>

			<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
				<Label
					Width="120"
					Margin="0"
					Padding="0"
					Content="Pause Status Value"
					Foreground="White" />
				<Label
					Margin="0,0,0,0"
					Padding="0"
					Content="{Binding Path=PauseStateValue, Mode=OneWay, FallbackValue='0'}"
					Foreground="White" />
			</StackPanel>

			<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
				<Label
					Width="120"
					Margin="0"
					Padding="0"
					Content="Extended Count"
					Foreground="White" />
				<Label
					Margin="0,0,0,0"
					Padding="0"
					Content="{Binding Path=ExtendedCount, Mode=OneWay, FallbackValue=0}"
					Foreground="White" />
			</StackPanel>

			<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
				<Label
					Width="120"
					Margin="0"
					Padding="0"
					Content="Test Count"
					Foreground="White" />
				<Label
					Margin="0,0,0,0"
					Padding="0"
					Content="{Binding Path=TestCount, Mode=OneWay, FallbackValue=0}"
					Foreground="White" />
			</StackPanel>

			<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
				<Label
					Width="120"
					Margin="0"
					Padding="0"
					Content="Ext Merge Count"
					Foreground="White" />
				<Label
					Margin="0,0,0,0"
					Padding="0"
					Content="{Binding Path=ExtendedMergeCount, Mode=OneWay, FallbackValue=0}"
					Foreground="White" />
			</StackPanel>

		</DockPanel>

		<TextBox
			x:Name="Tbx1"
			Grid.Row="1"
			Grid.Column="1"
			Background="Transparent"
			Foreground="White"
			Text="{Binding TbxMessage, Mode=OneWay}"
			VerticalScrollBarVisibility="Visible" />


		<TreeView
			x:Name="Tv1"
			Grid.Row="1"
			Grid.Column="0"
			d:DataContext="{Binding Source={x:Static local:MainWinTestWpf1.Sd}, Path=Root}"
			Background="Transparent"
			DataContext="{Binding Source={x:Static local:MainWinTestWpf1.Sd}, Path=TreeRoot}"
			ItemContainerStyle="{StaticResource TreeViewItemStyle1}"
			ItemsSource="{Binding Path=ChildNodes}"
			ScrollViewer.VerticalScrollBarVisibility="Visible">
			<TreeView.ItemTemplate>
				<HierarchicalDataTemplate ItemsSource="{Binding ChildNodes}">
					<DockPanel HorizontalAlignment="Stretch">
						<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
							<Label
								Margin="10,0,0,0"
								Padding="0"
								Content="{Binding ExtCount}"
								Foreground="White" />

							<Label
								Margin="10,0,0,0"
								Padding="0"
								Content="{Binding ExtMergeCount}"
								Foreground="White" />

							<Label
								Margin="10,0,0,0"
								Padding="0"
								Content="{Binding ExtData.MergeCount}"
								Foreground="White" />

							<Label
								Margin="10,0,0,0"
								Padding="0"
								Content="{Binding Name}"
								Foreground="White" />
						</StackPanel>

						<DockPanel HorizontalAlignment="Stretch">

							<Label
								Margin="5,0,0,0"
								Padding="0"
								Content="{Binding ExtData.ExtName}"
								DockPanel.Dock="Top"
								Foreground="White" />

							<Label
								Margin="5,0,0,0"
								Padding="0"
								Content="No Merge items"
								DockPanel.Dock="Top"
								Foreground="DarkSalmon">
								<Label.Style>
									<Style TargetType="Label">
										<Setter Property="Visibility" Value="Collapsed" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding Path=ExtData.MergeCount}" Value="0">
												<Setter Property="Visibility" Value="Visible" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Label.Style>

							</Label>

							<ListView
								Margin="5,0,0,0"
								Padding="0"
								Background="Black"
								DockPanel.Dock="Top"
								ItemsSource="{Binding Path=ExtData.MergeInfo}">
								<ListView.Style>
									<Style TargetType="ListView">
										<Setter Property="Visibility" Value="Visible" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding Path=ExtData.MergeCount}" Value="0">
												<Setter Property="Visibility" Value="Collapsed" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</ListView.Style>
								<ListView.ItemTemplate>
									<DataTemplate>
										<StackPanel Orientation="Horizontal">
											<Label
												Padding="0,0,10,0"
												Content="{Binding Path=MergeNumber}"
												Foreground="White" />
											<Label Content="{Binding Path=MergeName}" Foreground="White" />

										</StackPanel>
									</DataTemplate>
								</ListView.ItemTemplate>
							</ListView>

							<DockPanel.Style>
								<Style TargetType="DockPanel">
									<Setter Property="Visibility" Value="Visible" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=IsSelected}" Value="false">
											<Setter Property="Visibility" Value="Collapsed" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</DockPanel.Style>

						</DockPanel>

					</DockPanel>
				</HierarchicalDataTemplate>
			</TreeView.ItemTemplate>
		</TreeView>

	</Grid>
</Window>
