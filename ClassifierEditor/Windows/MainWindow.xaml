<Window
		x:Class="ClassifierEditor.Windows.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
		xmlns:custom="clr-namespace:ClassifierEditor.Windows.Support"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:file="clr-namespace:ClassifierEditor.FilesSupport"
		xmlns:local="clr-namespace:ClassifierEditor.Windows"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:res="clr-namespace:ClassifierEditor.Windows.ResourceFiles.XamlResources"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:tree="clr-namespace:ClassifierEditor.Tree"
		x:Name="MainWin"
		Title="MainWindow"
		Width="900"
		Height="650"
		MinWidth="900"
		MinHeight="650"
		FontFamily="Tahoma"
		FontSize="12"
		d:UseSampleData="True"
		Closing="MainWin_Closing"
		Loaded="Window_Loaded"
		mc:Ignorable="d"
		Background="{DynamicResource Window.Background}"
		>

	<Window.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ResourceFiles/XamlResources/ScrollBar.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/ExpanderCheckBox.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconResources.xaml" />

			</ResourceDictionary.MergedDictionaries>

			<local:Lv1ConditionTemplateSelector x:Key="Lv1ConditionSelector" />
			<local:Lv2ConditionTemplateSelector x:Key="Lv2ConditionSelector" />


			<sys:Double x:Key="LogicalHorizBarWidth">18</sys:Double>


			<PathGeometry
					x:Key="TreeArrow"
					Figures="M0,0 L0,8 L8,0 z"
					/>

			<PathGeometry
					x:Key="TreeArrow2"
					Figures="M3.5,3.5 L3.5,8 L8,3.5 z"
					/>


			<!--
			use this resource to change the item highlight color throughout the window
			<SolidColorBrush
				x:Key="{x:Static SystemColors.HighlightBrushKey}"
				Color="{DynamicResource Blue.100}"
				/>-->

			<Color x:Key="Datagrid.Row.Selected">#FF003554</Color>

			<Color x:Key="Window.Background.C">#FF222222</Color>
			<Color x:Key="TreeView.Background.C">#FF212121</Color>

			<Color x:Key="TreeViewRow.BorderBrush.Light.C">#FFAAEAF3</Color>
			<Color x:Key="TreeViewRow.BorderBrush.Dark.C">#FF111132</Color>


			<SolidColorBrush x:Key="ScrollBarBkg" Color="#222222" />
			<SolidColorBrush x:Key="Win.Title.Background" Color="{StaticResource Gray.250}" />
			<SolidColorBrush x:Key="Grid.Line" Color="LightSkyBlue" />

			<SolidColorBrush x:Key="Window.Background" Color="{StaticResource Window.Background.C}" />

			<SolidColorBrush x:Key="ListBorder" Color="#828790" />

			<SolidColorBrush x:Key="TreeViewItem.Label.Foreground.Muted" Color="{StaticResource Gray.500}" />
			<SolidColorBrush x:Key="TreeViewItem.Label.Foreground.Dim" Color="{StaticResource Gray.400}" />

			<SolidColorBrush x:Key="TreeView.Background" Color="{StaticResource TreeView.Background.C}" />
			<SolidColorBrush x:Key="TreeView.Selected.Background" Color="{StaticResource Blue.100}" />
			<SolidColorBrush x:Key="TreeView.Selected.MouseOver.Background" Color="{StaticResource Blue.100}" />
			<SolidColorBrush x:Key="TreeView.MouseOver.Background" Color="{StaticResource Blue.050}" />
			<SolidColorBrush x:Key="TreeView.ContextSelected.Background" Color="#14eb501f" />

			<SolidColorBrush x:Key="TreeView.Popup.Selected.Background" Color="{StaticResource Blue.200}" />

			<SolidColorBrush x:Key="TreeViewRow.BorderBrush.Light" Color="{StaticResource TreeViewRow.BorderBrush.Light.C}" />

			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="{StaticResource Deep.Orange.400}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="{StaticResource Deep.Orange.400}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="{StaticResource Deep.Orange.100}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="{StaticResource Deep.Orange.100}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF27C7F7" />

			<SolidColorBrush x:Key="ContextMenu.Background" Color="{StaticResource Gray.200}" />
			<SolidColorBrush x:Key="ContextMenu.Background.Icons" Color="{StaticResource Gray.220}" />
			<SolidColorBrush x:Key="ContextMenu.Background.Icons.Divider" Color="{StaticResource Gray.200}" />

			<SolidColorBrush x:Key="Dg.CellLabel.Background" Color="{StaticResource Gray.200}" />

			<SolidColorBrush x:Key="ListView.Static.Background" Color="{StaticResource Blue.200}" />
			<SolidColorBrush x:Key="ListView.Static.Border" Color="{StaticResource Blue.200}" />
			<SolidColorBrush x:Key="ListView.Disabled.Background" Color="{StaticResource Blue.Gray.050}" />
			<SolidColorBrush x:Key="ListBox.Disabled.Border" Color="{StaticResource Blue.Gray.050}" />

			<SolidColorBrush x:Key="ListView.Item.Background.NoConditions" Color="{StaticResource Deep.Purple.300}" />
			<SolidColorBrush x:Key="ListView.Item.Background.Discipline" Color="{StaticResource Lime.200}" />
			<SolidColorBrush x:Key="ListView.Item.Background.Logical" Color="{StaticResource Indigo.400}" />
			<SolidColorBrush x:Key="ListView.Item.Background.Value" Color="{StaticResource Teal.500}" />
			<SolidColorBrush x:Key="ListView.Item.Background.Error" Color="{StaticResource Red.200}" />
			<SolidColorBrush x:Key="ListView.Item.Background" Color="{StaticResource Blue.450}" />


			<!-- <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" /> -->

			<SolidColorBrush x:Key="Button.Static.Background" Color="{StaticResource Lime.300}" />
			<SolidColorBrush x:Key="Button.Static.Delete.Background" Color="{StaticResource Yellow.300}" />
			<SolidColorBrush x:Key="Button.Static.Delete.Icon" Color="{StaticResource Gray.100}" />
			<SolidColorBrush x:Key="Button.Static.Border" Color="{StaticResource Lime.300}" />
			<SolidColorBrush x:Key="Button.MouseOver.Background" Color="{StaticResource Lime.600}" />
			<SolidColorBrush x:Key="Button.MouseOver.Border" Color="{StaticResource Lime.600}" />
			<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
			<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
			<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
			<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
			<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />

			<!-- <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF" /> -->
			<!--    -->
			<!-- <LinearGradientBrush x:Key="ComboBox.Static.Background" StartPoint="0,0" EndPoint="0,1"> -->
			<!-- 	<GradientStop Offset="0.0" Color="#FFF0F0F0" /> -->
			<!-- 	<GradientStop Offset="1.0" Color="#FFE5E5E5" /> -->
			<!-- </LinearGradientBrush> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000" /> -->
			<!-- <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" StartPoint="0,0" EndPoint="0,1"> -->
			<!-- 	<GradientStop Offset="0.0" Color="#FFECF4FC" /> -->
			<!-- 	<GradientStop Offset="1.0" Color="#FFDCECFC" /> -->
			<!-- </LinearGradientBrush> -->
			<!-- <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA" /> -->
			<!-- <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" StartPoint="0,0" EndPoint="0,1"> -->
			<!-- 	<GradientStop Offset="0.0" Color="#FFEBF4FC" /> -->
			<!-- 	<GradientStop Offset="1.0" Color="#FFDCECFC" /> -->
			<!-- </LinearGradientBrush> -->
			<!-- <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000" /> -->
			<!-- <LinearGradientBrush x:Key="ComboBox.Pressed.Background" StartPoint="0,0" EndPoint="0,1"> -->
			<!-- 	<GradientStop Offset="0.0" Color="#FFDAECFC" /> -->
			<!-- 	<GradientStop Offset="1.0" Color="#FFC4E0FC" /> -->
			<!-- </LinearGradientBrush> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5" /> -->
			<!-- <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" StartPoint="0,0" EndPoint="0,1"> -->
			<!-- 	<GradientStop Offset="0.0" Color="#FFDAEBFC" /> -->
			<!-- 	<GradientStop Offset="1.0" Color="#FFC4E0FC" /> -->
			<!-- </LinearGradientBrush> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="Red" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060" /> -->


			<!--  Control colors.  -->
			<Color x:Key="DisabledForegroundColor">#FF888888</Color>
			<Color x:Key="ControlLightColor">White</Color>
			<Color x:Key="ControlMediumColor">#FF7381F9</Color>
			<Color x:Key="BorderMediumColor">#FF888888</Color>

			<!-- <Color x:Key="WindowColor">#FFE8EDF9</Color> -->
			<!-- <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color> -->
			<!-- <Color x:Key="ContentAreaColorDark">#FF7381F9</Color> -->
			<!--    -->
			<!-- <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color> -->
			<!-- <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color> -->
			<!--    -->
			<!--    -->
			<!-- <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color> -->
			<!-- <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color> -->
			<!--    -->
			<!--    -->
			<!-- <Color x:Key="ControlDarkColor">#FF211AA9</Color> -->
			<!--    -->
			<!-- <Color x:Key="ControlMouseOverColor">#FF3843C4</Color> -->
			<!-- <Color x:Key="ControlPressedColor">#FF211AA9</Color> -->
			<!--    -->
			<!--    -->
			<!-- <Color x:Key="GlyphColor">#FF444444</Color> -->
			<!-- <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color> -->
			<!--    -->
			<!--  ~1~  Border colors  @1@  -->
			<!-- <Color x:Key="BorderLightColor">#FFCCCCCC</Color> -->
			<!--    -->
			<!-- <Color x:Key="BorderDarkColor">#FF444444</Color> -->
			<!--    -->
			<!-- <Color x:Key="PressedBorderLightColor">#FF888888</Color> -->
			<!-- <Color x:Key="PressedBorderDarkColor">#FF444444</Color> -->
			<!--    -->
			<!-- <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color> -->
			<!-- <Color x:Key="DisabledBorderDarkColor">#FF888888</Color> -->
			<!--    -->
			<!-- <Color x:Key="DefaultBorderBrushDarkColor">Black</Color> -->
			<!--    -->
			<!--  ~1~  Control-specific resources.  @1@  -->
			<!-- <Color x:Key="HeaderTopColor">#FFC5CBF9</Color> -->
			<!-- <Color x:Key="DatagridCurrentCellBorderColor">Black</Color> -->
			<!-- <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color> -->
			<!--    -->
			<!-- <Color x:Key="NavButtonFrameColor">#FF3843C4</Color> -->

			<!-- <LinearGradientBrush x:Key="MenuPopupBrush" StartPoint="0.5,0" EndPoint="0.5,1"> -->
			<!-- 	<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" /> -->
			<!-- 	<GradientStop Offset="0.5" Color="{DynamicResource ControlMediumColor}" /> -->
			<!-- 	<GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" /> -->
			<!-- </LinearGradientBrush> -->
			<!--    -->
			<!-- <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0"> -->
			<!-- 	<LinearGradientBrush.GradientStops> -->
			<!-- 		<GradientStopCollection> -->
			<!-- 			<GradientStop Offset="0" Color="#000000FF" /> -->
			<!-- 			<GradientStop Offset="0.4" Color="#600000FF" /> -->
			<!-- 			<GradientStop Offset="0.6" Color="#600000FF" /> -->
			<!-- 			<GradientStop Offset="1" Color="#000000FF" /> -->
			<!-- 		</GradientStopCollection> -->
			<!-- 	</LinearGradientBrush.GradientStops> -->
			<!-- </LinearGradientBrush> -->


			<!--#endregion-->

			<Style
					x:Key="Label.Base"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style
					x:Key="Label.Selected"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="2" />
			</Style>

			<Style
					x:Key="Label.Condition"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="FontSize" Value="10" />
				<Setter Property="HorizontalAlignment" Value="left" />
				<Setter Property="Margin" Value="2,2,2,3" />

			</Style>

			<Style
					x:Key="TextBox.Selected"
					TargetType="{x:Type TextBox}"
					>
				<Setter Property="Background" Value="{StaticResource Edit.TextBox.Background}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="IsEnabled" Value="false" />
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="MaxLines" Value="1" />
				<Setter Property="Padding" Value="6,2,4,2" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />

				<Style.Triggers>
					<DataTrigger
							Binding="{Binding IsSelected}"
							Value="true"
							>
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style
					x:Key="Label.Selected.HintText"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="{StaticResource Edit.TextBox.Background}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Gray.400}" />
					</Setter.Value>
				</Setter>
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="6,2,4,2" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<Style
					x:Key="Dg.Cell.Base"
					TargetType="{x:Type DataGridCell}"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style
					x:Key="Dg.Row.Base"
					TargetType="{x:Type DataGridRow}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style
					x:Key="Dg.CellLabel.Base"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="{StaticResource Dg.CellLabel.Background}" />
				<Setter Property="FontSize" Value="8" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="3,0,0,0" />
				<Setter Property="Padding" Value="2" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>

			<Style
					x:Key="Dg.CellLabel.Title"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Width" Value="36" />
			</Style>

			<Style
					x:Key="Dg.CellLabel.Data"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Width" Value="23" />
			</Style>

			<Style
					x:Key="Dg.CellLabel.Border"
					TargetType="{x:Type Border}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource TreeViewRow.BorderBrush.Light}" />
				<Setter Property="BorderThickness" Value="0,0,1,0" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0,2,0,2" />
				<Setter Property="Padding" Value="2.0,0,4.5,0" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
			</Style>


			<Style x:Key="Tv1ItemFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style
					x:Key="Tv1ExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="16" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Width="24"
									Height="24"
									Padding="5,5,5,5"
									Background="Transparent"
									>
								<Path
										x:Name="ExpandPath"
										Data="{StaticResource TreeArrow}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" CenterX="3" CenterY="3" />
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="Width" Value="16" />
			</Style>


			<Style
					x:Key="Tv.context.menuitem.base"
					TargetType="{x:Type MenuItem}"
					>
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Padding" Value="0,2,0,2" />
			</Style>

			<Style
					x:Key="Tv.context.menuitem.move"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding HasSelection, Source={x:Static local:MainWindow.BaseOfTreeRoot}}" Value="true" />
							<Condition Binding="{Binding IsSelected}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="true" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style
					x:Key="Tv.context.menuitem.clone"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Style.Triggers>
					<DataTrigger
							Binding="{Binding HasSelection,
																Source={x:Static local:MainWindow.BaseOfTreeRoot}}"
							Value="true"
							>
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>

				</Style.Triggers>
			</Style>



			<ContextMenu
					x:Key="Tv1ContextMenu"
					x:Name="Tv1ContextMenu"
					Padding="0,6,0,6"
					Closed="Tv1ContextMenu_OnClosed"
					HasDropShadow="True"
					Opened="Tv1ContextMenu_OnOpened"
					Background="{StaticResource ContextMenu.Background}"
					Foreground="White"
					OverridesDefaultStyle="True"
					>
				<!--  Closed="Tv1ContextMenu_OnClosed"  -->

				<ContextMenu.Template>
					<ControlTemplate
							x:Name="ContextTemplate"
							TargetType="{x:Type ContextMenu}"
							>

						<Border
								x:Name="ContextMenuBorder"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								>

							<ScrollViewer
									x:Name="ContextMenuScrollViewer"
									Grid.ColumnSpan="2"
									Margin="1,0"
									Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
																																TypeInTargetAssembly={x:Type FrameworkElement}}}"
									>
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas
											Width="0"
											Height="0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle
												x:Name="OpaqueRect"
												Width="{Binding ActualWidth,
																				ElementName=ContextMenuBorder}"
												Height="{Binding ActualHeight,
																				 ElementName=ContextMenuBorder}"
												Fill="{Binding Background,
																			 ElementName=ContextMenuBorder}"
												/>
									</Canvas>
									<Rectangle
											Margin="1,2"
											Width="7"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											RadiusX="2"
											RadiusY="2"
											/>
									<!--  Fill="#FFF1F1F1"  -->
									<Rectangle
											Margin="8,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											/>
									<Rectangle
											Margin="9,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons.Divider}"
											/>
									<ItemsPresenter
											x:Name="ItemsPresenter"
											Margin="{TemplateBinding Padding}"
											KeyboardNavigation.DirectionalNavigation="Cycle"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											/>
								</Grid>
							</ScrollViewer>
						</Border>

						<ControlTemplate.Triggers>

							<Trigger SourceName="ContextMenuScrollViewer" Property="CanContentScroll" Value="False">
								<Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=ContextMenuScrollViewer}" />
								<Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=ContextMenuScrollViewer}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

				</ContextMenu.Template>

				<MenuItem Click="Tv1ContextMenuExpand_OnClick">
					<MenuItem.Style>
						<Style
								TargetType="{x:Type MenuItem}"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="CommandParameter" Value="{Binding ContextCmdExpand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
							<Setter Property="Header" Value="{Binding ContextCmdExpand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
							<Setter Property="IsEnabled" Value="False" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding CanExpand}" Value="true" />
										<Condition Binding="{Binding IsExpanded}" Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding CanExpand}" Value="true" />
										<Condition Binding="{Binding IsExpanded}" Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter Property="CommandParameter" Value="{Binding ContextCmdCollapse, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
									<Setter Property="Header" Value="{Binding ContextCmdCollapse, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>


								<!--  <DataTrigger  -->
								<!--  Binding="{Binding Path=CanExpand}"  -->
								<!--  Value="true"  -->
								<!--  >  -->
								<!-- 	<Setter Property="IsEnabled" Value="true" /> -->
								<!-- </DataTrigger> -->
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<!--  Binding="{Binding RelativeSource={RelativeSource Self},  -->
				<!--  Path=DataContext.CanExpand}"  -->


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding ContextCmdAddBefore,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Add Category Before"
						Click="Tv1ContextMenuAddBefore_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>
				<MenuItem
						CommandParameter="{Binding ContextCmdAddAfter,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Add Category After"
						Click="Tv1ContextMenuAddAfter_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>
				<MenuItem
						CommandParameter="{Binding ContextCmdAddChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Add Sub-Category"
						Click="Tv1ContextMenuAddChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>


				<Separator Margin="6" />



				<MenuItem
						CommandParameter="{Binding ContextCmdMoveBefore,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Move Selected Before"
						Click="Tv1ContextMenuMoveBefore_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						/>

				<MenuItem
						CommandParameter="{Binding ContextCmdMoveAfter,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Move Selected After"
						Click="Tv1ContextMenuMoveAfter_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						/>


				<MenuItem
						CommandParameter="{Binding ContextCmdMoveAsChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Move Selected as Sub-category"
						Click="Tv1ContextMenuMoveChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						/>


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding ContextCmdCopy,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Duplicate Selected"
						Click="Tv1ContextMenuSelCopy_OnClick"
						Style="{StaticResource Tv.context.menuitem.clone}"
						/>
				<MenuItem
						CommandParameter="{Binding ContextCmdCopyAsChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Duplicate Selected as a Sub-Category"
						Click="Tv1ContextMenuCopySelAsChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.clone}"
						/>


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding ContextCmdDelete,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}}}"
						Header="Delete Category"
						Click="Tv1ContextMenuDelete_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>

			</ContextMenu>


			<Style
					x:Key="Tv1ItemContainerStyle1"
					TargetType="{x:Type TreeViewItem}"
					>
				<Setter Property="Width" Value="{Binding ActualWidth, ElementName=Tv1}" />
				<Setter Property="ContextMenu" Value="{StaticResource Tv1ContextMenu}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource Tv1ItemFocusVisual}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
				<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
				<Setter Property="Padding" Value="1,0,0,0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate
								x:Name="Tv1ItemContainer"
								TargetType="{x:Type TreeViewItem}"
								>

							<Grid Margin="0,0,0,2">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" MinWidth="19" />
									<ColumnDefinition Width="*" />
									<!-- <ColumnDefinition Width="*" /> -->
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<ToggleButton
										x:Name="Expander"
										VerticalAlignment="Top"
										ClickMode="Press"
										IsChecked="{Binding IsExpanded,
																				RelativeSource={RelativeSource TemplatedParent}}"
										Style="{StaticResource Tv1ExpandCollapseToggleStyle}"
										/>
								<Border
										x:Name="Bdr"
										Grid.Column="1"
										Grid.Row="0"
										Margin="0,0.5,4.5,0"
										CornerRadius="6"
										SnapsToDevicePixels="True"
										BorderThickness="12,1.5,.5,6"
										>
									<Border.Style>
										<Style TargetType="{x:Type Border}">
											<Setter Property="Background" Value="{StaticResource TreeView.Background}" />

										</Style>
									</Border.Style>
									<Border.BorderBrush>
										<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
											<GradientStop Offset="0.03" Color="{StaticResource TreeViewRow.BorderBrush.Dark.C}" />
											<GradientStop Offset="0.10" Color="{StaticResource TreeViewRow.BorderBrush.Light.C}" />
										</LinearGradientBrush>
									</Border.BorderBrush>
									<Border
											x:Name="BD"
											Margin="-3.5,-.5,.5,-1"
											CornerRadius="5"
											BorderThickness="4,0.5,2,0.5"
											BorderBrush="{StaticResource TreeView.Background}"
											>
										<!--  Background="{TemplateBinding Background}"  -->
										<Border.Style>
											<Style TargetType="{x:Type Border}">
												<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											</Style>
										</Border.Style>
										<VirtualizingStackPanel
												Grid.Column="1"
												Grid.Row="0"
												>
											<Border
													x:Name="Bd"
													Padding="{TemplateBinding Padding}"
													custom:CustomProperties.GenericBoolOne="{Binding IsContextHighlighted}"
													SnapsToDevicePixels="true"
													BorderThickness="{TemplateBinding BorderThickness}"
													BorderBrush="{TemplateBinding BorderBrush}"
													>
												<!--  custom:CustomProperties.GenericBoolOne="{Binding RelativeSource={RelativeSource TemplatedParent},  -->
												<!--  Path=DataContext.IsContextHighlighted}"  -->
												<Border.Style>
													<Style TargetType="{x:Type Border}">
														<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
														<Style.Triggers>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter Property="Background" Value="{StaticResource TreeView.MouseOver.Background}" />
															</Trigger>
															<DataTrigger
																	Binding="{Binding Path=(custom:CustomProperties.GenericBoolOne),
																										RelativeSource={RelativeSource Self}}"
																	Value="true"
																	>
																<Setter Property="Background" Value="{StaticResource TreeView.ContextSelected.Background}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
												<!--    -->
												<!--  <DataTrigger Binding="{Binding (custom:CustomProperties.GenericBoolOne),  -->
												<!--  RelativeSource={RelativeSource Self}}"  -->
												<!--  Value="true">  -->
												<!--  <Setter Property="Background"  -->
												<!--  Value="{StaticResource TreeView.ContextSelected.Background}" />  -->
												<!-- </DataTrigger> -->

												<ContentPresenter
														x:Name="PART_Header"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														ContentSource="Header"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
														/>
											</Border>
											<ItemsPresenter x:Name="ItemsHost" />
										</VirtualizingStackPanel>
									</Border>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
								</Trigger>
								<Trigger Property="IsSelected" Value="true">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.Background}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsSelected" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.MouseOver.Background}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style
					x:Key="Tv1Style1"
					TargetType="{x:Type TreeView}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeView}">
							<Border
									x:Name="Bd"
									SnapsToDevicePixels="true"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ScrollViewer
										x:Name="_tv_scrollviewer_"
										Padding="{TemplateBinding Padding}"
										CanContentScroll="false"
										Focusable="false"
										HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										Background="{TemplateBinding Background}"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</Trigger>
								<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
									<Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style
					x:Key="TvxExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="9.5" />
				<Setter Property="Padding" Value="0" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Margin="0,0,0,0"
									Width="9.5"
									Height="9.5"
									Padding="0"
									Background="Transparent"
									>
								<Path
										x:Name="ExpandPath"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="{StaticResource TreeArrow2}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										RenderTransformOrigin="0.50, 0.50"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<TransformGroup>
											<!-- <ScaleTransform ScaleX="0.62" ScaleY="0.62"/> -->
											<RotateTransform Angle="135" />
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" />
											<!-- <RotateTransform Angle="180" CenterX="3" CenterY="3" /> -->
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Width" Value="9.5" />
			</Style>



			<Style
					x:Key="Dg1Style"
					TargetType="{x:Type DataGrid}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="BorderBrush" Value="#FF688CAF" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGrid}">
							<Border
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="True"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ScrollViewer
										x:Name="DG_ScrollViewer"
										Focusable="false"
										>
									<ScrollViewer.Template>
										<ControlTemplate TargetType="{x:Type ScrollViewer}">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="*" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<Button
														x:Name="BtnX2"
														Width="{Binding CellsPanelHorizontalOffset,
																						RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Command="{x:Static DataGrid.SelectAllCommand}"
														Focusable="false"
														Visibility="{Binding HeadersVisibility,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.All},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
																																					TypeInTargetAssembly={x:Type DataGrid}}}"
														/>
												<DataGridColumnHeadersPresenter
														x:Name="PART_ColumnHeadersPresenter"
														Grid.Column="1"
														Visibility="{Binding HeadersVisibility,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.Column},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														/>
												<ScrollContentPresenter
														x:Name="PART_ScrollContentPresenter"
														Grid.Row="1"
														Grid.ColumnSpan="2"
														CanContentScroll="{TemplateBinding CanContentScroll}"
														/>

												<ScrollBar
														x:Name="PART_VerticalScrollBar"
														Grid.Column="2"
														Grid.Row="1"
														Margin="0,-1,0,0"
														Width="{StaticResource BarSizeOutline}"
														MinWidth="{StaticResource BarSize}"
														Cursor="Arrow"
														Maximum="{TemplateBinding ScrollableHeight}"
														Minimum="0"
														ViewportSize="{TemplateBinding ViewportHeight}"
														Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
														Value="{Binding VerticalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														Background="{StaticResource ScrollBarBkg}"
														Style="{DynamicResource ScrollBarStyle}"
														/>

												<!--<ScrollBar
														x:Name="PART_VerticalScrollBar"
														Grid.Column="2"
														Grid.Row="1"
														Maximum="{TemplateBinding ScrollableHeight}"
														Orientation="Vertical"
														ViewportSize="{TemplateBinding ViewportHeight}"
														Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
														Value="{Binding VerticalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														/>-->
												<Grid
														Grid.Column="1"
														Grid.Row="2"
														>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>

													<ScrollBar
															x:Name="PART_HorizontalScrollBar"
															Grid.Column="1"
															Grid.Row="0"
															Height="{StaticResource BarSizeOutline}"
															MinHeight="{StaticResource BarSize}"
															AutomationProperties.AutomationId="HorizontalScrollBar"
															Cursor="Arrow"
															Maximum="{TemplateBinding ScrollableWidth}"
															Minimum="0"
															Orientation="Horizontal"
															ViewportSize="{TemplateBinding ViewportWidth}"
															Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
															Value="{Binding HorizontalOffset,
																							Mode=OneWay,
																							RelativeSource={RelativeSource TemplatedParent}}"
															Background="{StaticResource ScrollBarBkg}"
															Style="{DynamicResource ScrollBarStyle}"
															/>


													<!--<ScrollBar
															x:Name="PART_HorizontalScrollBar"
															Grid.Column="1"
															Maximum="{TemplateBinding ScrollableWidth}"
															Orientation="Horizontal"
															ViewportSize="{TemplateBinding ViewportWidth}"
															Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
															Value="{Binding HorizontalOffset,
																							Mode=OneWay,
																							RelativeSource={RelativeSource TemplatedParent}}"
															/>-->
												</Grid>
											</Grid>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true" />
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</MultiTrigger>
				</Style.Triggers>
			</Style>


			<Style
					x:Key="LvItemContainerStyle1"
					TargetType="{x:Type ListViewItem}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
				<!-- <Setter Property="Margin" Value="{Binding Margin, RelativeSource={RelativeSource TemplatedParent}}" /> -->
				<Setter Property="Margin" Value="4,1,4,1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<ContentPresenter
										x:Name="contentPresenterLv"
										Margin="{TemplateBinding Margin}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<!-- <MultiTrigger> -->
					<!-- 	<MultiTrigger.Conditions> -->
					<!-- 		<Condition Property="IsSelected" Value="True" /> -->
					<!-- 		<Condition Property="IsMouseOver" Value="False" /> -->
					<!-- 	</MultiTrigger.Conditions> -->
					<!-- 	<MultiTrigger.Setters> -->
					<!-- 		<Setter Property="Background" Value="Transparent" /> -->
					<!-- 		<Setter Property="BorderBrush" Value="Transparent" /> -->
					<!-- 	</MultiTrigger.Setters> -->
					<!-- </MultiTrigger> -->
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
					</Trigger>
				</Style.Triggers>
			</Style>





			<Style
					x:Key="Lv1StyleTv1"
					TargetType="{x:Type ListView}"
					>
				<Setter Property="Background" Value="{StaticResource ListView.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource ListView.Static.Border}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListView}">
							<Border
									x:Name="Bd"
									Padding="0"
									CornerRadius="6"
									SnapsToDevicePixels="true"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ScrollViewer
										Padding="{TemplateBinding Padding}"
										Focusable="false"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Lv1ScrollViewerTemplate1}"  -->
									<Grid Margin="0">
										<Grid.RowDefinitions>
											<RowDefinition Height="*" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<ItemsPresenter
												Grid.Row="0"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												/>
										<Border
												x:Name="Bdr"
												Grid.Row="1"
												Margin="7,3,2,4"
												Padding="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Bottom"
												CornerRadius="2"
												BorderThickness="0"
												BorderBrush="{StaticResource ListView.Item.Background.NoConditions}"
												>
											<Border.Style>
												<Style TargetType="{x:Type Border}">
													<Setter Property="Background" Value="{StaticResource ListView.Item.Background.NoConditions}" />
													<Setter Property="Visibility" Value="Collapsed" />
													<Style.Triggers>
														<DataTrigger
																Binding="{Binding Item.CompareOps.Count}"
																Value="0"
																>
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<DataTrigger
																Binding="{Binding Item.CompareOps}"
																Value="{x:Null}"
																>
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>

													</Style.Triggers>
												</Style>
											</Border.Style>
											<!--  Background="{StaticResource ListView.Item.Background.NoConditions}"  -->
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label1"
														Content="No Conditions"
														Width="95"
														Padding="1,1,1,2"
														HorizontalContentAlignment="Center"
														VerticalContentAlignment="Center"
														FontSize="10"
														Foreground="White"
														/>

											</StackPanel>
										</Border>
									</Grid>
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ListView.Disabled.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ListBox.Disabled.Border}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsGrouping" Value="true" />
										<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<!-- </Style> -->


			<Style
					x:Key="Button.Condition.Style"
					TargetType="{x:Type Button}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border
									x:Name="Bd"
									CornerRadius="18"
									SnapsToDevicePixels="true"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ContentPresenter
										x:Name="contentPresenterBtn"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Disabled.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
									<Setter TargetName="contentPresenterBtn" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<Style
					x:Key="Button.Condition.Select.Style"
					TargetType="{x:Type Button}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<!-- <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}" /> -->
				<!-- <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" /> -->
				<!-- <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" /> -->
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border
									x:Name="Bd"
									CornerRadius="3"
									SnapsToDevicePixels="true"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ContentPresenter
										x:Name="contentPresenterBtn2"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Disabled.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
									<Setter TargetName="contentPresenterBtn2" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>



			<!-- <ControlTemplate x:Key="PatternError"> -->
			<!-- 	<DockPanel> -->
			<!-- 		<AdornedElementPlaceholder DockPanel.Dock="Top" /> -->
			<!--  <Border  -->
			<!--  CornerRadius="5"  -->
			<!--  DockPanel.Dock="Bottom"  -->
			<!--  Background="{StaticResource Edit.TextBox.Background}"  -->
			<!--  BorderThickness="0.5"  -->
			<!--  BorderBrush="Red"  -->
			<!--  >  -->
			<!--  <Label  -->
			<!--  Content="Not a valid pattern"  -->
			<!--  DockPanel.Dock="Bottom"  -->
			<!--  Style="{StaticResource Label.Selected.HintText}"  -->
			<!--  />  -->
			<!-- 		</Border> -->
			<!-- 	</DockPanel> -->
			<!-- </ControlTemplate> -->



			<ControlTemplate
					x:Key="ComboBoxToggleButton1"
					TargetType="{x:Type ToggleButton}"
					>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="20" />
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<Border
							x:Name="Border"
							Grid.Column="0"
							CornerRadius="2"
							BorderThickness="1"
							>

					</Border>
					<Border
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Margin="0"
							Padding="0"
							CornerRadius="2,0,0,2"
							Background="Transparent"
							>

					</Border>
					<Path
							x:Name="Arrow"
							Grid.Column="0"
							Margin="0,1.5,0,0"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="M 0,0 4,8 8,0 z"
							Fill="red"
							RenderTransformOrigin="0.5,0.5"
							>
						<Path.RenderTransform>
							<TransformGroup>
								<RotateTransform Angle="-90" />
							</TransformGroup>
						</Path.RenderTransform>

					</Path>

				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsChecked" Value="true">
						<Setter TargetName="Arrow" Property="Fill" Value="OrangeRed" />
						<Setter TargetName="Arrow" Property="RenderTransform">
							<Setter.Value>
								<RotateTransform Angle="0" />
							</Setter.Value>
						</Setter>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>


			<ControlTemplate
					x:Key="ComboBoxTextBox"
					TargetType="{x:Type TextBox}"
					>
				<Border
						x:Name="PART_ContentHost"
						Focusable="False"
						Background="{TemplateBinding Background}"
						/>
			</ControlTemplate>


			<ControlTemplate
					x:Key="ComboBoxTemplate1"
					TargetType="ComboBox"
					>
				<Border
						Margin="0,0,0,0"
						Padding="0,0,0,0"
						CornerRadius="3"
						Background="{TemplateBinding Background}"
						BorderThickness="0"
						>
					<Border
							Padding="1,1,5,1"
							CornerRadius="3"
							BorderThickness="0"
							>

						<Border.Style>
							<Style TargetType="Border">
								<Setter Property="Background" Value="Transparent" />
								<Style.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="Background" Value="#55444444">
										</Setter>
									</Trigger>
								</Style.Triggers>
							</Style>
						</Border.Style>
						<Grid Margin="1">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="20" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ToggleButton
									x:Name="ToggleButton"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									ClickMode="Press"
									Focusable="false"
									Background="{TemplateBinding Background}"
									IsChecked="{Binding IsDropDownOpen,
																			Mode=TwoWay,
																			RelativeSource={RelativeSource TemplatedParent}}"
									Template="{StaticResource ComboBoxToggleButton1}"
									/>
							<ContentPresenter
									x:Name="ContentSite"
									Content="{TemplateBinding SelectionBoxItem}"
									Grid.Column="1"
									Margin="0,0,1,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
									IsHitTestVisible="False"
									ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"

									>
							</ContentPresenter>
							<TextBox
									x:Name="PART_EditableTextBox"
									Grid.Column="1"
									Margin="3,0,3,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Bottom"
									Focusable="True"
									Visibility="Hidden"
									Background="Transparent"
									Foreground="{TemplateBinding Foreground}"
									IsReadOnly="{TemplateBinding IsReadOnly}"
									Style="{x:Null}"
									Template="{StaticResource ComboBoxTextBox}"
									/>
							<Popup
									x:Name="Popup"
									Grid.Column="1"
									Margin="0"
									AllowsTransparency="True"
									Focusable="False"
									Placement="Bottom"
									PopupAnimation="Slide"
									IsOpen="{TemplateBinding IsDropDownOpen}"
									>
								<Grid
										x:Name="DropDown"
										Margin="2,2,0,0"
										MinWidth="{TemplateBinding ActualWidth}"
										MaxHeight="{TemplateBinding MaxDropDownHeight}"
										SnapsToDevicePixels="True"
										>
									<Border
											x:Name="DropDownBorder"
											Margin="0"
											Padding="0"
											Background="{TemplateBinding Background}"
											BorderThickness="0"
											>
										<Border.BorderBrush>
											<SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
										</Border.BorderBrush>

									</Border>

									<ScrollViewer
											Width="{TemplateBinding custom:CustomProperties.DropDownWidth}"
											Padding="0"
											SnapsToDevicePixels="True"
											Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
											>
										<StackPanel
												KeyboardNavigation.DirectionalNavigation="Contained"
												IsItemsHost="True"
												/>

									</ScrollViewer>
								</Grid>
							</Popup>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="MouseOver" />
									<VisualState x:Name="Disabled">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="PART_EditableTextBox"
													Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
													>
												<EasingColorKeyFrame
														KeyTime="0"
														Value="{StaticResource DisabledForegroundColor}"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="EditStates">
									<VisualState x:Name="Editable">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames
													Storyboard.TargetName="PART_EditableTextBox"
													Storyboard.TargetProperty="(UIElement.Visibility)"
													>
												<DiscreteObjectKeyFrame
														KeyTime="0"
														Value="{x:Static Visibility.Visible}"
														/>
											</ObjectAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames
													Storyboard.TargetName="ContentSite"
													Storyboard.TargetProperty="(UIElement.Visibility)"
													>
												<DiscreteObjectKeyFrame
														KeyTime="0"
														Value="{x:Static Visibility.Hidden}"
														/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Uneditable" />
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Grid>
					</Border>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="HasItems" Value="false">
						<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
					</Trigger>
					<Trigger Property="IsGrouping" Value="true">
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</Trigger>
					<Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
						<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
						<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<Style x:Key="CbxFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Path
										x:Name="Arrow"
										Grid.Column="0"
										Margin="0,1.5,0,0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="M 0,0 0,8 8,4 z"
										Fill="red"
										/>
								<Rectangle
										Grid.Column="0"
										Grid.ColumnSpan="2"
										Margin="2,0,0,0"
										Fill="#44ffffff"
										SnapsToDevicePixels="true"
										>
									<!--  Fill="#44545454"  -->
									<Rectangle.Stroke>
										<SolidColorBrush Color="{StaticResource Gray.220}" />
									</Rectangle.Stroke>
								</Rectangle>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>



			<Style
					x:Key="ComboBoxItem1"
					TargetType="{x:Type ComboBoxItem}"
					>

				<Setter Property="SnapsToDevicePixels" Value="true" />
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource CbxFocusVisual}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">

							<Border
									x:Name="Border"
									Margin="0"
									Padding="20,2,2,2"
									SnapsToDevicePixels="true"
									Background="Transparent"
									>
								<ContentPresenter x:Name="ContentPresenterA" />
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualState x:Name="Unselected" />
										<VisualState x:Name="Selected">
											<Storyboard>
												<ColorAnimationUsingKeyFrames
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
														>
													<EasingColorKeyFrame
															KeyTime="0"
															Value="{StaticResource Blue.300}"
															/>
													<!--  Value="{StaticResource SelectedBackgroundColor}  -->
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedUnfocused">
											<Storyboard>
												<ColorAnimationUsingKeyFrames
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background). (SolidColorBrush.Color)"
														>
													<EasingColorKeyFrame
															KeyTime="0"
															Value="{StaticResource Blue.400}"
															/>
													<!--  Value="{StaticResource SelectedUnfocusedColor}"  -->
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Border>

						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style
					x:Key="Cbx1Style1"
					TargetType="{x:Type ComboBox}"
					>

				<Setter Property="SnapsToDevicePixels" Value="true" />
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="Template" Value="{StaticResource ComboBoxTemplate1}" />
			</Style>



			<ControlTemplate
					x:Key="Tv1ScrollViewerControlTemplate1"
					TargetType="{x:Type ScrollViewer}"
					>
				<Grid
						x:Name="Grid"
						Background="{TemplateBinding Background}"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<Rectangle
							x:Name="Corner"
							Grid.Column="2"
							Grid.Row="2"
							Fill="black"
							/>
					<ScrollContentPresenter
							x:Name="PART_ScrollContentPresenter"
							Content="{TemplateBinding Content}"
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							ContentTemplate="{TemplateBinding ContentTemplate}"

							/>

					<ScrollBar
							x:Name="PART_VerticalScrollBar"
							Grid.Column="2"
							Grid.Row="1"
							Margin="0,-1,0,0"
							Width="{StaticResource BarSizeOutline}"
							MinWidth="{StaticResource BarSize}"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Value="{Binding VerticalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Style="{DynamicResource ScrollBarStyle}"
							/>

					<ScrollBar
							x:Name="PART_HorizontalScrollBar"
							Grid.Column="1"
							Grid.Row="2"
							Height="{StaticResource BarSizeOutline}"
							MinHeight="{StaticResource BarSize}"
							AutomationProperties.AutomationId="HorizontalScrollBar"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Value="{Binding HorizontalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Style="{DynamicResource ScrollBarStyle}"
							/>
				</Grid>
			</ControlTemplate>


			<HierarchicalDataTemplate
					x:Key="Tv1ItemTemplate1"
					DataType="{x:Type tree:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>
				<Grid
						x:Name="GD1"
						Margin="0,1,2,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition />
					</Grid.RowDefinitions>

					<DockPanel
							Grid.Column="0"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Margin="0,2,0,0"
							VerticalAlignment="Top"
							>
						<!--  HorizontalAlignment="Stretch"  -->
						<Label
								x:Name="Label2"
								Content="{Binding Item.Title}"
								Margin="15,2,4,0"
								MinWidth="150"
								Padding="0"
								HorizontalAlignment="Stretch"
								DockPanel.Dock="Left"
								Foreground="White"
								/>

						<Label
								x:Name="Label3"
								Content="{Binding Item.Description}"
								Margin="5,2,4,0"
								MinWidth="150"
								Padding="0"
								HorizontalAlignment="Stretch"
								DockPanel.Dock="Left"
								Foreground="White"
								/>

						<Label
								x:Name="Label4"
								Content="{Binding Depth}"
								Margin="0,0,11,0"
								Width="20"
								Padding="0,0,0,2"
								HorizontalAlignment="Right"
								VerticalAlignment="top"
								HorizontalContentAlignment="Right"
								VerticalContentAlignment="Center"
								FontSize="6"
								DockPanel.Dock="top"
								Foreground="{StaticResource TreeViewItem.Label.Foreground.Dim}"
								/>

						<Label
								x:Name="Label5"
								Content="{Binding UniqueId}"
								Margin="0,0,11,0"
								Width="20"
								Padding="0,0,0,2"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								HorizontalContentAlignment="Right"
								FontSize="6"
								DockPanel.Dock="Bottom"
								Foreground="{StaticResource TreeViewItem.Label.Foreground.Dim}"
								/>

					</DockPanel>

					<DockPanel
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="0"
							>
						<!--  HorizontalAlignment="Stretch"  -->

						<ListView
								x:Name="Lv1"
								Margin="5,4,5,6"
								MaxHeight="110"
								Padding="2,2,5,2"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Bottom"
								DockPanel.Dock="Bottom"
								ScrollViewer.HorizontalScrollBarVisibility="Auto"
								ScrollViewer.VerticalScrollBarVisibility="Auto"
								ItemContainerStyle="{StaticResource LvItemContainerStyle1}"
								ItemTemplateSelector="{StaticResource Lv1ConditionSelector}"
								ItemsSource="{Binding Item.CompareOps}"
								Style="{DynamicResource Lv1StyleTv1}"
								/>

					</DockPanel>


				</Grid>
			</HierarchicalDataTemplate>

			<HierarchicalDataTemplate
					x:Key="TvxItemTemplate"
					DataType="{x:Type tree:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>
				<Border
						x:Name="GD1"
						Margin="0,0,0,0"
						Width="Auto"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						BorderThickness="1"
						BorderBrush="Transparent"
						>
					<Label
							x:Name="Label6"
							Content="{Binding Item.Title}"
							Margin="0,0,0,0"
							Padding="0,2,0,3"
							HorizontalAlignment="Stretch"
							FontSize="9"
							Foreground="White"
							/>

				</Border>
			</HierarchicalDataTemplate>


			<DataTemplate
					x:Key="Lv1DataTemplate1"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border
							x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label7"
								Content="{Binding Item.ComponentName,
																	FallbackValue=FallBack}"
								HorizontalAlignment="Center"
								DataContext="{Binding DataContext,
																			RelativeSource={RelativeSource FindAncestor,
																																		 AncestorType={x:Type TreeViewItem}}}"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							x:Name="Bdr2"
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label8"
								Content="{Binding CompareString}"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="left"
							Background="{StaticResource ListView.Item.Background.Value}"
							BorderThickness="0"
							>

						<Label
								x:Name="Label9"
								Content="{Binding CompareValue}"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>


			<DataTemplate
					x:Key="Lv1DataTemplate2"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="0,-3,0,-4"
						LastChildFill="False"
						>

					<Border
							Width="30"
							Height="5"
							Padding="0"
							HorizontalAlignment="Left"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Logical}"
							BorderThickness="0"
							/>

					<Label
							x:Name="Label10"
							Content="{Binding CompareString}"
							Width="34"
							HorizontalContentAlignment="Center"
							VerticalContentAlignment="Center"
							Style="{StaticResource Label.Condition}"
							/>

					<Border
							Width="30"
							Height="5"
							Padding="0"
							HorizontalAlignment="Left"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Logical}"
							BorderThickness="0"
							/>
				</DockPanel>
			</DataTemplate>



			<DataTemplate
					x:Key="Lv1DataTemplate3"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border
							x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label11"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							x:Name="Bdr2"
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label12"
								Content="Is NoOp"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="left"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							>

						<Label
								x:Name="Label13"
								Content="This is an Error"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>



			<DataTemplate
					x:Key="Lv2DataTemplate1"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="2"
						HorizontalAlignment="left"
						>

					<Button
							x:Name="BtnDeleteCondition"
							Margin="0,0,5,0"
							Width="16"
							Height="16"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							Foreground="{StaticResource Button.Static.Delete.Icon}"
							Background="{StaticResource Button.Static.Delete.Background}"
							BorderThickness="0"
							Click="BtnAddCondition_OnClick"
							Style="{StaticResource Button.Condition.Style}"
							>
						<Button.Content>
							<Grid>
								<Viewbox 
										x:Name="VbxNot"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Margin="-4,-4,-4,-4"
										Width="18"
										Height="18"
										Visibility="Hidden"
										Child="{StaticResource Not2}"
										Stretch="UniformToFill" >
									<!-- <Viewbox.Style> -->
									<!-- 	<Style TargetType="Viewbox"> -->
									<!-- 		<Setter Property="Visibility" Value="Hidden"/> -->
									<!-- 		<Style.Triggers> -->
									<!-- 			<DataTrigger Binding="{Binding IsFirstCompOp, FallbackValue=false}" Value="true"> -->
									<!-- 				<Setter Property="Visibility" Value="Visible"/> -->
									<!-- 			</DataTrigger> -->
									<!-- 		</Style.Triggers> -->
									<!-- 	</Style> -->
									<!-- </Viewbox.Style> -->
								</Viewbox>

								<Viewbox 
										x:Name="VbxTrash"
										Margin="0,0,2,1"
										Width="10"
										Height="10"
										Child="{StaticResource DeleteIcon}" />
							</Grid>
						</Button.Content>

					</Button>


					<Border
							x:Name="Bdr1"
							Margin="0,0,0,0"
							Width="100"
							Padding="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label14"
								Content="{Binding Item.ComponentName,
																	FallbackValue=FallBack}"
								HorizontalAlignment="Center"
								DataContext="{Binding DataContext,
																			RelativeSource={RelativeSource FindAncestor,
																																		 AncestorType={x:Type ListView}}}"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<!--    -->
					<!--  <Button  -->
					<!--  x:Name="BtnX1"  -->
					<!--  Content="{Binding CompareString}"  -->
					<!--  Margin="5,0,0,0"  -->
					<!--  Height="8"  -->
					<!--  FontSize="6"  -->
					<!--  Background="{StaticResource ListView.Item.Background}"  -->
					<!--  BorderThickness="0"  -->
					<!--  BorderBrush="Transparent"  -->
					<!--  Style="{StaticResource Button.Condition.Select.Style}"  -->
					<!--  />  -->

					<ComboBox
							x:Name="Cbx1"
							Margin="5,0,0,0"
							Padding="8,2,2,2"
							HorizontalAlignment="Left"
							FontSize="10"
							custom:CustomProperties.DropDownWidth="180.0"
							DisplayMemberPath="Name"
							MaxDropDownHeight="100"
							SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,
																																		 AncestorType={x:Type ListViewItem}},
																			Path=DataContext.CompareOpCode,
																			Mode=TwoWay}"
							Background="{StaticResource ListView.Item.Background}"
							Foreground="White"
							BorderThickness="2"
							IsEditable="False"
							ItemContainerStyle="{DynamicResource ComboBoxItem1}"
							ItemsSource="{Binding Source={x:Static tree:CompareOperations.ValueCompareOps}}"
							FocusVisualStyle="{x:Null}"
							Style="{DynamicResource Cbx1Style1}"
							>

					</ComboBox>

					<Border
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="left"
							Background="{StaticResource ListView.Item.Background.Value}"
							BorderThickness="0"
							>

						<TextBox
								x:Name="Tbx1"
								MinWidth="60 "
								Padding="8,0,16,0"
								VerticalAlignment="Center"
								HorizontalContentAlignment="Center"
								FontSize="10"
								res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
								res:TextBoxBehavior.SelectAllTextOnFocus="True"
								Text="{Binding CompareValue,
															 Mode=TwoWay}"
								BorderThickness="0"
								>
							<TextBox.Style>
								<Style TargetType="TextBox">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
								</Style>
							</TextBox.Style>
						</TextBox>
					</Border>
				</DockPanel>
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding Path=IsFirstCompOp}" Value="true">
						<Setter TargetName="VbxNot" Property="Visibility" Value="Visible"/>
						<Setter TargetName="BtnDeleteCondition" Property="Margin" Value="0,0,5,0"/>
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>



			<DataTemplate
					x:Key="Lv2DataTemplate2"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="0,-3,0,-3"
						LastChildFill="False"
						>

					<Line x:Name="gridline"
							DockPanel.Dock="Top"
							X1="0"
							X2="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=ActualWidth}"
							Y1="0"
							Y2="0"
							Stroke="white"
							StrokeThickness="0.5"
							Margin="0,2,0,2" />


					<Border
							Width="{StaticResource LogicalHorizBarWidth}"
							Height="5"
							Padding="0"
							Margin="22,0,0,0"
							HorizontalAlignment="Left"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Logical}"
							BorderThickness="0"
							/>

					<!--  <Label  -->
					<!--  x:Name="Label16"  -->
					<!--  Content="{Binding CompareString}"  -->
					<!--  Width="34"  -->
					<!--  HorizontalContentAlignment="Center"  -->
					<!--  VerticalContentAlignment="Center"  -->
					<!--  Style="{StaticResource Label.Condition}"  -->
					<!--  />  -->

					<ComboBox
							x:Name="Cbx2"
							Margin="7,2,7,2"
							HorizontalAlignment="Left"
							FontSize="10"
							Width="50"
							custom:CustomProperties.DropDownWidth="90.0"
							DisplayMemberPath="Name"
							MaxDropDownHeight="100"
							SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,
																																		 AncestorType={x:Type ListViewItem}},
																			Path=DataContext.CompareOpCode,
																			Mode=TwoWay}"
							Background="{StaticResource ListView.Item.Background}"
							Foreground="White"
							BorderThickness="2"
							IsEditable="False"
							ItemContainerStyle="{DynamicResource ComboBoxItem1}"
							ItemsSource="{Binding Source={x:Static tree:CompareOperations.LogicalCompareOps}}"
							FocusVisualStyle="{x:Null}"
							Style="{DynamicResource Cbx1Style1}"
							>

					</ComboBox>

					<Border
							Width="{StaticResource LogicalHorizBarWidth}"
							Height="5"
							Padding="0"
							HorizontalAlignment="Left"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Logical}"
							BorderThickness="0"
							/>
				</DockPanel>
			</DataTemplate>


			<DataTemplate
					x:Key="Lv2DataTemplate3"
					DataType="tree:CompareOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border
							x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label17"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							x:Name="Bdr2"
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							>
						<Label
								x:Name="Label18"
								Content="Is NoOp"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="left"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							>

						<Label
								x:Name="Label19"
								Content="This is an Error"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>






		</ResourceDictionary>
	</Window.Resources>



	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" MinWidth="400" />
			<ColumnDefinition Width="*" MinWidth="400" />
			<ColumnDefinition Width="0" />
			<ColumnDefinition Width="0" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="4*" />
			<RowDefinition Height="48" />

		</Grid.RowDefinitions>

		<StackPanel
				Grid.Column="1"
				Grid.Row="2"
				Margin="5"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Orientation="Horizontal"
				>

			<Button
					x:Name="BtnDebug"
					Content="Debug"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					HorizontalAlignment="Right"
					VerticalAlignment="Bottom"
					Click="BtnDebug_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>

			<Button
					x:Name="BtnTestAll"
					Content="Test All"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					HorizontalAlignment="Right"
					VerticalAlignment="Bottom"
					Click="BtnTestAll_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>


			<Button
					x:Name="BtnDSave"
					Content="Save"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					IsEnabled="{Binding Categories.IsModified,
															ElementName=MainWin}"
					Click="BtnSave_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>

			<Button
					x:Name="BtDone"
					Content="Done"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					Click="BtnDone_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>

		</StackPanel>

		<Label
				x:Name="Label20"
				Content="Sheet Organization Categories"
				Grid.Column="0"
				Grid.Row="0"
				Grid.ColumnSpan="2"
				Margin="5,0,5,0"
				Padding="0,4,0,6"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Top"
				Background="{StaticResource Win.Title.Background}"
				Foreground="White"
				/>


		<Grid
				x:Name="EditCategory"
				Grid.Column="1"
				Grid.Row="1"
				Margin="5,6,5,5"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				DataContext="{Binding SelectedValue,
															ElementName=Tv1}"
				>

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="80" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="70" />


			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="26" />
				<RowDefinition Height="26" />
				<RowDefinition Height="26" />
				<RowDefinition MinHeight="125" />
				<RowDefinition Height="26" />
				<RowDefinition />


			</Grid.RowDefinitions>


			<Label
					x:Name="Label21"
					Content="Edit Selected Category"
					Grid.Column="0"
					Grid.Row="0"
					Grid.ColumnSpan="3"
					Margin="0,0,0,6"
					Padding="2,1,2,4"
					VerticalAlignment="Center"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<Button
					x:Name="BtnDoneEditing"
					Content="Done"
					Grid.Column="1"
					Grid.Row="3"
					Grid.ColumnSpan="2"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					HorizontalAlignment="Right"
					VerticalAlignment="Center"
					FontSize="10"
					Click="BtnDoneEditing_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					/>


			<Label
					x:Name="Label22"
					Content="Title"
					Grid.Column="0"
					Grid.Row="1"
					Style="{StaticResource Label.Selected}"
					/>

			<TextBox
					Grid.Column="1"
					Grid.Row="1"
					Grid.ColumnSpan="2"
					Text="{Binding Item.Title,
												 FallbackValue='',
												 Mode=TwoWay}"
					TextChanged="TextBoxBase_OnTextChanged"
					Style="{StaticResource TextBox.Selected}"
					/>

			<Label
					x:Name="Label23"
					Content="Description"
					Grid.Column="0"
					Grid.Row="2"
					Style="{StaticResource Label.Selected}"
					/>

			<TextBox
					Grid.Column="1"
					Grid.Row="2"
					Grid.ColumnSpan="2"
					Text="{Binding Item.Description,
												 FallbackValue='',
												 Mode=TwoWay}"
					TextChanged="TextBoxBase_OnTextChanged"
					Style="{StaticResource TextBox.Selected}"
					/>


			<Label
					x:Name="Label24"
					Content="Conditions"
					Grid.Column="0"
					Grid.Row="3"
					Margin="5,0,0,5"
					VerticalAlignment="Bottom"
					Style="{StaticResource Label.Selected}"
					/>

			<ListView
					x:Name="Lv2"
					Grid.Column="0"
					Grid.Row="4"
					Grid.ColumnSpan="3"
					Margin="5,4,5,6"
					MinHeight="26"
					HorizontalAlignment="Stretch"
					VerticalAlignment="top"
					VerticalContentAlignment="Bottom"
					d:DataContext="{x:Static local:MainWindow.temp}"
					ItemContainerStyle="{StaticResource LvItemContainerStyle1}"
					ItemTemplateSelector="{StaticResource Lv2ConditionSelector}"
					ItemsSource="{Binding Item.CompareOps,
																FallbackValue={x:Null}}"
					Style="{DynamicResource Lv1StyleTv1}"
					/>
			<!--  ItemTemplate="{DynamicResource Lv1DataTemplate1}"  -->


			<Button
					x:Name="BtnAddCondition"
					Content="+"
					Grid.Column="2"
					Grid.Row="4"
					Margin="0,0,17,17"
					Width="30"
					Height="30"
					Padding="4,-2.5,0,0"
					HorizontalAlignment="Right"
					VerticalAlignment="Bottom"
					HorizontalContentAlignment="Stretch"
					VerticalContentAlignment="Stretch"
					FontSize="26"
					FontWeight="Bold"
					BorderThickness="0"
					Click="BtnAddCondition_OnClick"
					>

				<Button.Style>
					<Style
							TargetType="{x:Type Button}"
							BasedOn="{StaticResource Button.Condition.Style}"
							>
						<Setter Property="IsEnabled" Value="False" />
						<Style.Triggers>
							<DataTrigger
									Binding="{Binding HasSelection,
																		ElementName=MainWin}"
									Value="true"
									>
								<Setter Property="IsEnabled" Value="True" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Button.Style>


				<!-- <Button.Content> -->
				<!--  <Border  -->
				<!--  x:Name="Bd"  -->
				<!--  HorizontalAlignment="Stretch"  -->
				<!--  VerticalAlignment="Stretch"  -->
				<!--  CornerRadius="14"  -->
				<!--  Background="Lime"  -->
				<!--  BorderThickness="0"  -->
				<!--  BorderBrush="Lime"  -->
				<!--  >  -->
				<!-- 		<Border.Style> -->
				<!-- 			<Style TargetType="Border"> -->
				<!-- 				<Setter Property="Background" Value="Lime" /> -->
				<!-- 				<Style.Triggers> -->
				<!--    -->
				<!-- 					<Trigger Property="IsMouseOver" Value="True"> -->
				<!-- 						<Setter Property="Background" Value="LimeGreen" /> -->
				<!-- 					</Trigger> -->
				<!--    -->
				<!-- 				</Style.Triggers> -->
				<!--    -->
				<!-- 			</Style> -->
				<!-- 		</Border.Style> -->
				<!--    -->
				<!--  <Label  -->
				<!--  Content="+"  -->
				<!--  Margin="1,-5,0,0"  -->
				<!--  Padding="0"  -->
				<!--  HorizontalAlignment="Center"  -->
				<!--  VerticalAlignment="Center"  -->
				<!--  FontSize="24"  -->
				<!--  Foreground="Black"  -->
				<!--  >  -->
				<!-- 			<Label.Style> -->
				<!-- 				<Style TargetType="Label"> -->
				<!-- 					<Setter Property="Background" Value="Transparent" /> -->
				<!-- 					<Style.Triggers> -->
				<!--    -->
				<!-- 						<Trigger Property="IsMouseOver" Value="True"> -->
				<!-- 							<Setter Property="Background" Value="Transparent" /> -->
				<!-- 						</Trigger> -->
				<!--    -->
				<!-- 					</Style.Triggers> -->
				<!--    -->
				<!-- 				</Style> -->
				<!-- 			</Label.Style> -->
				<!--    -->
				<!--    -->
				<!-- 		</Label> -->
				<!--    -->
				<!--    -->
				<!-- 	</Border> -->
				<!-- </Button.Content> -->

			</Button>



			<Label
					x:Name="Label25"
					Content="Test Sheet Files"
					Grid.Column="0"
					Grid.Row="5"
					Grid.ColumnSpan="3"
					Margin="0,0,0,6"
					Padding="2,1,2,4"
					VerticalAlignment="Center"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<DataGrid
					x:Name="Dg1"
					Grid.Column="0"
					Grid.Row="6"
					Grid.ColumnSpan="4"
					d:DataContext="{Binding Files,
																	Source={x:Static local:MainWindow.FileList2}}"
					AutoGenerateColumns="False"
					CanUserAddRows="False"
					DataContext="{Binding FileList.Files,
																ElementName=MainWin}"
					GridLinesVisibility="Horizontal"
					HeadersVisibility="None"
					HorizontalScrollBarVisibility="Visible"
					VerticalScrollBarVisibility="Visible"
					Background="{StaticResource TreeView.Background}"
					BorderThickness="1"
					HorizontalGridLinesBrush="{StaticResource TreeViewRow.BorderBrush.Light}"
					ItemsSource="{Binding}"
					CellStyle="{StaticResource Dg.Cell.Base}"
					RowStyle="{StaticResource Dg.Row.Base}"
					Style="{DynamicResource Dg1Style}"
					>
				<DataGrid.Columns>
					<!--  <DataGridTextColumn  -->
					<!--  Width="*"  -->
					<!--  CellStyle="{StaticResource Dg.Cell.Base}"  -->
					<!--  Binding="{Binding Path=FilePathInfo.FileName.Name}" />  -->

					<DataGridTemplateColumn CellStyle="{StaticResource Dg.Cell.Base}">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<Grid Margin="2">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />

									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="*" />
									</Grid.RowDefinitions>
									<Label
											x:Name="Label26"
											Content="{Binding FilePathInfo.FileName.Name}"
											Grid.Column="0"
											Grid.Row="0"
											Margin="2"
											Padding="0"
											Foreground="White"
											/>
									<StackPanel
											Grid.Column="0"
											Grid.Row="1"
											Orientation="Horizontal"
											>
										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label27"
														Content="{Binding [0],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Width="46"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>

												<Label
														x:Name="Label28"
														Content="{Binding FilePathInfo.FileName.PhaseBldg,
																							FallbackValue=GRN}"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label29"
														Content="{Binding [1],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>
												<Label
														x:Name="Label30"
														Content="{Binding FilePathInfo.FileName.Discipline,
																							FallbackValue=99}"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label32"
														Content="{Binding [2],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>

												<Label
														x:Name="Label31"
														Content="{Binding FilePathInfo.FileName.Category,
																							FallbackValue=123A}"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label33"
														Content="{Binding [3],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Width="50"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>
												<Label
														x:Name="Label34"
														Content="{Binding FilePathInfo.FileName.Subcategory,
																							FallbackValue=none}"
														Width="30"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label35"
														Content="{Binding [4],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>
												<Label
														x:Name="Label36"
														Content="{Binding FilePathInfo.FileName.Modifier,
																							FallbackValue=none}"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

										<Border Style="{StaticResource Dg.CellLabel.Border}">
											<StackPanel Orientation="Horizontal">
												<Label
														x:Name="Label37"
														Content="{Binding [5],
																							Mode=OneTime,
																							Source={x:Static file:FileNameSheetPdf.SheetNumberComponentTitles}}"
														Width="50"
														Foreground="DimGray"
														Style="{StaticResource Dg.CellLabel.Title}"
														/>
												<Label
														x:Name="Label38"
														Content="{Binding FilePathInfo.FileName.Submodifier,
																							FallbackValue=none}"
														Foreground="White"
														Style="{StaticResource Dg.CellLabel.Data}"
														/>
											</StackPanel>
										</Border>

									</StackPanel>
								</Grid>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>

					</DataGridTemplateColumn>

				</DataGrid.Columns>
			</DataGrid>

		</Grid>

		<!-- </TreeView> -->

		<TreeView
				x:Name="Tv1"
				Grid.Column="0"
				Grid.Row="1"
				Margin="5"
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				d:DataContext="{Binding Source={x:Static local:MainWindow.BaseOfTreeRoot}}"
				DataContext="{Binding Categories.TreeBase,
															ElementName=MainWin}"
				ScrollViewer.HorizontalScrollBarVisibility="Visible"
				SelectedItemChanged="Tv1_OnSelectedItemChanged"
				Tag="{Binding ContextCmdDelete,
											ElementName=MainWin}"
				Background="{StaticResource TreeView.Background}"
				ItemContainerStyle="{StaticResource Tv1ItemContainerStyle1}"
				ItemTemplate="{StaticResource Tv1ItemTemplate1}"
				ItemsSource="{Binding ChildrenView}"
				Style="{StaticResource Tv1Style1}"
				/>


		<!--  <Border  -->
		<!--    -->
		<!--    -->
		<!--  Margin="5"  -->
		<!--  Padding="2"  -->
		<!--  CornerRadius="4"  -->
		<!--  Background="Aqua"  -->
		<!--  BorderThickness="1"  -->
		<!--  BorderBrush="Red"  -->
		<!--    -->
		<!--  >  -->
		<ComboBox
				Grid.Column="0"
				Grid.Row="2"
				Margin="15,0,2,0"
				Height="20"
				Padding="8,2,2,2"
				HorizontalAlignment="Left"
				FontSize="12"
				custom:CustomProperties.DropDownWidth="150.0"
				DisplayMemberPath="Name"
				MaxDropDownHeight="100"
				SelectedIndex="2"
				Background="DeepSkyBlue"
				Foreground="White"
				BorderThickness="2"
				IsEditable="False"
				ItemContainerStyle="{DynamicResource ComboBoxItem1}"
				ItemsSource="{Binding Source={x:Static tree:CompareOperations.ValueCompareOps}}"
				FocusVisualStyle="{x:Null}"
				Style="{DynamicResource Cbx1Style1}"
				>
			<!--  DisplayMemberPath="Name"  -->

			<!-- <ComboBoxItem Content="One One One One One One One One " /> -->
			<!-- <ComboBoxItem Content="Two" /> -->
			<!-- <ComboBoxItem Content="Three" /> -->
			<!-- <ComboBoxItem Content="Four" /> -->
			<!-- <ComboBoxItem Content="Five" /> -->
			<!-- <ComboBoxItem Content="Six" /> -->
			<!-- <ComboBoxItem Content="Seven" /> -->
			<!-- <ComboBoxItem Content="Eight" /> -->
		</ComboBox>





		<!-- <Viewbox -->
		<!-- 		Grid.Column="0" -->
		<!-- 		Grid.Row="2" -->
		<!-- 		Margin="150,0,2,0" -->
		<!-- 		Width="15" -->
		<!-- 		Height="15" -->
		<!-- 		HorizontalAlignment="Left" -->
		<!-- 		/> -->
		<!-- -->
		<Button
				Grid.Column="0"
				Grid.Row="2"
				Margin="140,0,2,0"
				Width="30"
				Height="30"
				Padding="0"
				HorizontalAlignment="Left"
				Background="{StaticResource Button.Static.Delete.Background}"
				Style="{StaticResource Button.Condition.Style}"
				>
			<Button.Content>
				<Grid
						Margin="0"
				>
					<Viewbox 
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Margin="-4"
							
							Width="42"
							Height="42"
							Child="{StaticResource Not}"
							Stretch="UniformToFill"
							/>

					<!-- <Viewbox  -->
					<!-- 		Margin="-1,-1,0,0" -->
					<!-- 		Width="28" -->
					<!-- 		Height="28" -->
					<!-- 		Child="{StaticResource DeleteIcon}" /> -->

				</Grid>
			</Button.Content>
		</Button>

		<Button Grid.Column="0"
				Grid.Row="2"
				Margin="200,0,2,0"
				Width="30"
				Height="30"
				Padding="0"
				HorizontalAlignment="Left"
				Background="{StaticResource Button.Static.Delete.Background}"
				Style="{StaticResource Button.Condition.Style}">
			<Button.Content>
				<Grid Margin="0">
					<Viewbox HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Margin="-5,-5,-4,-4"
							Width="31"
							Height="31"
							
							
							Child="{StaticResource Not2}"
							Stretch="UniformToFill" />

					<!-- <Viewbox  -->
					<!-- 		Margin="-1,-1,0,0" -->
					<!-- 		Width="28" -->
					<!-- 		Height="28" -->
					<!-- 		Child="{StaticResource DeleteIcon}" /> -->

				</Grid>
			</Button.Content>
		</Button>



		<!-- </Border> -->

	</Grid>
</Window>
