<Window
		x:Class="ClassifierEditor.Windows.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:custom="clr-namespace:ClassifierEditor.Windows.Support"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:local="clr-namespace:ClassifierEditor.Windows"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:tree="clr-namespace:ClassifierEditor.Tree"
		x:Name="MainWin"
		Title="MainWindow"
		Width="1000"
		Height="650"
		MinWidth="900"
		FontFamily="Tahoma"
		FontSize="12"
		d:UseSampleData="True"
		Closing="MainWin_Closing"
		Loaded="Window_Loaded"
		mc:Ignorable="d"
		Background="{DynamicResource Window.Background}"
		>


	<!--  xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"  -->
	<Window.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ResourceFiles/XamlResources/ScrollBar.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/ExpanderCheckBox.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<!--#region > Settings-->

			<!--
			use this resource to change the item highlight color throughout the window
			<SolidColorBrush
				x:Key="{x:Static SystemColors.HighlightBrushKey}"
				Color="{DynamicResource Blue.100}"
				/>-->

			<Color x:Key="Datagrid.Row.Selected">#FF003554</Color>

			<Color x:Key="Window.Background.C">#FF222222</Color>
			<Color x:Key="TreeView.Background.C">#FF212121</Color>

			<SolidColorBrush x:Key="ScrollBarBkg" Color="#222222" />
			<SolidColorBrush x:Key="Win.Title.Background" Color="{StaticResource Gray.250}" />
			<SolidColorBrush x:Key="Grid.Line" Color="LightSkyBlue" />

			<SolidColorBrush x:Key="Window.Background" Color="{StaticResource Window.Background.C}" />

			<SolidColorBrush x:Key="ListBorder" Color="#828790" />

			<SolidColorBrush x:Key="TreeViewItem.Label.Foreground.Muted" Color="{StaticResource Gray.500}" />
			<SolidColorBrush x:Key="TreeViewItem.Label.Foreground.Dim" Color="{StaticResource Gray.400}" />

			<SolidColorBrush x:Key="TreeView.Background" Color="{StaticResource TreeView.Background.C}" />
			<SolidColorBrush x:Key="TreeView.Selected.Background" Color="{StaticResource Blue.100}" />
			<SolidColorBrush x:Key="TreeView.Selected.MouseOver.Background" Color="{StaticResource Blue.100}" />
			<SolidColorBrush x:Key="TreeView.MouseOver.Background" Color="{StaticResource Blue.050}" />
			<SolidColorBrush x:Key="TreeView.ContextSelected.Background" Color="#14eb501f" />

			<SolidColorBrush x:Key="TreeView.Popup.Selected.Background" Color="{StaticResource Blue.200}" />

			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="{StaticResource Deep.Orange.400}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="{StaticResource Deep.Orange.400}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="{StaticResource Deep.Orange.100}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="{StaticResource Deep.Orange.100}" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF27C7F7" />
			<SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF27C7F7" />

			<SolidColorBrush x:Key="ContextMenu.Background" Color="{StaticResource Gray.200}" />
			<SolidColorBrush x:Key="ContextMenu.Background.Icons" Color="{StaticResource Gray.220}" />
			<SolidColorBrush x:Key="ContextMenu.Background.Icons.Divider" Color="{StaticResource Gray.200}" />

			<PathGeometry
					x:Key="TreeArrow"
					Figures="M0,0 L0,8 L8,0 z"
					/>

			<PathGeometry
					x:Key="TreeArrow2"
					Figures="M3.5,3.5 L3.5,8 L8,3.5 z"
					/>

			<!--#endregion-->

			<Style
					x:Key="Style.Edit.Label"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="2" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style
					x:Key="Style.Edit.TextBox"
					TargetType="{x:Type TextBox}"
					>
				<Setter Property="Background" Value="{StaticResource Edit.TextBox.Background}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="6,2,4,2" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<Style x:Key="TreeViewItemFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style
					x:Key="Tv1ExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="16" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Width="24"
									Height="24"
									Padding="5,5,5,5"
									Background="Transparent"
									>
								<Path
										x:Name="ExpandPath"
										Data="{StaticResource TreeArrow}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" CenterX="3" CenterY="3" />
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="Width" Value="16" />
			</Style>


			<Style
					x:Key="Tv.context.menuitem.base"
					TargetType="MenuItem"
					>
				<Setter Property="Padding" Value="0,2,0,2" />
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>

			<Style
					x:Key="Tv.context.menuitem.move"
					TargetType="MenuItem"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False">
				</Setter>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding Source={x:Static local:MainWindow.TreeRoot}, Path=HasSelection}" Value="true" />
							<Condition Binding="{Binding Path=IsSelected}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="true" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style
					x:Key="Tv.context.menuitem.clone"
					TargetType="MenuItem"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False">
				</Setter>
				<Style.Triggers>
					<DataTrigger
							Binding="{Binding Source={x:Static local:MainWindow.TreeRoot},
																Path=HasSelection}"
							Value="true"
							>
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>

				</Style.Triggers>
			</Style>



			<ContextMenu
					x:Key="Tv1ContextMenu"
					x:Name="Tv1ContextMenu"
					Padding="0,6,0,6"
					Closed="Tv1ContextMenu_OnClosed"
					HasDropShadow="True"
					Opened="Tv1ContextMenu_OnOpened"
					Background="{StaticResource ContextMenu.Background}"
					Foreground="White"
					OverridesDefaultStyle="True"
					>
				<!--  Closed="Tv1ContextMenu_OnClosed"  -->

				<ContextMenu.Template>
					<ControlTemplate
							x:Name="ContextTemplate"
							TargetType="{x:Type ContextMenu}"
							>

						<Border
								x:Name="ContextMenuBorder"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								>

							<ScrollViewer
									x:Name="ContextMenuScrollViewer"
									Grid.ColumnSpan="2"
									Margin="1,0"
									Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
																																TypeInTargetAssembly={x:Type FrameworkElement}}}"
									>
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas
											Width="0"
											Height="0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle
												x:Name="OpaqueRect"
												Width="{Binding ActualWidth,
																				ElementName=ContextMenuBorder}"
												Height="{Binding ActualHeight,
																				 ElementName=ContextMenuBorder}"
												Fill="{Binding Background,
																			 ElementName=ContextMenuBorder}"
												/>
									</Canvas>
									<Rectangle
											Margin="1,2"
											Width="7"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											RadiusX="2"
											RadiusY="2"
											/>
									<!--  Fill="#FFF1F1F1"  -->
									<Rectangle
											Margin="8,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											/>
									<Rectangle
											Margin="9,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons.Divider}"
											/>
									<ItemsPresenter
											x:Name="ItemsPresenter"
											Margin="{TemplateBinding Padding}"
											KeyboardNavigation.DirectionalNavigation="Cycle"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											/>
								</Grid>
							</ScrollViewer>
						</Border>

						<ControlTemplate.Triggers>

							<Trigger SourceName="ContextMenuScrollViewer" Property="CanContentScroll" Value="False">
								<Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=ContextMenuScrollViewer}" />
								<Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=ContextMenuScrollViewer}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

				</ContextMenu.Template>

				<MenuItem Click="Tv1ContextMenuExpand_OnClick">
					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="Header" Value="{Binding ContextCmdExpand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" />
							<Setter Property="CommandParameter" Value="{Binding ContextCmdExpand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding Path=CanExpand}" Value="true" />
										<Condition Binding="{Binding Path=IsExpanded}" Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding Path=CanExpand}" Value="true" />
										<Condition Binding="{Binding Path=IsExpanded}" Value="true" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="Header" Value="{Binding ContextCmdCollapse, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" />
									<Setter Property="CommandParameter" Value="{Binding ContextCmdCollapse, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" />
								</MultiDataTrigger>


								<!--  <DataTrigger  -->
								<!--  Binding="{Binding Path=CanExpand}"  -->
								<!--  Value="true"  -->
								<!--  >  -->
								<!-- 	<Setter Property="IsEnabled" Value="true" /> -->
								<!-- </DataTrigger> -->
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<!--  Binding="{Binding RelativeSource={RelativeSource Self},  -->
				<!--  Path=DataContext.CanExpand}"  -->


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding Path=ContextCmdAddBefore,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Add Category Before"
						Click="Tv1ContextMenuAddBefore_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>
				<MenuItem
						CommandParameter="{Binding Path=ContextCmdAddAfter,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Add Category After"
						Click="Tv1ContextMenuAddAfter_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>
				<MenuItem
						CommandParameter="{Binding ContextCmdAddChild,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Add Sub-Category"
						Click="Tv1ContextMenuAddChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>


				<Separator Margin="6" />



				<MenuItem
						CommandParameter="{Binding Path=ContextCmdMoveBefore,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Move Selected Before"
						Click="Tv1ContextMenuMoveBefore_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						>
				</MenuItem>

				<MenuItem
						CommandParameter="{Binding Path=ContextCmdMoveAfter,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Move Selected After"
						Click="Tv1ContextMenuMoveAfter_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						>
				</MenuItem>


				<MenuItem
						CommandParameter="{Binding Path=ContextCmdMoveAsChild,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Move Selected as Sub-category"
						Click="Tv1ContextMenuMoveChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.move}"
						/>


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding Path=ContextCmdCopy,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Duplicate Selected"
						Click="Tv1ContextMenuSelCopy_OnClick"
						Style="{StaticResource Tv.context.menuitem.clone}"
						/>
				<MenuItem
						CommandParameter="{Binding Path=ContextCmdCopyAsChild,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Duplicate Selected as a Sub-Category"
						Click="Tv1ContextMenuCopySelAsChild_OnClick"
						Style="{StaticResource Tv.context.menuitem.clone}"
						/>


				<Separator Margin="6" />


				<MenuItem
						CommandParameter="{Binding ContextCmdDelete,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindow}},
																			 Mode=OneWay}"
						Header="Delete Category"
						Click="Tv1ContextMenuDelete_OnClick"
						Style="{StaticResource Tv.context.menuitem.base}"
						/>

			</ContextMenu>


			<Style
					x:Key="Tv1temContainerStyle1"
					TargetType="{x:Type TreeViewItem}"
					>
				<Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
				<Setter Property="ContextMenu" Value="{StaticResource Tv1ContextMenu}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Padding" Value="1,0,0,0" />
				<Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate
								x:Name="Tv1ItemContainer"
								TargetType="{x:Type TreeViewItem}"
								>

							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" MinWidth="19" />
									<ColumnDefinition Width="*" />
									<!-- <ColumnDefinition Width="*" /> -->
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<ToggleButton
										x:Name="Expander"
										VerticalAlignment="Top"
										ClickMode="Press"
										IsChecked="{Binding IsExpanded,
																				RelativeSource={RelativeSource TemplatedParent}}"
										Style="{StaticResource Tv1ExpandCollapseToggleStyle}"
										/>
								<Border
										x:Name="Bdr"
										Grid.Column="1"
										Grid.Row="0"
										Margin="0,0.5,.5,0"
										CornerRadius="6"
										SnapsToDevicePixels="True"
										BorderThickness="12,1.5,.5,5"
										>
									<!--  custom:CustomProperties.GenericBoolOne="{Binding RelativeSource={RelativeSource TemplatedParent},  -->
									<!--  Path=DataContext.IsContextHighlighted}"  -->
									<Border.Style>
										<Style TargetType="Border">
											<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											<Style.Triggers>
												<!--  <DataTrigger  -->
												<!--  Binding="{Binding RelativeSource={RelativeSource Self},  -->
												<!--  Path=(custom:CustomProperties.GenericBoolOne)}"  -->
												<!--  Value="true"  -->
												<!--  >  -->
												<!-- 	<Setter Property="Background" Value="{StaticResource TreeView.ContextSelected.Background}" /> -->
												<!-- </DataTrigger> -->

											</Style.Triggers>
										</Style>
									</Border.Style>
									<Border.BorderBrush>
										<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
											<GradientStop Offset="0.03" Color="#FF111132" />
											<GradientStop Offset="0.10" Color="#FFAAEAF3" />
										</LinearGradientBrush>
									</Border.BorderBrush>
									<Border
											x:Name="BD"
											Margin="-3.5,-.5,.5,-1"
											CornerRadius="5"
											BorderThickness="4,0.5,2,0.5"
											BorderBrush="{StaticResource TreeView.Background}"
											>
										<!--  Background="{TemplateBinding Background}"  -->
										<Border.Style>
											<Style TargetType="Border">
												<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											</Style>
										</Border.Style>
										<VirtualizingStackPanel
												Grid.Column="1"
												Grid.Row="0"
												>
											<Border
													x:Name="Bd"
													Padding="{TemplateBinding Padding}"
													custom:CustomProperties.GenericBoolOne="{Binding Path=IsContextHighlighted}"
													SnapsToDevicePixels="true"
													BorderThickness="{TemplateBinding BorderThickness}"
													BorderBrush="{TemplateBinding BorderBrush}"
													>
												<!--  custom:CustomProperties.GenericBoolOne="{Binding RelativeSource={RelativeSource TemplatedParent},  -->
												<!--  Path=DataContext.IsContextHighlighted}"  -->
												<Border.Style>
													<Style TargetType="Border">
														<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
														<Style.Triggers>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter Property="Background" Value="{StaticResource TreeView.MouseOver.Background}" />
															</Trigger>
															<DataTrigger
																	Binding="{Binding RelativeSource={RelativeSource Self},
																										Path=(custom:CustomProperties.GenericBoolOne)}"
																	Value="true"
																	>
																<Setter Property="Background" Value="{StaticResource TreeView.ContextSelected.Background}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>

												<ContentPresenter
														x:Name="PART_Header"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														ContentSource="Header"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
														/>
											</Border>
											<ItemsPresenter x:Name="ItemsHost" />
										</VirtualizingStackPanel>
									</Border>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
								</Trigger>
								<Trigger Property="IsSelected" Value="true">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.Background}" />
								</Trigger>
								<!-- <MultiTrigger> -->
								<!-- 	<MultiTrigger.Conditions> -->
								<!-- 		<Condition Property="IsSelected" Value="true" /> -->
								<!-- 		<Condition Property="IsSelectionActive" Value="false" /> -->
								<!-- 	</MultiTrigger.Conditions> -->
								<!-- 	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" /> -->
								<!-- 	<Setter TargetName="Bd" Property="Background" Value="#44444444" /> -->
								<!-- </MultiTrigger> -->
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsSelected" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.MouseOver.Background}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style
					x:Key="Tv1Style1"
					TargetType="{x:Type TreeView}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeView}">
							<Border
									x:Name="Bd"
									SnapsToDevicePixels="true"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									>
								<ScrollViewer
										x:Name="_tv_scrollviewer_"
										Padding="{TemplateBinding Padding}"
										CanContentScroll="false"
										Focusable="false"
										HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										Background="{TemplateBinding Background}"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</Trigger>
								<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
									<Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style
					x:Key="TvxExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="9.5" />
				<Setter Property="Padding" Value="0" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Margin="0,0,0,0"
									Width="9.5"
									Height="9.5"
									Padding="0"
									Background="Transparent"
									>
								<Path
										x:Name="ExpandPath"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="{StaticResource TreeArrow2}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										RenderTransformOrigin="0.50, 0.50"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<TransformGroup>
											<!-- <ScaleTransform ScaleX="0.62" ScaleY="0.62"/> -->
											<RotateTransform Angle="135" />
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" />
											<!-- <RotateTransform Angle="180" CenterX="3" CenterY="3" /> -->
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Width" Value="9.5" />
			</Style>




			<!-- <Setter Property="IsExpanded" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=DataContext.IsExpanded}"></Setter> -->
			<Style
					x:Key="TvxItemContainerStyle1"
					TargetType="TreeViewItem"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Padding" Value="1,0,0,0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeViewItem}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<ToggleButton
										x:Name="Expander"
										ClickMode="Press"
										IsChecked="{Binding IsExpanded,
																				RelativeSource={RelativeSource TemplatedParent}}"
										Style="{StaticResource TvxExpandCollapseToggleStyle}"
										/>
								<Border
										x:Name="Bd"
										Grid.Column="1"
										Grid.Row="0"
										Padding="{TemplateBinding Padding}"
										SnapsToDevicePixels="true"
										Background="{TemplateBinding Background}"
										BorderThickness="{TemplateBinding BorderThickness}"
										BorderBrush="{TemplateBinding BorderBrush}"
										>
									<ContentPresenter
											x:Name="PART_Header"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											ContentSource="Header"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											/>
								</Border>
								<ItemsPresenter
										x:Name="ItemsHost"
										Grid.Column="1"
										Grid.Row="1"
										Grid.ColumnSpan="2"
										/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
								</Trigger>
								<Trigger Property="IsSelected" Value="true">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Popup.Selected.Background}" />
									<!-- <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" /> -->
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="true" />
										<Condition Property="IsSelectionActive" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Popup.Selected.Background}" />
									<!-- <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" /> -->
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<ControlTemplate
					x:Key="Tv1ScrollViewerControlTemplate1"
					TargetType="{x:Type ScrollViewer}"
					>
				<Grid
						x:Name="Grid"
						Background="{TemplateBinding Background}"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<Rectangle
							x:Name="Corner"
							Grid.Column="2"
							Grid.Row="2"
							Fill="Transparent"
							/>
					<ScrollContentPresenter
							x:Name="PART_ScrollContentPresenter"
							Content="{TemplateBinding Content}"
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							/>

					<ScrollBar
							x:Name="PART_VerticalScrollBar"
							Grid.Column="2"
							Grid.Row="1"
							Margin="0,-1,0,0"
							Width="{StaticResource BarSizeOutline}"
							MinWidth="{StaticResource BarSize}"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Value="{Binding VerticalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Style="{DynamicResource ScrollBarStyle}"
							/>

					<ScrollBar
							x:Name="PART_HorizontalScrollBar"
							Grid.Column="1"
							Grid.Row="2"
							Height="{StaticResource BarSizeOutline}"
							MinHeight="{StaticResource BarSize}"
							AutomationProperties.AutomationId="HorizontalScrollBar"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Value="{Binding HorizontalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Style="{DynamicResource ScrollBarStyle}"
							/>
				</Grid>
			</ControlTemplate>


			<HierarchicalDataTemplate
					x:Key="Tv1ItemTemplate1"
					DataType="{x:Type tree:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>
				<Grid
						x:Name="GD1"
						Margin="0,1,0,0"
						Width="Auto"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition />
					</Grid.RowDefinitions>

					<Label
							Content="{Binding Item.Title}"
							Grid.Column="0"
							Grid.Row="0"
							Margin="5,2,4,0"
							MinWidth="150"
							Padding="0"
							HorizontalAlignment="Stretch"
							Foreground="White"
							/>

					<Label
							Content="{Binding Item.Description}"
							Grid.Column="1"
							Grid.Row="0"
							Margin="5,2,4,0"
							MinWidth="150"
							Padding="0"
							HorizontalAlignment="Stretch"
							Foreground="White"
							/>

					<DockPanel
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="0,0,4,0"
							HorizontalAlignment="Stretch"
							>

						<Label
								Content="{Binding Item.Pattern}"
								Grid.Column="0"
								Grid.Row="1"
								Grid.ColumnSpan="2"
								Margin="22,1,4,4"
								Padding="0"
								HorizontalAlignment="Stretch"
								FontSize="8"
								Foreground="{StaticResource TreeViewItem.Label.Foreground.Muted}"
								/>

						<Label
								Content="{Binding UniqueId}"
								Margin="0"
								Width="20"
								Padding="0,0,0,2"
								HorizontalAlignment="Right"
								HorizontalContentAlignment="Right"
								VerticalAlignment="Bottom"
								FontSize="6"
								Foreground="{StaticResource TreeViewItem.Label.Foreground.Dim}"
								/>

					</DockPanel>


				</Grid>
			</HierarchicalDataTemplate>

			<HierarchicalDataTemplate
					x:Key="TvxItemTemplate"
					DataType="{x:Type tree:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>
				<Border
						x:Name="GD1"
						Margin="0,0,0,0"
						Width="Auto"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						BorderThickness="1"
						BorderBrush="Transparent"
						>
					<Label
							Content="{Binding Item.Title}"
							Margin="0,0,0,0"
							Padding="0,2,0,3"
							HorizontalAlignment="Stretch"
							FontSize="9"
							Foreground="White"
							/>

				</Border>
			</HierarchicalDataTemplate>




		</ResourceDictionary>
	</Window.Resources>



	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="400" />
			<ColumnDefinition Width="250" />
			<ColumnDefinition Width="2*" />
			<ColumnDefinition Width="90" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="4*" />
			<RowDefinition Height="1*" />
			<RowDefinition Height="48" />
		</Grid.RowDefinitions>

		<!-- <StackPanel -->
		<!-- 		Grid.Column="0" -->
		<!-- 		Grid.Row="2" -->
		<!-- 		Orientation="Vertical" -->
		<!-- 		> -->
		<!-- 	<Label -->
		<!-- 			Content="{Binding Source={x:Static local:MainWindow.TreeRoot}, -->
		<!-- 												Path=SelectedNode.Item.Title, -->
		<!-- 												FallbackValue='no title'}" -->
		<!-- 			FontSize="12" -->
		<!-- 			Foreground="White" -->
		<!-- 			/> -->
		<!-- -->
		<!-- 	<Label -->
		<!-- 			Content="{Binding Source={x:Static local:MainWindow.TreeRoot}, -->
		<!-- 												Path=HasSelection}" -->
		<!-- 			FontSize="12" -->
		<!-- 			Foreground="White" -->
		<!-- 			/> -->
		<!-- -->
		<!-- 	<Label -->
		<!-- 			Content="{Binding Source={x:Static local:MainWindow.TreeRoot}, -->
		<!-- 												Path=SelectedNode.IsExpanded, -->
		<!-- 												FallbackValue='false'}" -->
		<!-- 			FontSize="12" -->
		<!-- 			Foreground="White" -->
		<!-- 			> -->
		<!-- 	</Label> -->
		<!-- -->
		<!-- </StackPanel> -->




		<!--    -->
		<!--  <Button  -->
		<!--  x:Name="BtnFloatWin"  -->
		<!--  Content="Floater"  -->
		<!--  Grid.Column="2"  -->
		<!--  Grid.Row="2"  -->
		<!--  Margin="10"  -->
		<!--  Width="48"  -->
		<!--  Height="20"  -->
		<!--  HorizontalAlignment="Right"  -->
		<!--  VerticalAlignment="Bottom"  -->
		<!--  Click="BtnFloatWin_OnClick"  -->
		<!--  />  -->
		<!--    -->
		<!--  <Button  -->
		<!--  x:Name="BtnPopupWin"  -->
		<!--  Content="Popup"  -->
		<!--  Grid.Column="2"  -->
		<!--  Grid.Row="2"  -->
		<!--  Margin="10,10,10,40"  -->
		<!--  Width="48"  -->
		<!--  Height="20"  -->
		<!--  HorizontalAlignment="Right"  -->
		<!--  VerticalAlignment="Bottom"  -->
		<!--  Click="BtnPopupWin_OnClick"  -->
		<!--  />  -->
		<!--    -->
		<!--  <Label  -->
		<!--  x:Name="LblPopupWin"  -->
		<!--  Content="{Binding Item.Title,  -->
		<!--  FallbackValue='nothing'}"  -->
		<!--  Grid.Column="2"  -->
		<!--  Grid.Row="2"  -->
		<!--  Margin="10,10,80,40"  -->
		<!--  Width="100"  -->
		<!--  Height="20"  -->
		<!--  Padding="0"  -->
		<!--  HorizontalAlignment="Right"  -->
		<!--  VerticalAlignment="Bottom"  -->
		<!--  DataContext="{Binding ElementName=Tvz,  -->
		<!--  Path=SelectedValue}"  -->
		<!--  Foreground="White"  -->
		<!--  />  -->
		<!--    -->
		<!--  <TextBlock  -->
		<!--  x:Name="TbkPopupWinStatus"  -->
		<!--  Grid.Column="2"  -->
		<!--  Grid.Row="2"  -->
		<!--  Margin="10,10,80,10"  -->
		<!--  Width="100"  -->
		<!--  Height="20"  -->
		<!--  Padding="0"  -->
		<!--  HorizontalAlignment="Right"  -->
		<!--  VerticalAlignment="Bottom"  -->
		<!--  DataContext="{Binding ElementName=Tvz,  -->
		<!--  Path=SelectedValue}"  -->
		<!--  Text="not open"  -->
		<!--  Foreground="White"  -->

		<!--  <TreeView  -->
		<!--  x:Name="Tvx"  -->
		<!--  Grid.Column="2"  -->
		<!--  Grid.Row="1"  -->
		<!--  Margin="5"  -->
		<!--  HorizontalAlignment="Stretch"  -->
		<!--  HorizontalContentAlignment="Stretch"  -->
		<!--  d:DataContext="{Binding Source={x:Static local:MainWindow.RootNode}}"  -->
		<!--  DataContext="{Binding ElementName=MainWin,  -->
		<!--  Path=Categories.TreeBase}"  -->
		<!--  ScrollViewer.HorizontalScrollBarVisibility="Visible"  -->
		<!--  ScrollViewer.VerticalScrollBarVisibility="Visible"  -->
		<!--  Background="{StaticResource TreeView.Background}"  -->
		<!--  ItemContainerStyle="{DynamicResource TvxItemContainerStyle1}"  -->
		<!--  ItemTemplate="{DynamicResource TvxItemTemplate}"  -->
		<!--  ItemsSource="{Binding Children}"  -->
		<!--  Style="{StaticResource Tv1Style1}"  -->
		<!--  >  -->
		<!--    -->
		<!--    -->
		<!--  <Popup  -->
		<!--  x:Name="TvSelect"  -->
		<!--  Grid.Column="1"  -->
		<!--  Grid.Row="1"  -->
		<!--  Width="100"  -->
		<!--  Height="200"  -->
		<!--  AllowsTransparency="True"  -->
		<!--  Closed="TvSelect_Closed"  -->
		<!--  HorizontalOffset="0"  -->
		<!--  Opened="TvSelect_Opened"  -->
		<!--  Placement="Bottom"  -->
		<!--  PlacementTarget="{Binding ElementName=BtnPopupWin}"  -->
		<!--  StaysOpen="False"  -->
		<!--  VerticalOffset="0"  -->
		<!--  Visibility="Collapsed"  -->
		<!--  >  -->
		<!--    -->
		<!--  <TreeView  -->
		<!--  x:Name="Tvz"  -->
		<!--  Margin="0"  -->
		<!--  HorizontalAlignment="Stretch"  -->
		<!--  HorizontalContentAlignment="Stretch"  -->
		<!--  d:DataContext="{Binding Source={x:Static local:MainWindow.RootNode}}"  -->
		<!--  DataContext="{Binding ElementName=MainWin,  -->
		<!--  Path=Categories.TreeBase}"  -->
		<!--  MouseDoubleClick="Tvz_OnMouseDoubleClick"  -->
		<!--  ScrollViewer.HorizontalScrollBarVisibility="Visible"  -->
		<!--  ScrollViewer.VerticalScrollBarVisibility="Visible"  -->
		<!--  Background="{StaticResource TreeView.Background}"  -->
		<!--  ItemContainerStyle="{DynamicResource TvxItemContainerStyle1}"  -->
		<!--  ItemTemplate="{DynamicResource TvxItemTemplate}"  -->
		<!--  ItemsSource="{Binding Children}"  -->
		<!--  Style="{StaticResource Tv1Style1}"  -->
		<!--  >  -->
		<!--    -->
		<!-- 	</TreeView> -->
		<!-- </Popup> -->

		<!--  />  -->

		<Button
				x:Name="BtnDebug"
				Content="Debug"
				Grid.Column="1"
				Grid.Row="2"
				Margin="10"
				Width="{StaticResource Normal.Button.Width}"
				Height="{StaticResource Normal.Button.Height}"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnDebug_OnClick"
				Style="{StaticResource Button.Normal.Style}"
				Template="{StaticResource Button.Normal.ControlTemplate}"
				/>
		<StackPanel
				Grid.Column="1"
				Grid.Row="3"
				Margin="5"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Orientation="Horizontal"
				>

			<Button
					x:Name="BtnDSave"
					Content="Save"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					IsEnabled="{Binding Categories.IsModified,
															ElementName=MainWin}"
					Click="BtnSave_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>

			<Button
					x:Name="BtDone"
					Content="Done"
					Margin="5"
					Width="{StaticResource Normal.Button.Width}"
					Height="{StaticResource Normal.Button.Height}"
					Click="BtnDone_OnClick"
					Style="{StaticResource Button.Normal.Style}"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					/>

		</StackPanel>

		<Label
				Content="Sheet Organization Categories"
				Grid.Column="0"
				Grid.Row="0"
				Grid.ColumnSpan="2"
				Margin="5,0,5,0"
				Padding="0,4,0,6"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Top"
				Background="{StaticResource Win.Title.Background}"
				Foreground="White"
				/>


		<Grid
				x:Name="EditCategory"
				Grid.Column="1"
				Grid.Row="1"
				Margin="5,6,5,5"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Top"
				DataContext="{Binding SelectedValue,
															ElementName=Tv1}"
				>

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="*" />


			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="26" />
				<RowDefinition Height="26" />
				<RowDefinition Height="26" />
				<RowDefinition Height="6" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="36" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="36" />
				<RowDefinition Height="36" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="36" />
			</Grid.RowDefinitions>

			<Label
					Content="Selected Category"
					Grid.Column="0"
					Grid.Row="0"
					Grid.ColumnSpan="3"
					Margin="0,0,0,6"
					Padding="2,1,2,4"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<Label
					Content="Title"
					Grid.Column="0"
					Grid.Row="1"
					Style="{StaticResource Style.Edit.Label}"
					/>

			<TextBox
					Grid.Column="1"
					Grid.Row="1"
					Grid.ColumnSpan="2"
					Text="{Binding Item.Title,
												 FallbackValue=Nothing Selected,
												 Mode=OneWay}"
					Style="{StaticResource Style.Edit.TextBox}"
					/>

			<Label
					Content="Description"
					Grid.Column="0"
					Grid.Row="2"
					Style="{StaticResource Style.Edit.Label}"
					/>

			<TextBox
					Grid.Column="1"
					Grid.Row="2"
					Grid.ColumnSpan="2"
					Text="{Binding Item.Description,
												 FallbackValue='',
												 Mode=OneWay}"
					Style="{StaticResource Style.Edit.TextBox}"
					/>

			<Label
					Content="Pattern"
					Grid.Column="0"
					Grid.Row="3"
					Style="{StaticResource Style.Edit.Label}"
					/>

			<TextBox
					Grid.Column="1"
					Grid.Row="3"
					Grid.ColumnSpan="2"
					Text="{Binding Item.Pattern,
												 FallbackValue='',
												 Mode=OneWay}"
					Style="{StaticResource Style.Edit.TextBox}"
					/>

			<!--    -->
			<!--  <Label  -->
			<!--  Content="{Binding ElementName=MainWin,  -->
			<!--  Path=ContextSelected.Item.Title,  -->
			<!--  FallbackValue='nothing selected'}"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="6"  -->
			<!--  Grid.ColumnSpan="2"  -->
			<!--  Foreground="White"  -->
			<!--  >  -->
			<!-- </Label> -->
			<!--    -->
			<!--  <Label  -->
			<!--  x:Name="commandx"  -->
			<!--  Content="no command"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="7"  -->
			<!--  Grid.ColumnSpan="2"  -->
			<!--  Foreground="White"  -->
			<!--  >  -->
			<!-- </Label> -->


			<!--    -->
			<!--  <Label Content="Add"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="5"  -->
			<!--  Grid.ColumnSpan="3"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Padding="2,2,2,2"  -->
			<!--  FontSize="10"  -->
			<!--  Background="{StaticResource Win.Title.Background}"  -->
			<!--  Foreground="White" />  -->
			<!--    -->
			<!--  <Button x:Name="BtnAddSubCat"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="6"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10"  -->
			<!--  Content="Sub-Category">  -->
			<!-- </Button> -->
			<!--    -->
			<!--  <Button x:Name="BtnAddCatBefore"  -->
			<!--  Grid.Column="1"  -->
			<!--  Grid.Row="6"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10">  -->
			<!-- 	<Button.Content> -->
			<!-- 		<StackPanel> -->
			<!--  <Label Content="Category"  -->
			<!--  Margin="0,0,0,-2"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!--  <Label Content="Before"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!-- 		</StackPanel> -->
			<!-- 	</Button.Content> -->
			<!-- </Button> -->
			<!--    -->
			<!--  <Button x:Name="BtnAddCatAfter"  -->
			<!--  Grid.Column="2"  -->
			<!--  Grid.Row="6"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10">  -->
			<!-- 	<Button.Content> -->
			<!-- 		<StackPanel> -->
			<!--  <Label Content="Category"  -->
			<!--  Margin="0,0,0,-2"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!--  <Label Content="After"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!-- 		</StackPanel> -->
			<!-- 	</Button.Content> -->
			<!-- </Button> -->
			<!--    -->
			<!--~1~#region > Move  @1@-->
			<!--    -->
			<!--  <Label Content="Move"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="7"  -->
			<!--  Grid.ColumnSpan="3"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Padding="2,1,2,1"  -->
			<!--  FontSize="10"  -->
			<!--  Background="{StaticResource Win.Title.Background}"  -->
			<!--  Foreground="White" />  -->
			<!--    -->
			<!--  <Button x:Name="BtnMoveCatBefore"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="8"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10">  -->
			<!-- 	<Button.Content> -->
			<!-- 		<StackPanel> -->
			<!--  <Label Content="Category"  -->
			<!--  Margin="0,0,0,-2"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!--  <Label Content="Before"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!-- 		</StackPanel> -->
			<!-- 	</Button.Content> -->
			<!-- </Button> -->
			<!--    -->
			<!--  <Button x:Name="BtnMoveCatAfter"  -->
			<!--  Grid.Column="1"  -->
			<!--  Grid.Row="8"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10">  -->
			<!-- 	<Button.Content> -->
			<!-- 		<StackPanel> -->
			<!--  <Label Content="Category"  -->
			<!--  Margin="0,0,0,-2"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!--  <Label Content="After"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10" />  -->
			<!-- 		</StackPanel> -->
			<!-- 	</Button.Content> -->
			<!-- </Button> -->
			<!--    -->
			<!--  <TextBlock Foreground="white"  -->
			<!--  Padding="0,3,0,0"  -->
			<!--    -->
			<!--  Background="#44444444"  -->
			<!--  Text="Move Before or&#x0a;After Category"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="9"  -->
			<!--  Margin="4,0,4,4"  -->
			<!--    -->
			<!--  FontSize="10"  -->
			<!--  ScrollViewer.CanContentScroll="True">  -->
			<!--    -->
			<!-- </TextBlock> -->
			<!--    -->
			<!--    -->
			<!--~1~#endregion @1@-->
			<!--  <Label Content="Delete"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="10"  -->
			<!--  Grid.ColumnSpan="3"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Padding="2,1,2,1"  -->
			<!--  FontSize="10"  -->
			<!--  Background="{StaticResource Win.Title.Background}"  -->
			<!--  Foreground="White" />  -->
			<!--    -->
			<!--  <Button Content="Delete"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="11"  -->
			<!--  Margin="4"  -->
			<!--  Height="26"  -->
			<!--  FontSize="10" />  -->

			<!--    -->
			<!--  <Label Content="Selected Category"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="4"  -->
			<!--  Grid.ColumnSpan="2"  -->
			<!--  Margin="0,15,0,6"  -->
			<!--  Padding="2,1,2,4"  -->
			<!--  FontSize="11"  -->
			<!--  Background="{StaticResource Win.Title.Background}"  -->
			<!--  Foreground="White" />  -->

			<!--
				functions
				1. delete
				2. add before
				3. add after
				4. add child
				5. move after
				6. move before
			-->


		</Grid>

		<!-- </TreeView> -->

		<TreeView
				x:Name="Tv1"
				Grid.Column="0"
				Grid.Row="1"
				Margin="5"
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				d:DataContext="{Binding Source={x:Static local:MainWindow.TreeRoot}}"
				DataContext="{Binding Categories.TreeBase,
															ElementName=MainWin}"
				ScrollViewer.HorizontalScrollBarVisibility="Visible"
				SelectedItemChanged="Tv1_OnSelectedItemChanged"
				Tag="{Binding ElementName=MainWin,
											Path=ContextCmdDelete}"
				Background="{StaticResource TreeView.Background}"
				ItemContainerStyle="{StaticResource Tv1temContainerStyle1}"
				ItemTemplate="{StaticResource Tv1ItemTemplate1}"
				ItemsSource="{Binding ChildrenView}"
				Style="{StaticResource Tv1Style1}"
				/>

	</Grid>
</Window>
