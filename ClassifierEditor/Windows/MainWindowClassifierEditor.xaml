<Window x:Name="MainWinClsfrEd"
		x:Class="ClassifierEditor.Windows.MainWindowClassifierEditor"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:custom="clr-namespace:ClassifierEditor.Windows.Support"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:file="clr-namespace:AndyShared.FileSupport.FileNameSheetPDF;assembly=WpfShared"
		xmlns:local="clr-namespace:ClassifierEditor.Windows"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:res="clr-namespace:AndySharedResources.XamlResources"
		xmlns:sample="clr-namespace:ClassifierEditor.SampleData"
		xmlns:support="clr-namespace:AndyShared.Support;assembly=WpfShared"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:treeSupport="clr-namespace:AndyShared.ClassificationDataSupport.TreeSupport;assembly=WpfShared"
		xmlns:util="clr-namespace:UtilityLibrary;assembly=WpfShared"
		Title="MainWindowClassifierEditor"
		Width="1200"
		Height="800"
		MinWidth="1200"
		MinHeight="800"
		DataContext="{Binding ElementName=MainWinClsfrEd}"
		mc:Ignorable="d"
		FontFamily="Tahoma"
		FontSize="12"
		Background="{DynamicResource Window.Background}"
		d:UseSampleData="True"
		Closing="MainWin_Closing"
		Initialized="Window_Initialized"
		Loaded="Window_Loaded"
		>
	<!--  xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"  -->
	<!--  xmlns:file="clr-namespace:AndyShared.FilesSupport;assembly=WpfShared"  -->
	<!--  xmlns:file="clr-namespace:AndyShared.FilesSupport"  -->
	<!--  xmlns:tree="clr-namespace:AndyShared.ClassificationDataSupport.TreeSupport"  -->

	<Window.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ResourceFiles/XamlResources/ScrollBar.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/ExpanderCheckBox.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconResources.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/MasterVisualResources.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/VisualStates.xaml" />

			</ResourceDictionary.MergedDictionaries>

			<local:Lv1ConditionTemplateSelector x:Key="Lv1ConditionSelector" />
			<local:Lv2ConditionTemplateSelector x:Key="Lv2ConditionSelector" />

			<local:NotBoolConverter x:Key="NotBool" />
			<support:BoolToYesNoConverter x:Key="BoolToYesNo" />
			<support:NullObjToBool x:Key="NullObjToBool" />
			<support:PassThroughConverter x:Key="PassThru" />

			<sys:Double x:Key="LogicalHorizBarWidth">
				24
			</sys:Double>

			<sys:Double x:Key="ConditionFontSize">10</sys:Double>

			<PathGeometry x:Key="TreeArrow"
					Figures="M0,0 L0,8 L8,0 z"
					/>

			<PathGeometry x:Key="TreeArrow2"
					Figures="M3.5,3.5 L3.5,8 L8,3.5 z"
					/>

			<Style x:Key="Border.Base"
					TargetType="Border"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Border.Settings.Base"
					TargetType="Border"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="CornerRadius" Value="3" />
				<Setter Property="BorderThickness" Value="0" />
			</Style>

			<Style x:Key="Border.Settings.Title"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Label.Status.Title.Background}" />
				<Setter Property="Background" Value="{StaticResource Label.Status.Title.Background}" />
			</Style>

			<Style x:Key="Border.Settings.Value"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Label.Status.Button.Background}" />
				<Setter Property="Background" Value="{StaticResource Label.Status.Button.Background}" />

				<Setter Property="Margin" Value="5,0,0,0" />
			</Style>

			<Style x:Key="Border.Settings.Button"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Element.Value.Background.Normal}" />
				<Setter Property="Background" Value="{StaticResource Element.Value.Background.Normal}" />
				<Setter Property="Margin" Value="5,0,0,0" />
			</Style>


			<Style x:Key="ItemsControl.Border.Logical.Background"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Normal}" />

				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Disabled}" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Control.Base"
					TargetType="Control"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
						<Setter Property="Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Base"
					TargetType="{x:Type Label}"
					>
				<!--  BasedOn="{StaticResource Control.Base}"  -->
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="Label.Selected"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="2" />
			</Style>

			<Style x:Key="Label.Condition"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="FontSize" Value="{StaticResource ConditionFontSize}" />
				<Setter Property="HorizontalAlignment" Value="left" />
				<Setter Property="Margin" Value="2,2,2,3" />

			</Style>


			<Style x:Key="Label.Condition.ComponentName"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Condition.Condition"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">

						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />

					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Condition.Value"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />

					</Trigger>
				</Style.Triggers>
			</Style>



			<Style x:Key="Label.Settings.Title"
					TargetType="Label"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="Padding" Value="15,0,15,1" />
			</Style>

			<Style x:Key="Label.ItemsControl.Base"
					TargetType="Label"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0,0,0,2" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
					</Trigger>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.MouseOver}">
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Label.ItemsControl.Header"
					TargetType="Label"
					BasedOn="{StaticResource Label.ItemsControl.Base}"
					>
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>

			<Style x:Key="Label.ItemsControl.Condition"
					TargetType="Label"
					BasedOn="{StaticResource Label.ItemsControl.Base}"
					>
				<Setter Property="FontSize" Value="{StaticResource ConditionFontSize}" />
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>

			<Style x:Key="TextBox.Base"
					TargetType="TextBox"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="TextBox.Setting.Value"
					TargetType="TextBox"
					BasedOn="{StaticResource TextBox.Base}"
					>
				<Setter Property="Padding" Value="8,0,8,1" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="FontSize" Value="12" />
				<Setter Property="Foreground">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource True.White}" />
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="TextBox.Selected"
					TargetType="{x:Type TextBox}"
					>
				<Setter Property="Background" Value="{StaticResource TextBox.Background}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="IsEnabled" Value="false" />
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="MaxLines" Value="1" />
				<Setter Property="Padding" Value="6,2,4,2" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />

				<Style.Triggers>
					<DataTrigger Value="true" Binding="{Binding IsNodeSelected, FallbackValue=False}">
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Button.Condition.Style"
					TargetType="{x:Type Button}"
					>
				<Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="Bd"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="18"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="contentPresenterBtn"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Control.Disabled.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
									<Setter TargetName="contentPresenterBtn" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>

			<!--  <Style x:Key="Button.Condition.Select.Style"  -->
			<!--  TargetType="{x:Type Button}"  -->
			<!--  >  -->
			<!-- 	<Setter Property="FocusVisualStyle" Value="{x:Null}" /> -->
			<!-- 	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" /> -->
			<!-- 	<Setter Property="HorizontalContentAlignment" Value="Center" /> -->
			<!-- 	<Setter Property="Padding" Value="1" /> -->
			<!-- 	<Setter Property="Template"> -->
			<!-- 		<Setter.Value> -->
			<!-- 			<ControlTemplate TargetType="{x:Type Button}"> -->
			<!--  <Border x:Name="Bd"  -->
			<!--  CornerRadius="3"  -->
			<!--  SnapsToDevicePixels="true"  -->
			<!--  Background="{TemplateBinding Background}"  -->
			<!--  BorderThickness="{TemplateBinding BorderThickness}"  -->
			<!--  BorderBrush="{TemplateBinding BorderBrush}"  -->
			<!--  >  -->
			<!--  <ContentPresenter x:Name="contentPresenterBtn2"  -->
			<!--  Margin="{TemplateBinding Padding}"  -->
			<!--  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
			<!--  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  -->
			<!--  Focusable="False"  -->
			<!--  RecognizesAccessKey="True"  -->
			<!--  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  -->
			<!--  />  -->
			<!-- 				</Border> -->
			<!-- 				<ControlTemplate.Triggers> -->
			<!-- 					<Trigger Property="IsDefaulted" Value="true"> -->
			<!-- 						<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" /> -->
			<!-- 					</Trigger> -->
			<!-- 					<Trigger Property="IsMouseOver" Value="true"> -->
			<!-- 						<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" /> -->
			<!-- 						<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" /> -->
			<!-- 					</Trigger> -->
			<!-- 					<Trigger Property="IsPressed" Value="true"> -->
			<!-- 						<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" /> -->
			<!-- 						<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" /> -->
			<!-- 					</Trigger> -->
			<!-- 					<Trigger Property="IsEnabled" Value="false"> -->
			<!-- 						<Setter TargetName="Bd" Property="Background" Value="{StaticResource Control.Disabled.Background}" /> -->
			<!-- 						<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" /> -->
			<!-- 						<Setter TargetName="contentPresenterBtn2" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" /> -->
			<!-- 					</Trigger> -->
			<!-- 				</ControlTemplate.Triggers> -->
			<!-- 			</ControlTemplate> -->
			<!-- 		</Setter.Value> -->
			<!-- 	</Setter> -->
			<!-- 	<Setter Property="VerticalContentAlignment" Value="Center" /> -->
			<!-- </Style> -->


			<Style x:Key="Dg.Cell.Base"
					TargetType="{x:Type DataGridCell}"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg.Row.Base"
					TargetType="{x:Type DataGridRow}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg.CellLabel.Base"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="{StaticResource Dg.CellLabel.Background}" />
				<Setter Property="FontSize" Value="8" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="3,0,0,0" />
				<Setter Property="Padding" Value="2" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>

			<Style x:Key="Dg.CellLabel.Title"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>

				<Setter Property="Padding" Value="10,2,10,2" />
				<Setter Property="MinWidth" Value="24" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
			</Style>
			<!-- <Setter Property="Width" Value="36" /> -->

			<Style x:Key="Dg.CellLabel.Data"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="6,2,6,2" />
				<Setter Property="MinWidth" Value="28" />
			</Style>

			<Style x:Key="Dg.CellLabel.Border"
					TargetType="{x:Type Border}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource TreeViewRow.BorderBrush.Light}" />
				<Setter Property="BorderThickness" Value="0,0,1,0" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0,2,0,2" />
				<Setter Property="Padding" Value="2.0,0,4.5,0" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg1Style"
					TargetType="{x:Type DataGrid}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<!-- <Setter Property="BorderBrush" Value="#FF688CAF" /> -->
				<Setter Property="BorderBrush" Value="{StaticResource ItemsControl.Border.Frame}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGrid}">
							<Border
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									SnapsToDevicePixels="True"
									>
								<ScrollViewer x:Name="DG_ScrollViewer"
										Focusable="false"
										>
									<ScrollViewer.Template>
										<ControlTemplate TargetType="{x:Type ScrollViewer}">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="*" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<Button x:Name="BtnX2"
														Width="{Binding CellsPanelHorizontalOffset,
																						FallbackValue=0,
																						RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Command="{x:Static DataGrid.SelectAllCommand}"
														Focusable="false"
														Visibility="{Binding HeadersVisibility,
																								 FallbackValue=Visible,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.All},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
																																					TypeInTargetAssembly={x:Type DataGrid}}}"
														/>
												<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
														Grid.Column="1"
														Grid.Row="0"
														Visibility="{Binding HeadersVisibility,
																								 FallbackValue=Visible,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.Column},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														/>
												<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
														Grid.Column="0"
														Grid.Row="1"
														Grid.ColumnSpan="2"
														CanContentScroll="{TemplateBinding CanContentScroll}"
														/>

												<ScrollBar x:Name="PART_VerticalScrollBar"
														Grid.Column="2"
														Grid.Row="1"
														Margin="0,0,0,0"
														Width="{StaticResource BarSizeOutline}"
														MinWidth="{StaticResource BarSize}"
														Value="{Binding VerticalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														Background="{StaticResource ScrollBarBkg}"
														Cursor="Arrow"
														Maximum="{TemplateBinding ScrollableHeight}"
														Minimum="0"
														ViewportSize="{TemplateBinding ViewportHeight}"
														Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
														Style="{DynamicResource ScrollBarStyle}"
														/>

												<!--<ScrollBar
														x:Name="PART_VerticalScrollBar"
														Grid.Column="2"
														Grid.Row="1"
														Maximum="{TemplateBinding ScrollableHeight}"
														Orientation="Vertical"
														ViewportSize="{TemplateBinding ViewportHeight}"
														Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
														Value="{Binding VerticalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														/>-->
												<Grid
														Grid.Column="1"
														Grid.Row="2"
														>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, FallbackValue=50}" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>

													<ScrollBar x:Name="PART_HorizontalScrollBar"
															Grid.Column="1"
															Grid.Row="0"
															Height="{StaticResource BarSizeOutline}"
															MinHeight="{StaticResource BarSize}"
															Value="{Binding HorizontalOffset,
																							Mode=OneWay,
																							RelativeSource={RelativeSource TemplatedParent}}"
															Background="{StaticResource ScrollBarBkg}"
															AutomationProperties.AutomationId="HorizontalScrollBar"
															Cursor="Arrow"
															Maximum="{TemplateBinding ScrollableWidth}"
															Minimum="0"
															Orientation="Horizontal"
															ViewportSize="{TemplateBinding ViewportWidth}"
															Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
															Style="{DynamicResource ScrollBarStyle}"
															/>


													<!--<ScrollBar
															x:Name="PART_HorizontalScrollBar"
															Grid.Column="1"
															Maximum="{TemplateBinding ScrollableWidth}"
															Orientation="Horizontal"
															ViewportSize="{TemplateBinding ViewportWidth}"
															Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
															Value="{Binding HorizontalOffset,
																							Mode=OneWay,
																							RelativeSource={RelativeSource TemplatedParent}}"
															/>-->
												</Grid>
											</Grid>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true" />
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</MultiTrigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="ComboBoxItem1"
					TargetType="{x:Type ComboBoxItem}"
					>
				<Setter Property="FocusVisualStyle" Value="{DynamicResource CboxFocusVisual}" />
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="SnapsToDevicePixels" Value="true" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">

							<Border x:Name="Border"
									Margin="00,0,0,0"
									Padding="20,2,2,2"
									Background="Transparent"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="ContentPresenterA" />
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualState x:Name="Unselected" />
										<VisualState x:Name="Selected">
											<Storyboard>
												<ColorAnimationUsingKeyFrames
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
														>
													<!--  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush)"  -->
													<!--  ReSharper disable once Xaml.InvalidResourceType  -->
													<EasingColorKeyFrame
															Value="{DynamicResource ItemsControl.ListItem.Background.Selected.C}"
															KeyTime="0"
															/>
													<!--  color of the drop down selected item  -->
													<!--  Value="{StaticResource SelectedBackgroundColor}  -->
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedUnfocused">
											<Storyboard>
												<ColorAnimationUsingKeyFrames
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
														>
													<!--  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush)"  -->
													<!--  ReSharper disable once Xaml.InvalidResourceType  -->
													<EasingColorKeyFrame
															Value="{DynamicResource ItemsControl.ListItem.Background.Selected.UnFocused.C}"
															KeyTime="0"
															/>
													<!--  color of the drop down selected item focus lost  -->
													<!--  Value="{StaticResource SelectedUnfocusedColor}"  -->
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>



			<ControlTemplate x:Key="ComboBoxToggleButton1"
					TargetType="{x:Type ToggleButton}"
					>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="20" />
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<Border x:Name="Border"
							Grid.Column="0"
							BorderThickness="1"
							CornerRadius="2"
							/>
					<Border
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Margin="0"
							Padding="0"
							Background="Transparent"
							CornerRadius="2,0,0,2"
							/>
					<Path x:Name="Arrow"
							Grid.Column="0"
							Margin="0,1.5,0,0"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="M 0,0 4,8 8,0 z"
							Fill="red"
							RenderTransformOrigin="0.5,0.5"
							>
						<Path.RenderTransform>
							<TransformGroup>
								<RotateTransform Angle="-90" />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsChecked" Value="true">
						<Setter TargetName="Arrow" Property="Fill" Value="OrangeRed" />
						<Setter TargetName="Arrow" Property="RenderTransform">
							<Setter.Value>
								<RotateTransform Angle="0" />
							</Setter.Value>
						</Setter>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<ControlTemplate x:Key="ComboBoxTextBox" x:Name="ComboBoxTextBox"
					TargetType="{x:Type TextBox}"
					>

				<Border x:Name="PART_ContentHost"
						Background="{TemplateBinding Background}"
						Focusable="False"
						/>
			</ControlTemplate>


			<ControlTemplate x:Key="ComboBoxTemplate1"
					TargetType="ComboBox"
					>
				<Border
						Margin="0,0,0,0"
						Padding="8,0,10,0"
						BorderThickness="0"
						CornerRadius="3"
						>
					<!--  Background="{StaticResource ItemsControl.Subject.Background.Normal}"  -->
					<Border.Style>
						<Style TargetType="Border">
							<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->

							<Style.Triggers>
								<!--  true  -->
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" 
											Value="{Binding Path=(custom:CustomProperties.MouseOverBrush), 
												RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
								</Trigger>
									<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.MouseOver}" /> -->
								<Trigger Property="IsEnabled" Value="False">
									<!--  false  -->
									<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
									<Setter Property="Background" Value="{Binding Path=(custom:CustomProperties.NotEnabledBrush), 
											RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
								</Trigger>
									<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->

							</Style.Triggers>
						</Style>
					</Border.Style>

					<!--  <Border  -->
					<!--  Padding="1,0,5,1"  -->
					<!--  CornerRadius="3"  -->
					<!--  BorderThickness="0"  -->
					<!--  >  -->
					<!-- 	<Border.Style> -->
					<!-- 		<Style TargetType="Border"> -->
					<!-- 			<Setter Property="Background" Value="Transparent" /> -->
					<!-- 			<Style.Triggers> -->
					<!-- 				~1~ <Trigger Property="IsMouseOver" Value="true"> @1@ -->
					<!--  ~1~ 	~2~  true  @2@ @1@  -->
					<!-- 				~1~ 	<Setter Property="Background" Value="#55444444" /> @1@ -->
					<!-- 				~1~ </Trigger> @1@ -->
					<!-- 				<Trigger Property="IsEnabled" Value="False"> -->
					<!--  ~1~  false  @1@  -->
					<!--  <Setter Property="Background"  -->
					<!--  Value="{StaticResource ItemsControl.Subject.Background.Disabled}" />  -->
					<!-- 				</Trigger> -->
					<!-- 			</Style.Triggers> -->
					<!-- 		</Style> -->
					<!-- 	</Border.Style> -->

					<Grid Margin="1">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="20" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<ToggleButton x:Name="ToggleButton"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								Background="{TemplateBinding Background}"
								IsChecked="{Binding IsDropDownOpen,
																		Mode=TwoWay,
																		RelativeSource={RelativeSource TemplatedParent}}"
								ClickMode="Press"
								Focusable="false"
								Template="{StaticResource ComboBoxToggleButton1}"
								/>

						<ContentPresenter x:Name="ContentSite"
								Content="{TemplateBinding SelectionBoxItem}"
								Grid.Column="1"
								Margin="0,0,1,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								IsHitTestVisible="False"
								ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
								ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
								>
						</ContentPresenter>

						<TextBox x:Name="PART_EditableTextBox"
								Grid.Column="1"
								Margin="3,0,3,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Background="Transparent"
								Foreground="{TemplateBinding Foreground}"
								IsReadOnly="{TemplateBinding IsReadOnly}"
								Focusable="True"
								Visibility="Hidden"
								Style="{x:Null}"
								Template="{StaticResource ComboBoxTextBox}"
								/>

						<Popup x:Name="Popup"
								AllowsTransparency="True"
								Grid.Column="1"
								Margin="0"
								IsOpen="{TemplateBinding IsDropDownOpen}"
								Focusable="False"
								Placement="Bottom"
								PopupAnimation="Slide"
								>
							<!--  IsOpen="{TemplateBinding IsDropDownOpen}"  -->

							<Grid x:Name="DropDown"
									Margin="2,2,0,0"
									MinWidth="{TemplateBinding ActualWidth}"
									MaxHeight="{TemplateBinding MaxDropDownHeight}"
									SnapsToDevicePixels="True"
									>
								<Border x:Name="DropDownBorder"
										Margin="0"
										Padding="0"
										Background="{Binding Path=(custom:CustomProperties.DropDownBrush),
											RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										BorderThickness="0"
										>
										<!-- Background="{StaticResource ItemsControl.ListItem.Background.Normal}" -->
									<!-- <Setter Property="Background" Value="{Binding Path=(custom:CustomProperties.NotEnabledBrush),  -->
									<!-- 		RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/> -->
									<!--  Background="{TemplateBinding Background}"  -->
									<Border.BorderBrush>
										<SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
									</Border.BorderBrush>

								</Border>

								<ScrollViewer
										Width="{TemplateBinding custom:CustomProperties.DropDownWidth}"
										Padding="0"
										SnapsToDevicePixels="True"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<StackPanel
											IsItemsHost="True"
											KeyboardNavigation.DirectionalNavigation="Contained"
											/>

								</ScrollViewer>
							</Grid>
						</Popup>


						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames
												Storyboard.TargetName="PART_EditableTextBox"
												Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
												>
											<EasingColorKeyFrame
													Value="{StaticResource DisabledForegroundColor}"
													KeyTime="0"
													/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
												Storyboard.TargetName="PART_EditableTextBox"
												Storyboard.TargetProperty="(UIElement.Visibility)"
												>
											<DiscreteObjectKeyFrame
													Value="{x:Static Visibility.Visible}"
													KeyTime="0"
													/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
												Storyboard.TargetName="ContentSite"
												Storyboard.TargetProperty="(UIElement.Visibility)"
												>
											<DiscreteObjectKeyFrame
													Value="{x:Static Visibility.Hidden}"
													KeyTime="0"
													/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Uneditable" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</Border>

				<!-- </Border> -->
				<ControlTemplate.Triggers>
					<Trigger Property="HasItems" Value="false">
						<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
					</Trigger>
					<Trigger Property="IsGrouping" Value="true">
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</Trigger>
					<Trigger Property="AllowsTransparency" Value="true" SourceName="Popup">
						<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
						<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>



			<Style x:Key="CboxFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Path x:Name="Arrow"
										Grid.Column="0"
										Margin="0,1.5,0,0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="M 0,0 0,8 8,4 z"
										Fill="red"
										/>
								<Rectangle
										Grid.Column="0"
										Grid.ColumnSpan="2"
										Margin="2,0,0,0"
										Fill="#44ffffff"
										SnapsToDevicePixels="true"
										>

									<!--  Fill="#44545454"  -->

									<Rectangle.Stroke>
										<SolidColorBrush Color="{StaticResource Gray.220}" />
									</Rectangle.Stroke>
								</Rectangle>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<Style x:Key="Cbox1Style1"
					TargetType="{x:Type ComboBox}"
					>
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="SnapsToDevicePixels" Value="true" />
				<!-- <Setter Property="Template" Value="{StaticResource ComboBoxTemplate1}" /> -->
				<!-- <Style.Triggers> -->
				<!-- 	<Trigger Property="IsEnabled" Value="False"> -->
				<!-- 		<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
				<!-- 	</Trigger> -->
				<!-- </Style.Triggers> -->
			</Style>



			<Style x:Key="Ckbx1Style"
					TargetType="{x:Type CheckBox}"
					>
				<Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Grid x:Name="templateRoot"
									Margin="0"
									Background="Transparent"
									SnapsToDevicePixels="True"
									>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Border
										Margin="0"
										Width="{TemplateBinding Height}"
										Height="{TemplateBinding Height}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Background="{TemplateBinding Background}"
										BorderThickness="1"
										BorderBrush="Transparent"
										>

									<Grid>

										<Border x:Name="checkBoxBorder"
												Margin="1.0"
												BorderThickness="1"
												BorderBrush="{TemplateBinding BorderBrush}"
												/>
										<Grid x:Name="markGrid"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												>
											<Path x:Name="optionMark"
													Margin="0"
													Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
													Fill="{StaticResource OptionMark.Static.Glyph2}"
													Opacity="0"
													Stretch="None"
													/>
											<Rectangle x:Name="indeterminateMark"
													Margin="2,1.5,2,1.5"
													Fill="{StaticResource OptionMark.Static.Glyph2}"
													Opacity="0"
													/>
										</Grid>

									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter"
										Grid.Column="1"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="Padding" Value="4,-1,0,0" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
									<Setter TargetName="optionMark" Property="Opacity" Value="1" />
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
									<Setter TargetName="optionMark" Property="Opacity" Value="0" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="Tv1ItemFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="Tv1ExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="16" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Width="24"
									Height="24"
									Padding="5,5,5,5"
									Background="Transparent"
									>
								<Path x:Name="ExpandPath"
										Data="{StaticResource TreeArrow}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<RotateTransform Angle="135" CenterX="3" CenterY="3" />
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" CenterX="3" CenterY="3" />
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="Width" Value="16" />
			</Style>

			<Style x:Key="Tv.context.menuitem.base"
					TargetType="{x:Type MenuItem}"
					>
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Padding" Value="0,2,0,2" />
			</Style>

			<Style x:Key="Tv.context.menuitem.move"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="true" Binding="{Binding HasSelection, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
							<Condition Value="false" Binding="{Binding IsNodeSelected}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="true" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.clone"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Style.Triggers>
					<DataTrigger Value="true" Binding="{Binding HasSelection, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindowClassifierEditor}}}">
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>

				</Style.Triggers>
			</Style>

			<!--
				options
				WHEN	          default     IsFixed			  Isfixed      IsLocked      IsMaxDepth
				.               state       == true       == false     == true       == true;
				
				expand          disabled    either        either       either        either
				spacer
				add before      enabled     either        either       either        either
				add after       enabled     either        either       either        either
				add child       enabled     either        either       disable       disabled
				spacer
				move before     disabled    either        either       either        either
				move after      disabled    either        either       either        either
				move as child   disabled    either        either       disable       disabled
				spacer
				clone           disabled    either        either       either        either
				.                           (remove				(remove      (remove       (remove
				.							              lock/ fixed)	lock/ fixed) lock / fixed) lock / fixed)
				clone as child  disabled    either        either       disable       disabled
				.                           (remove				(remove
				. 						              lock / fixed)	lock/ fixed)
				delete          disabled    disable				either       disable       either
			-->

			<ContextMenu x:Key="Tv1ContextMenu" x:Name="Tv1ContextMenu"
					Padding="0,6,0,6"
					d:DataContext="{Binding ElementName=MainWinClsfrEd,
																	Path=UserSelected}"
					Background="{StaticResource ContextMenu.Background}"
					Foreground="White"
					Closed="Tv1ContextMenu_OnClosed"
					HasDropShadow="True"
					Opened="Tv1ContextMenu_OnOpened"
					OverridesDefaultStyle="True"
					>

				<ContextMenu.Template>
					<ControlTemplate x:Name="ContextTemplate"
							TargetType="{x:Type ContextMenu}"
							>

						<Border x:Name="ContextMenuBorder"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								>

							<ScrollViewer x:Name="ContextMenuScrollViewer"
									Grid.ColumnSpan="2"
									Margin="1,0"
									Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
																																TypeInTargetAssembly={x:Type FrameworkElement}}}"
									>
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas
											Width="0"
											Height="0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle x:Name="OpaqueRect"
												Width="{Binding ActualWidth,
																				ElementName=ContextMenuBorder}"
												Height="{Binding ActualHeight,
																				 ElementName=ContextMenuBorder}"
												Fill="{Binding Background,
																			 ElementName=ContextMenuBorder}"
												/>
									</Canvas>
									<Rectangle
											Margin="1,2"
											Width="7"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											RadiusX="2"
											RadiusY="2"
											/>
									<!--  Fill="#FFF1F1F1"  -->
									<Rectangle
											Margin="8,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons}"
											/>
									<Rectangle
											Margin="9,2,0,2"
											Width="1"
											HorizontalAlignment="Left"
											Fill="{StaticResource ContextMenu.Background.Icons.Divider}"
											/>
									<ItemsPresenter x:Name="ItemsPresenter"
											Margin="{TemplateBinding Padding}"
											KeyboardNavigation.DirectionalNavigation="Cycle"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											/>
								</Grid>
							</ScrollViewer>
						</Border>

						<ControlTemplate.Triggers>

							<Trigger Property="CanContentScroll" Value="False" SourceName="ContextMenuScrollViewer">
								<Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=ContextMenuScrollViewer}" />
								<Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=ContextMenuScrollViewer}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

				</ContextMenu.Template>

				<MenuItem Click="Tv1ContextMenuExpand_OnClick">
					<MenuItem.Style>
						<Style
								TargetType="{x:Type MenuItem}"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="CommandParameter" Value="{Binding ContextCmdExpand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
							<Setter Property="Header" Value="{Binding ContextCmdExpand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
							<Setter Property="IsEnabled" Value="False" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding CanExpand}" />
										<Condition Value="false" Binding="{Binding IsExpanded}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding CanExpand}" />
										<Condition Value="true" Binding="{Binding IsExpanded}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="CommandParameter" Value="{Binding ContextCmdCollapse, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
									<Setter Property="Header" Value="{Binding ContextCmdCollapse, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<Separator Margin="6" />

				<MenuItem
						CommandParameter="{Binding ContextCmdAddBefore,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Add Category Before"
						Style="{StaticResource Tv.context.menuitem.base}"
						Click="Tv1ContextMenuAddBefore_OnClick"
						/>

				<MenuItem
						CommandParameter="{Binding ContextCmdAddAfter,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Add Category After"
						Style="{StaticResource Tv.context.menuitem.base}"
						Click="Tv1ContextMenuAddAfter_OnClick"
						/>
				<MenuItem
						CommandParameter="{Binding ContextCmdAddChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Add Sub-Category"
						Click="Tv1ContextMenuAddChild_OnClick"
						>
					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="IsEnabled" Value="true" />
							<Style.Triggers>
								<DataTrigger Value="true" Binding="{Binding Item.IsLocked}">
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>
								<DataTrigger Value="true" Binding="{Binding IsMaxDepth, Converter={StaticResource PassThru}}">
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<Separator Margin="6" />

				<MenuItem
						CommandParameter="{Binding ContextCmdMoveBefore,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Move Selected Before"
						Style="{StaticResource Tv.context.menuitem.move}"
						Click="Tv1ContextMenuMoveBefore_OnClick"
						/>

				<MenuItem
						CommandParameter="{Binding ContextCmdMoveAfter,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Move Selected After"
						Style="{StaticResource Tv.context.menuitem.move}"
						Click="Tv1ContextMenuMoveAfter_OnClick"
						/>


				<MenuItem
						CommandParameter="{Binding ContextCmdMoveAsChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Move Selected as Sub-category"
						Click="Tv1ContextMenuMoveChild_OnClick"
						>
					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="IsEnabled" Value="False" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding HasSelection, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
										<Condition Value="false" Binding="{Binding IsNodeSelected}" />
										<Condition Value="false" Binding="{Binding Item.IsLocked}" />
										<Condition Value="false" Binding="{Binding IsMaxDepth}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="true" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<Separator Margin="6" />

				<MenuItem
						CommandParameter="{Binding ContextCmdCopy,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Duplicate"
						Click="Tv1ContextMenuSelCopy_OnClick"
						>
					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="IsEnabled" Value="True" />
							<Style.Triggers>
								<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>
								<DataTrigger Value="true" Binding="{Binding Item.IsLocked}">
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

				<MenuItem
						CommandParameter="{Binding ContextCmdCopyAsChild,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Duplicate Selected as a Sub-Category"
						Style="{StaticResource Tv.context.menuitem.clone}"
						Click="Tv1ContextMenuCopySelAsChild_OnClick"
						/>

				<Separator Margin="6" />

				<MenuItem
						CommandParameter="{Binding ContextCmdDelete,
																			 Mode=OneWay,
																			 RelativeSource={RelativeSource FindAncestor,
																																			AncestorType={x:Type local:MainWindowClassifierEditor}}}"
						Header="Delete Category"
						Click="Tv1ContextMenuDelete_OnClick"
						>
					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="IsEnabled" Value="false" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Item.IsLocked}" />
										<Condition Value="false" Binding="{Binding Item.IsFixed}" />
										<Condition Value="false" Binding="{Binding IsMaxDepth}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="true" />
								</MultiDataTrigger>

								<!-- <DataTrigger Binding="{Binding Item.IsLocked}" Value="true"> -->
								<!-- 	<Setter Property="IsEnabled" Value="false" /> -->
								<!-- </DataTrigger> -->
								<!-- <DataTrigger Binding="{Binding Item.IsFixed}" Value="true"> -->
								<!-- 	<Setter Property="IsEnabled" Value="false" /> -->
								<!-- </DataTrigger> -->
							</Style.Triggers>
						</Style>
					</MenuItem.Style>
				</MenuItem>

			</ContextMenu>

			<Style x:Key="Tv1ItemContainerStyle1" x:Name="TvItemContainer"
					TargetType="{x:Type TreeViewItem}"
					>
				<Setter Property="Width" Value="Auto" />
				<Setter Property="ContextMenu" Value="{StaticResource Tv1ContextMenu}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource Tv1ItemFocusVisual}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
				<Setter Property="IsSelected" Value="{Binding IsNodeSelected, Mode=TwoWay}" />
				<Setter Property="Padding" Value="1,0,0,0" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate x:Name="Tv1ItemContainer"
								TargetType="{x:Type TreeViewItem}"
								>

							<Grid
									Margin="0,2,0,0"
									Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"
									>
								<!--  UIElement.MouseLeftButtonUp="UIElement_OnMouseLeftButtonUp"  -->
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" MinWidth="19" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>

								<ToggleButton x:Name="Expander"
										VerticalAlignment="Top"
										IsChecked="{Binding IsExpanded,
																				RelativeSource={RelativeSource TemplatedParent}}"
										IsEnabled="true"
										ClickMode="Press"
										Style="{StaticResource Tv1ExpandCollapseToggleStyle}"
										/>


								<Border x:Name="Bdr"
										Grid.Column="1"
										Grid.Row="0"
										Margin="0,0.5,4.5,0"
										Width="Auto"
										BorderThickness="12,1.5,.5,6"
										CornerRadius="6"
										SnapsToDevicePixels="True"
										>
									<Border.Style>
										<Style TargetType="{x:Type Border}">
											<Setter Property="Background" Value="{StaticResource TreeView.Background}" />

										</Style>
									</Border.Style>
									<Border.BorderBrush>
										<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
											<GradientStop Offset="0.03" Color="{StaticResource TreeViewRow.BorderBrush.Dark.C}" />
											<GradientStop Offset="0.10" Color="{StaticResource TreeViewRow.BorderBrush.Light.C}" />
										</LinearGradientBrush>
									</Border.BorderBrush>



									<Border x:Name="BD"
											Margin="-3.5,-.5,.5,-1"
											BorderThickness="4,0.5,2,0.5"
											BorderBrush="{StaticResource TreeView.Background}"
											CornerRadius="5"
											>
										<Border.Style>
											<Style TargetType="{x:Type Border}">
												<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											</Style>
										</Border.Style>

										<VirtualizingStackPanel
												Grid.Column="1"
												Grid.Row="0"
												>


											<Border x:Name="Bd"
													Padding="{TemplateBinding Padding}"
													BorderThickness="{TemplateBinding BorderThickness}"
													BorderBrush="{TemplateBinding BorderBrush}"
													custom:CustomProperties.GenericBoolOne="{Binding IsContextHighlighted}"
													SnapsToDevicePixels="true"
													>
												<Border.Style>
													<Style TargetType="{x:Type Border}">
														<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
														<Style.Triggers>
															<!-- <Trigger Property="IsMouseOver" Value="true"> -->
															<!-- 	<Setter Property="Background" Value="{StaticResource TreeView.MouseOver.Background}" /> -->
															<!-- </Trigger> -->
															<DataTrigger Value="true" Binding="{Binding Path=(custom:CustomProperties.GenericBoolOne), RelativeSource={RelativeSource Self}}">
																<Setter Property="Background" Value="{StaticResource TreeView.ContextSelected.Background}" />
															</DataTrigger>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter Property="Background" Value="{StaticResource ItemsControl.MouseOver.Background}">
																</Setter>
															</Trigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
												<ContentPresenter x:Name="PART_Header"
														ContentSource="Header"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
														/>
											</Border>

											<ItemsPresenter x:Name="ItemsHost" />
										</VirtualizingStackPanel>
									</Border>

								</Border>

							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
								</Trigger>

								<!-- <Trigger Property="IsSelected" Value="true"> -->
								<!-- 	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" /> -->
								<!-- 	<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.Background}" /> -->
								<!-- </Trigger> -->
								<!-- <MultiTrigger> -->
								<!-- 	<MultiTrigger.Conditions> -->
								<!-- 		<Condition Property="IsMouseOver" Value="true" /> -->
								<!-- 		<Condition Property="IsSelected" Value="true" /> -->
								<!-- 	</MultiTrigger.Conditions> -->
								<!-- 	<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.Selected.MouseOver.Background}" /> -->
								<!-- </MultiTrigger> -->

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  false  -->
										<Condition Property="Selector.IsSelectionActive" Value="false" />
										<!--  true  -->
										<Condition Property="IsSelected" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Selected.InActive.Background}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  true  -->
										<Condition Property="Selector.IsSelectionActive" Value="true" />
										<!--  true  -->
										<Condition Property="IsSelected" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Selected.Active.Background}" />
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
								<!-- <MultiTrigger> -->
								<!-- 	<MultiTrigger.Conditions> -->
								<!-- 		<Condition Property="IsMouseOver" Value="true" /> -->
								<!--  ~1~  true  @1@  -->
								<!-- 	</MultiTrigger.Conditions> -->
								<!-- 	<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.MouseOver.Background}" /> -->
								<!-- </MultiTrigger> -->
								<DataTrigger Value="true" Binding="{Binding Item.CanSelect}">
									<Setter TargetName="PART_Header" Property="IsEnabled" Value="False" />
								</DataTrigger>
								<!-- <Setter Property="TextElement.Foreground" Value="Red" /> -->

								<!-- <Trigger Property="IsEnabled" Value="{Binding Path=TaskbarItemInfo.CanSelect}"> -->
								<!-- 	<Setter Property="TextElement.Foreground" Value="Red" /> -->
								<!-- 	~1~ <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" /> @1@ -->
								<!-- </Trigger> -->

							</ControlTemplate.Triggers>
						</ControlTemplate>


					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Tv1Style1"
					TargetType="{x:Type TreeView}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ItemsControl.Border.Frame}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Padding" Value="1" />

				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeView}">
							<Border x:Name="Bd"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									SnapsToDevicePixels="true"
									>
								<ScrollViewer x:Name="_tv_scrollviewer_"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										CanContentScroll="false"
										Focusable="false"
										HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"  -->
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</Trigger>
								<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
									<Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<!--<Style x:Key="TvxExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Height" Value="9.5" />
				<Setter Property="Padding" Value="0" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Margin="0,0,0,0"
									Width="9.5"
									Height="9.5"
									Padding="0"
									Background="Transparent"
									>
								<Path x:Name="ExpandPath"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="{StaticResource TreeArrow2}"
										Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}"
										RenderTransformOrigin="0.50, 0.50"
										Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
										StrokeThickness="1"
										>
									<Path.RenderTransform>
										<TransformGroup>
											-->
			<!-- <ScaleTransform ScaleX="0.62" ScaleY="0.62"/> -->
			<!--
											<RotateTransform Angle="135" />
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="RenderTransform">
										<Setter.Value>
											<RotateTransform Angle="180" />
										</Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Width" Value="9.5" />
			</Style>-->

			<!--
				<ControlTemplate
			  x:Key="ScrollViewerControlTemplate1"
			  TargetType="{x:Type ScrollViewer}"
			  >
			  <Grid
			  x:Name="Grid"
			  Background="{TemplateBinding Background}"
			  >
			 		<Grid.ColumnDefinitions>
			 			<ColumnDefinition Width="*" />
			 			<ColumnDefinition Width="Auto" />
			 		</Grid.ColumnDefinitions>
			 		<Grid.RowDefinitions>
			 			<RowDefinition Height="*" />
			 			<RowDefinition Height="Auto" />
			 		</Grid.RowDefinitions>
			  <Rectangle
			  x:Name="Corner"
			  Grid.Column="1"
			  Grid.Row="1"
			  Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
			  />
			  <ScrollContentPresenter
			  x:Name="PART_ScrollContentPresenter"
			  Content="{TemplateBinding Content}"
			  Grid.Column="0"
			  Grid.Row="0"
			  Margin="{TemplateBinding Padding}"
			  CanContentScroll="{TemplateBinding CanContentScroll}"
			  CanHorizontallyScroll="False"
			  CanVerticallyScroll="False"
			  ContentTemplate="{TemplateBinding ContentTemplate}"
			  />
			  <ScrollBar
			  x:Name="PART_VerticalScrollBar"
			  Grid.Column="1"
			  Grid.Row="0"
			  AutomationProperties.AutomationId="VerticalScrollBar"
			  Cursor="Arrow"
			  Maximum="{TemplateBinding ScrollableHeight}"
			  Minimum="0"
			  ViewportSize="{TemplateBinding ViewportHeight}"
			  Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
			  Value="{Binding VerticalOffset,
			  Mode=OneWay,
			  RelativeSource={RelativeSource TemplatedParent}}"
			  />
			  <ScrollBar
			  x:Name="PART_HorizontalScrollBar"
			  Grid.Column="0"
			  Grid.Row="1"
			  AutomationProperties.AutomationId="HorizontalScrollBar"
			  Cursor="Arrow"
			  Maximum="{TemplateBinding ScrollableWidth}"
			  Minimum="0"
			  Orientation="Horizontal"
			  ViewportSize="{TemplateBinding ViewportWidth}"
			  Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
			  Value="{Binding HorizontalOffset,
			  Mode=OneWay,
			  RelativeSource={RelativeSource TemplatedParent}}"
			  />
			 	</Grid>
			 </ControlTemplate>
			-->


			<ControlTemplate x:Key="Tv1ScrollViewerControlTemplate1"
					TargetType="{x:Type ScrollViewer}"
					>
				<Grid x:Name="Grid"
						Background="{TemplateBinding Background}"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<Rectangle x:Name="Corner"
							Grid.Column="2"
							Grid.Row="2"
							Fill="black"
							/>
					<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
							Content="{TemplateBinding Content}"
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							/>

					<ScrollBar x:Name="PART_VerticalScrollBar"
							Grid.Column="2"
							Grid.Row="1"
							Margin="0,0,0,0"
							Width="{StaticResource BarSizeOutline}"
							Value="{Binding VerticalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Style="{DynamicResource ScrollBarStyle}"
							/>

					<ScrollBar x:Name="PART_HorizontalScrollBar"
							Grid.Column="1"
							Grid.Row="2"
							Height="{StaticResource BarSizeOutline}"
							MinHeight="{StaticResource BarSize}"
							Value="{Binding HorizontalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							AutomationProperties.AutomationId="HorizontalScrollBar"
							ClipToBounds="True"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Style="{DynamicResource ScrollBarStyle}"
							/>

				</Grid>
			</ControlTemplate>


			<Style x:Key="Tv1Lv1Style"
					TargetType="{x:Type ListView}"
					>
				<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListView}">

							<Border x:Name="Bd"
									Padding="0,5,0,5"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="6"
									SnapsToDevicePixels="true"
									>
								<ScrollViewer
										Margin="0,0,3,0"
										Padding="{TemplateBinding Padding}"
										Focusable="false"
										Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Lv1ScrollViewerTemplate1}"  -->
									<Grid Margin="0">
										<Grid.RowDefinitions>
											<RowDefinition Height="*" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<ItemsPresenter
												Grid.Row="0"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												/>


										<Border x:Name="Bdr"
												Grid.Row="1"
												Margin="5,2,2,4"
												Padding="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Bottom"
												BorderThickness="0"
												BorderBrush="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"
												CornerRadius="2"
												>
											<Border.Style>
												<Style TargetType="{x:Type Border}">
													<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Normal}" />
													<Setter Property="Visibility" Value="Collapsed" />
													<Style.Triggers>
														<DataTrigger Value="0" Binding="{Binding Item.CompareOps.Count, FallbackValue=0}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<DataTrigger Value="{x:Null}" Binding="{Binding Item.CompareOps, FallbackValue={x:Null}}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Disabled}">
															</Setter>
														</Trigger>
													</Style.Triggers>
												</Style>
											</Border.Style>


											<StackPanel Orientation="Horizontal">

												<Label x:Name="Label1"
														Content="No Conditions"
														Width="95"
														Padding="1,1,1,2"
														HorizontalContentAlignment="Center"
														VerticalContentAlignment="Center"
														FontSize="10"
														Style="{StaticResource Label.ItemsControl.Base}"
														/>

											</StackPanel>

										</Border>


									</Grid>
								</ScrollViewer>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsGrouping" Value="true" />
										<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</MultiTrigger>
							</ControlTemplate.Triggers>

						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>




			<Style x:Key="Tv1LvItemContainerStyle1" x:Name="lvItem01"
					TargetType="{x:Type ListViewItem}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Background" Value="{Binding Background, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderBrush" Value="{Binding BorderBrush, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderThickness" Value="{Binding BorderThickness, FallbackValue=1, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Foreground" Value="{Binding Foreground, FallbackValue=White, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, FallbackValue=Center}" />
				<Setter Property="Margin" Value="4,0,4,0" />
				<Setter Property="Padding" Value="{Binding Padding, FallbackValue=0, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<ContentPresenter x:Name="contentPresenterLv"
										Margin="0"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="Stretch"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Center}" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
					</Trigger>
				</Style.Triggers>
			</Style>



			<!--  DataType="{x:Type tree:TreeNode}"  -->
			<HierarchicalDataTemplate x:Key="Tv1ItemTemplate1" x:Name="Hdt1"
					ItemsSource="{Binding ChildrenView}"
					>

				<Grid x:Name="GD1"
						Margin="0,1,2,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition />
					</Grid.RowDefinitions>

					<!--  header  -->

					<DockPanel
							Grid.Column="0"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Margin="0,2,0,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							>
						<Label x:Name="Label2"
								Content="{Binding Item.Title}"
								Margin="15,2,4,0"
								MinWidth="140"
								DockPanel.Dock="Left"
								Style="{StaticResource Label.ItemsControl.Header}"
								/>

						<Label x:Name="Label3"
								Content="{Binding Item.Description}"
								Margin="5,2,4,0"
								MinWidth="140"
								DockPanel.Dock="Left"
								Style="{StaticResource Label.ItemsControl.Header}"
								/>

						<!--  <Label  -->
						<!--  Content="{Binding Item.Depth}"  -->
						<!--  Margin="5,2,4,0"  -->
						<!--  MinWidth="140"  -->
						<!--  DockPanel.Dock="Left"  -->
						<!--  Style="{StaticResource Label.ItemsControl.Header}"  -->
						<!--  />  -->

						<!--  <Label  -->
						<!--  Content="{Binding Item.ComponentName}"  -->
						<!--  Margin="5,2,4,0"  -->
						<!--  MinWidth="140"  -->
						<!--  DockPanel.Dock="Left"  -->
						<!--  Style="{StaticResource Label.ItemsControl.Header}"  -->
						<!--  />  -->



						<Border
								Margin="0,0,5,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>
							<!--  IsEnabled="{Binding Item.IsFixed,  -->
							<!--  Converter={StaticResource NotBool}}"  -->
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background}" />
									<Setter Property="Visibility" Value="Visible" />
									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Collapsed" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxLocked"
									Content="Locked"
									Margin="3,0,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="white"
									BorderBrush="white"
									IsChecked="{Binding Path=Item.IsLocked,
																			Mode=TwoWay}"
									Checked="CkbxLocked_OnChecked"
									Style="{DynamicResource Ckbx1Style}"
									/>
						</Border>

						<Border x:Name="CkbxFixed"
								Margin="0,0,5,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								IsEnabled="{Binding Item.IsFixed,
																		Converter={StaticResource NotBool}}"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background}" />
									<Setter Property="Visibility" Value="Collapsed" />
									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox
									Content="Fixed"
									Margin="3,0,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="white"
									BorderBrush="white"
									IsChecked="{Binding Path=Item.IsFixed,
																			Mode=OneWay}"
									Style="{DynamicResource Ckbx1Style}"
									/>

						</Border>


					</DockPanel>
					<!--  header  -->

					<DockPanel
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="0,0,0,0"
							>

						<ListView x:Name="Lv1"
								Margin="5,4,5,6"
								MaxHeight="110"
								Padding="2,0,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Bottom"
								DockPanel.Dock="Bottom"
								ScrollViewer.HorizontalScrollBarVisibility="Disabled"
								ScrollViewer.VerticalScrollBarVisibility="Auto"
								ItemContainerStyle="{StaticResource Tv1LvItemContainerStyle1}"
								ItemTemplateSelector="{StaticResource Lv1ConditionSelector}"
								ItemsSource="{Binding Item.CompareOps,
																			FallbackValue={x:Null}}"
								Style="{DynamicResource Tv1Lv1Style}"
								/>
						<!--  ItemTemplate="{DynamicResource Lv1DataTemplate0}"  -->
					</DockPanel>
				</Grid>
			</HierarchicalDataTemplate>

			<!--
			<HierarchicalDataTemplate x:Key="TvxItemTemplate"
					DataType="{x:Type tree:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>
				<Border x:Name="GD1"
						Margin="0,0,0,0"
						Width="Auto"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						BorderThickness="1"
						BorderBrush="Transparent"
						>
					<Label x:Name="Label6"
							Content="{Binding Item.Title}"
							Margin="0,0,0,0"
							Padding="0,2,0,3"
							HorizontalAlignment="Stretch"
							FontSize="9"
							Foreground="White"
							/>

				</Border>
			</HierarchicalDataTemplate>
			-->

			<DataTemplate x:Key="Lv1DataTemplate0"
					DataType="treeSupport:ComparisonOperation"
					>

				<StackPanel Orientation="Vertical">

					<DockPanel
							Margin="62,4,0,4"
							LastChildFill="False"
							>

						<Border
								Width="{StaticResource LogicalHorizBarWidth}"
								Height="5"
								Padding="0"
								HorizontalAlignment="Left"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								Style="{StaticResource ItemsControl.Border.Logical.Background}"
								/>

						<Label x:Name="Label10"
								Content="{Binding LogicalCompareString,
																	FallbackValue='And'}"
								Width="34"
								HorizontalContentAlignment="Center"
								VerticalContentAlignment="Center"
								Style="{StaticResource Label.ItemsControl.Condition}"
								/>

						<Border
								Width="{StaticResource LogicalHorizBarWidth}"
								Height="5"
								Padding="0"
								HorizontalAlignment="Left"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								Style="{StaticResource ItemsControl.Border.Logical.Background}"
								/>

						<DockPanel.Style>
							<Style TargetType="DockPanel">
								<Setter Property="Visibility" Value="Visible" />
								<Style.Triggers>
									<DataTrigger Value="true" Binding="{Binding Path=IsFirstCompOp}">
										<Setter Property="Visibility" Value="Collapsed" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</DockPanel.Style>

					</DockPanel>

					<DockPanel
							Margin="0"
							HorizontalAlignment="left"
							>

						<Border x:Name="Bdr1"
								Margin="0"
								Width="100"
								Padding="0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="Label7"
									Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}},
																		Path=DataContext.Item.ComponentName,
																		Mode=OneWay}"
									HorizontalAlignment="Center"
									Style="{StaticResource Label.Condition.ComponentName}"
									/>
						</Border>
						<!--  Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}},  -->
						<!--  Path=Foreground}"  -->


						<Border x:Name="Bdr2"
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="Label8"
									Content="{Binding ValueCompareString}"
									Padding="20,0,20,0"
									Style="{StaticResource Label.Condition.Condition}"
									/>
						</Border>


						<Border
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="Label9"
									Content="{Binding CompareValue}"
									MinWidth="50"
									Padding="16,0,16,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.Value}"
									/>
						</Border>

						<Border
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label
									Content="{Binding CompareComponentIndex}"
									MinWidth="50"
									Padding="16,0,16,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.Value}"
									/>
						</Border>

						<Border
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Disabled}" />
											<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label
									Content="{Binding CompareComponentName,
																		Mode=OneWay}"
									MinWidth="50"
									Padding="16,0,16,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.ComponentName}"
									/>
						</Border>

						<!--<Border
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Disabled}" />
											<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label
									Content="{Binding LogicalComparisonOpCode,
																		Mode=OneWay}"
									MinWidth="50"
									Padding="16,0,16,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.ComponentName}"
									/>
						</Border>

						<Border
								Margin="5,0,0,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Disabled}" />
											<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label
									Content="{Binding ValueComparisonOpCode,
																		Mode=OneWay}"
									MinWidth="50"
									Padding="16,0,16,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.ComponentName}"
									/>
						</Border>-->


					</DockPanel>
				</StackPanel>

			</DataTemplate>


			<!--
			<DataTemplate x:Key="Lv1DataTemplate1"
					DataType="tree:ComparisonOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>

					<Border x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							BorderThickness="0"
							>
						<Border.Style>
							<Style TargetType="Border">
								<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Normal}" />
								<Style.Triggers>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Disabled}" />
									</Trigger>
								</Style.Triggers>
							</Style>
						</Border.Style>

						<Label x:Name="Label7"
								Content="{Binding Path=Item.ComponentName,
																	FallbackValue='component name'}"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>
					-->
			<!--  DataContext="{Binding DataContext,  -->
			<!--  RelativeSource={RelativeSource FindAncestor,  -->
			<!--  AncestorType={x:Type ListView}}}"  -->
			<!--  Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}},  -->
			<!--  Path=Foreground}"  -->
			<!--


					<Border x:Name="Bdr2"
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							BorderThickness="0"
							>
						<Border.Style>
							<Style TargetType="Border">
								<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
								<Style.Triggers>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" />
									</Trigger>
								</Style.Triggers>
							</Style>
						</Border.Style>

						<Label x:Name="Label8"
								Content="{Binding ValueCompareString}"
								Padding="20,0,20,0"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>


					<Border
							Margin="5,0,0,0"
							CornerRadius="3"
							DockPanel.Dock="left"
							BorderThickness="0"
							>
						<Border.Style>
							<Style TargetType="Border">
								<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
								<Style.Triggers>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
									</Trigger>
								</Style.Triggers>
							</Style>
						</Border.Style>

						<Label x:Name="Label9"
								Content="{Binding CompareValue}"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition}"
								/>
					</Border>


				</DockPanel>
			</DataTemplate>


			-->
			<!--  logical operator (template 2)  -->
			<!--

			<DataTemplate x:Key="Lv1DataTemplate2"
					DataType="tree:ComparisonOperation"
					>

				<DockPanel x:Name="Lv1DpLogical"
						Margin="53,0,0,0"
						LastChildFill="False"
						>

					<Border
							Width="{StaticResource LogicalHorizBarWidth}"
							Height="5"
							Padding="0"
							HorizontalAlignment="Stretch"
							CornerRadius="3"
							DockPanel.Dock="Left"
							Background="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"
							BorderThickness="0"
							Style="{StaticResource ItemsControl.Border.Logical.Background}"
							/>
					-->
			<!--  Background="{StaticResource ListView.Item.Background.Logical}"  -->
			<!--

					<Label x:Name="Label10"
							Content="{Binding ValueCompareString}"
							Width="34"
							HorizontalContentAlignment="Center"
							VerticalContentAlignment="Center"
							Style="{StaticResource Label.ItemsControl.Base}"
							/>

					<Border
							Width="{StaticResource LogicalHorizBarWidth}"
							Height="5"
							Padding="0"
							HorizontalAlignment="Stretch"
							CornerRadius="3"
							DockPanel.Dock="Left"
							BorderThickness="0"
							Style="{StaticResource ItemsControl.Border.Logical.Background}"
							/>
					-->
			<!--  Background="{StaticResource ListView.Item.Background.Logical}"  -->
			<!--
				</DockPanel>
			</DataTemplate>
			-->

			<!--  error  -->
			<DataTemplate x:Key="Lv1DataTemplate3"
					DataType="treeSupport:ComparisonOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label11"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border x:Name="Bdr2"
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label12"
								Content="Is NoOp"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="left"
							>

						<Label x:Name="Label13"
								Content="This is an Error"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>




			<Style x:Key="Lv2ItemContainerStyle1"
					TargetType="{x:Type ListViewItem}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Background" Value="{Binding Background, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderBrush" Value="{Binding BorderBrush, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderThickness" Value="{Binding BorderThickness, FallbackValue=1, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Foreground" Value="{Binding Foreground, FallbackValue=White, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, FallbackValue=Center}" />
				<Setter Property="Margin" Value="4,0,4,0" />
				<Setter Property="Padding" Value="{Binding Padding, FallbackValue=0, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<ContentPresenter x:Name="contentPresenterLv"
										Margin="{TemplateBinding Margin}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Center}" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
					</Trigger>
				</Style.Triggers>
			</Style>



			<!--  normal  -->
			<DataTemplate x:Key="Lv2DataTemplate0"
					DataType="treeSupport:ComparisonOperation"
					>

				<Border x:Name="DtBorder1"
						Margin="0,3,0,7"
						Padding="0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						BorderThickness="0,0.5,0,0"
						BorderBrush="White"
						d:DesignWidth="450"
						>

					<Grid x:Name="DtGrid1"
							Margin="2,1,2,1"
							HorizontalAlignment="left"
							VerticalAlignment="Stretch"
							>
						<Grid.RowDefinitions>
							<!-- <RowDefinition x:Name="DtGrid1R1" Height="28" /> -->
							<RowDefinition Height="auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="28" />
							<ColumnDefinition Width="74" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<Button x:Name="BtnDeleteCondition"
								Grid.Column="0"
								Grid.Row="0"
								Grid.RowSpan="2"
								Margin="0,0,0,0"
								Width="20"
								Height="20"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								BorderThickness="0"
								Click="BtnDeleteCondition_OnClick"
								>
							<Button.Effect>
								<DropShadowEffect />
							</Button.Effect>
							<Button.Style>
								<Style
										TargetType="Button"
										BasedOn="{StaticResource Button.Condition.Style}"
										>
									<Setter Property="Background" Value="{StaticResource Button.Static.Delete.Background}" />
									<Setter Property="Foreground" Value="{StaticResource Button.Static.Delete.Icon}" />

								</Style>
							</Button.Style>
							<Button.Content>
								<Viewbox x:Name="VbxTrash"
										Margin="0,0,2,1"
										Width="16"
										Height="16"
										Child="{StaticResource DeleteIcon}"
										/>
								<!-- </Grid> -->
							</Button.Content>
						</Button>

						<Border x:Name="BorderCkBx"
								Grid.Column="1"
								Grid.Row="0"
								Grid.RowSpan="2"
								Margin="0,0,0,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="center"
								Background="{StaticResource CheckBox.Background}"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>

							<CheckBox x:Name="CkbxDisable"
									Content="Disable"
									Margin="3,0,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="white"
									BorderBrush="white"
									IsChecked="{Binding Path=IsDisabled,
																			Mode=TwoWay}"
									Checked="CkbxDisable_OnChecked"
									Style="{DynamicResource Ckbx1Style}"
									/>
						</Border>


						<DockPanel x:Name="Lv2DpLogical"
								Grid.Column="2"
								Grid.Row="0"
								Margin="0,8,0,7"
								>

							<Grid
									Margin="0,0,0,0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Center"
									>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="43" />
									<ColumnDefinition Width="*" />

									<ColumnDefinition Width="auto" />
								</Grid.ColumnDefinitions>

								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>


								<StackPanel
										Grid.Column="1"
										Grid.Row="0"
										Margin="0,0,0,0"
										Orientation="Horizontal"
										>

									<Border
											Margin="0,0,0,0"
											Width="{StaticResource LogicalHorizBarWidth}"
											Height="5"
											Padding="0,0,0,0"
											HorizontalAlignment="Stretch"
											BorderThickness="0"
											CornerRadius="3"
											DockPanel.Dock="left"
											Style="{StaticResource ItemsControl.Border.Logical.Background}"
											>
									</Border>


									<ComboBox x:Name="Cbx2"
											Margin="7,0,7,0"
											Width="70"
											Height="14"
											HorizontalAlignment="Center"
											FontSize="10"
											BorderThickness="2"
											IsEditable="False"
											custom:CustomProperties.DropDownWidth="90.0"
											DisplayMemberPath="Name"
											DockPanel.Dock="left"
											MaxDropDownHeight="100"
											SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,
																																						 AncestorType={x:Type ListViewItem}},
																							Path=DataContext.LogicalCompOpCode,
																							Mode=TwoWay}"
											ItemContainerStyle="{DynamicResource ComboBoxItem1}"
											ItemsSource="{Binding Source={x:Static treeSupport:CompareOperations.LogicalCompareOps}}"
											FocusVisualStyle="{x:Null}"
											Template="{StaticResource ComboBoxTemplate1}"
											custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
											custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
											custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
											>
										<ComboBox.Style>
											<Style
													TargetType="ComboBox"
													BasedOn="{StaticResource Cbox1Style1}"
													>
												<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
												<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
											</Style>
										</ComboBox.Style>
									</ComboBox>

									<Border
											Width="{StaticResource LogicalHorizBarWidth}"
											Height="5"
											Padding="0"
											HorizontalAlignment="right"
											BorderThickness="0"
											CornerRadius="3"
											DockPanel.Dock="right"
											Style="{StaticResource ItemsControl.Border.Logical.Background}"
											/>

									<StackPanel.Style>
										<Style TargetType="StackPanel">
											<Style.Triggers>
												<DataTrigger Value="True" Binding="{Binding Path=IsDisabled}">
													<Setter Property="IsEnabled" Value="false" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</StackPanel.Style>
								</StackPanel>
							</Grid>

						</DockPanel>

						<DockPanel x:Name="DpCompare"
								Grid.Column="2"
								Grid.Row="1"
								Margin="0,3,0,0"
								>

							<!--<Border x:Name="Bdr1"
									Margin="5,0,0,0"
									Width="100"
									Padding="0"
									BorderThickness="0"
									CornerRadius="3"
									DockPanel.Dock="Left"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource Border.Base}"
											>
										<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Normal}" />
									</Style>
								</Border.Style>

								<Label x:Name="LblComponentName2"
										Content="{Binding DataContext.Item.ComponentName,
																			RelativeSource={RelativeSource AncestorType={x:Type ListView}},
																			Mode=OneWay,
																			FallbackValue='component name'}"
										HorizontalAlignment="Center"
										Background="Transparent"
										Style="{StaticResource Label.Condition.ComponentName}"
								>

								</Label>
							</Border>-->

								
							<ComboBox
									x:Name="Cbx0"
									Margin="5,0,0,0"
									Padding="8,2,2,2"
									FontSize="10"
									BorderThickness="2"
									IsEditable="False"
									custom:CustomProperties.DropDownWidth="100.0"
									MaxDropDownHeight="150"
									HorizontalAlignment="Left"
									DisplayMemberPath="Name"
									SelectedIndex="{Binding CompareComponentIndex, FallbackValue='1', Mode=TwoWay}"
									ItemsSource="{Binding Source={x:Static file:FileNameSheetIdentifiers.ShtIds}, 
										Path=SheetNumberComponentTitles}"
									ItemContainerStyle="{DynamicResource ComboBoxItem1}"
									FocusVisualStyle="{x:Null}"
									Template="{StaticResource ComboBoxTemplate1}"
									custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.PrimeOption.Background.DropDown}"
									custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.PrimeOption.Background.MouseOver}"
									custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.PrimeOption.Background.Disabled}"
							>
								<ComboBox.Style>
									<Style
											TargetType="ComboBox"
											BasedOn="{StaticResource Cbox1Style1}"
									>
										<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
										<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
									</Style>
								</ComboBox.Style>
							</ComboBox>



							<ComboBox x:Name="Cbx1"
									Margin="5,0,0,0"
									Padding="8,2,2,2"
									HorizontalAlignment="Left"
									d:DataContext="{Binding Source={x:Static treeSupport:CompareOperations.ValueCompareOps}}"
									FontSize="10"
									BorderThickness="2"
									IsEditable="False"
									custom:CustomProperties.DropDownWidth="180.0"
									DisplayMemberPath="Name"
									MaxDropDownHeight="100"
									SelectedIndex="{Binding ValueCompOpCode,
																					FallbackValue='1'}"
									ItemContainerStyle="{DynamicResource ComboBoxItem1}"
									ItemsSource="{Binding Source={x:Static treeSupport:CompareOperations.ValueCompareOps}}"
									FocusVisualStyle="{x:Null}"
									Template="{StaticResource ComboBoxTemplate1}"
									custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
									custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
									custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
									>

								<ComboBox.Style>
									<Style
											TargetType="ComboBox"
											BasedOn="{StaticResource Cbox1Style1}"
											>
										<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
										<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

									</Style>
								</ComboBox.Style>
							</ComboBox>


							<!--  value  -->
							<Border x:Name="Bdr2"
									Margin="5,0,0,0"
									BorderThickness="0"
									CornerRadius="3"
									DockPanel.Dock="left"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource Border.Base}"
											>
										<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									</Style>
								</Border.Style>

								<TextBox x:Name="Tbx1"
										MinWidth="50"
										Padding="16,0,16,0"
										VerticalAlignment="Center"
										HorizontalContentAlignment="Center"
										FontSize="10"
										Background="Transparent"
										BorderThickness="0"
										res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
										res:TextBoxBehavior.SelectAllTextOnFocus="True"
										Text="{Binding CompareValue,
																	 Mode=TwoWay,
																	 FallbackValue='1'}"
										>
									<TextBox.Style>
										<Style
												TargetType="TextBox"
												BasedOn="{StaticResource Control.Base}"
												>
											<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

											<Style.Triggers>
												<Trigger Property="IsEnabled" Value="False">
													<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}">
													</Setter>
												</Trigger>
											</Style.Triggers>

										</Style>
									</TextBox.Style>
								</TextBox>
							</Border>


						</DockPanel>
					</Grid>
				</Border>

				<DataTemplate.Triggers>

					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding Path=IsFirstCompOp}">
						<Setter TargetName="BorderCkBx" Property="Visibility" Value="Hidden" />
						<Setter TargetName="BtnDeleteCondition" Property="Visibility" Value="Hidden" />
						<Setter TargetName="DtBorder1" Property="BorderThickness" Value="0" />
						<Setter TargetName="Lv2DpLogical" Property="Visibility" Value="Collapsed" />
						<!-- <Setter TargetName="DtGrid1R1" Property="Height" Value="0" /> -->
					</DataTrigger>

					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding Path=IsDisabled}">
						<Setter TargetName="Bdr2" Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
						<Setter TargetName="DpCompare" Property="IsEnabled" Value="false" />

						<!-- <Setter TargetName="Bdr1" Property="Background" Value="{StaticResource ItemsControl.Title.Background.Disabled}" /> -->
						<!-- <Setter TargetName="Tbx1" Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>



			<!--    -->
			<!--  ~1~  normal  @1@  -->
			<!--  <DataTemplate x:Key="Lv2DataTemplate1"  -->
			<!--  DataType="tree:ComparisonOperation"  -->
			<!--  >  -->
			<!--    -->
			<!--  <Border x:Name="DtBorder1"  -->
			<!--  Margin="0,3,0,7"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="Stretch"  -->
			<!--  VerticalAlignment="Stretch"  -->
			<!--  d:DesignWidth="450"  -->
			<!--  BorderThickness="0,0.5,0,0"  -->
			<!--  BorderBrush="White"  -->
			<!--  >  -->
			<!--    -->
			<!--  <Grid x:Name="DtGrid1"  -->
			<!--  Margin="2,1,2,1"  -->
			<!--  HorizontalAlignment="left"  -->
			<!--  VerticalAlignment="Stretch"  -->
			<!--  >  -->
			<!-- 			<Grid.RowDefinitions> -->
			<!-- 				<RowDefinition x:Name="DtGrid1R1" Height="28" /> -->
			<!-- 				<RowDefinition Height="*" /> -->
			<!-- 			</Grid.RowDefinitions> -->
			<!--    -->
			<!-- 			<Grid.ColumnDefinitions> -->
			<!-- 				<ColumnDefinition Width="28" /> -->
			<!-- 				<ColumnDefinition Width="74" /> -->
			<!-- 				<ColumnDefinition Width="*" /> -->
			<!-- 			</Grid.ColumnDefinitions> -->
			<!--    -->
			<!--  <Button x:Name="BtnDeleteCondition"  -->
			<!--  Grid.Column="0"  -->
			<!--  Grid.Row="0"  -->
			<!--  Grid.RowSpan="2"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Width="20"  -->
			<!--  Height="20"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  VerticalAlignment="Center"  -->
			<!--  BorderThickness="0"  -->
			<!--  Click="BtnDeleteCondition_OnClick"  -->
			<!--  >  -->
			<!-- 				<Button.Effect> -->
			<!-- 					<DropShadowEffect /> -->
			<!-- 				</Button.Effect> -->
			<!-- 				<Button.Style> -->
			<!--  <Style  -->
			<!--  TargetType="Button"  -->
			<!--  BasedOn="{StaticResource Button.Condition.Style}"  -->
			<!--  >  -->
			<!-- 						<Setter Property="Background" Value="{StaticResource Button.Static.Delete.Background}" /> -->
			<!-- 						<Setter Property="Foreground" Value="{StaticResource Button.Static.Delete.Icon}" /> -->
			<!--    -->
			<!-- 					</Style> -->
			<!-- 				</Button.Style> -->
			<!-- 				<Button.Content> -->
			<!--  <Viewbox x:Name="VbxTrash"  -->
			<!--  Margin="0,0,2,1"  -->
			<!--  Width="16"  -->
			<!--  Height="16"  -->
			<!--  Child="{StaticResource DeleteIcon}"  -->
			<!--  />  -->
			<!-- 					~1~ </Grid> @1@ -->
			<!-- 				</Button.Content> -->
			<!-- 			</Button> -->
			<!--    -->
			<!--  <Border x:Name="BorderCkBx"  -->
			<!--  Grid.Column="1"  -->
			<!--  Grid.Row="0"  -->
			<!--  Grid.RowSpan="2"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Width="55"  -->
			<!--  Height="18"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="center"  -->
			<!--  CornerRadius="3"  -->
			<!--  DockPanel.Dock="Left"  -->
			<!--  Background="{StaticResource CheckBox.Background}"  -->
			<!--  BorderThickness="0"  -->
			<!--  >  -->
			<!-- 				<Border.Effect> -->
			<!-- 					<DropShadowEffect /> -->
			<!-- 				</Border.Effect> -->
			<!--    -->
			<!--  <CheckBox x:Name="CkbxDisable"  -->
			<!--  Content="Disable"  -->
			<!--  Margin="3,0,0,0"  -->
			<!--  Height="12"  -->
			<!--  VerticalAlignment="Center"  -->
			<!--  FontSize="10"  -->
			<!--  Checked="CkbxDisable_OnChecked"  -->
			<!--  Background="Transparent"  -->
			<!--  Foreground="white"  -->
			<!--  BorderBrush="white"  -->
			<!--  IsChecked="{Binding Path=IsDisabled,  -->
			<!--  Mode=TwoWay}"  -->
			<!--  Style="{DynamicResource Ckbx1Style}"  -->
			<!--  />  -->
			<!-- 			</Border> -->
			<!--    -->
			<!--  <DockPanel x:Name="DpCompare"  -->
			<!--  Grid.Column="2"  -->
			<!--  Grid.Row="1"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  >  -->
			<!--    -->
			<!--  <Border x:Name="Bdr1"  -->
			<!--  Margin="5,0,0,0"  -->
			<!--  Width="100"  -->
			<!--  Padding="0"  -->
			<!--  CornerRadius="3"  -->
			<!--  DockPanel.Dock="Left"  -->
			<!--  BorderThickness="0"  -->
			<!--  >  -->
			<!-- 					<Border.Style> -->
			<!--  <Style  -->
			<!--  TargetType="Border"  -->
			<!--  BasedOn="{StaticResource Border.Base}"  -->
			<!--  >  -->
			<!-- 							<Setter Property="Background" Value="{StaticResource ItemsControl.Title.Background.Normal}" /> -->
			<!-- 						</Style> -->
			<!-- 					</Border.Style> -->
			<!--    -->
			<!--  <Label x:Name="LblComponentName2"  -->
			<!--  Content="{Binding Item.ComponentName,  -->
			<!--  FallbackValue='component name'}"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  d:DataContext="{Binding DataContext,  -->
			<!--  RelativeSource={RelativeSource FindAncestor,  -->
			<!--  AncestorType={x:Type ListView}}}"  -->
			<!--  DataContext="{Binding DataContext,  -->
			<!--  RelativeSource={RelativeSource FindAncestor,  -->
			<!--  AncestorType={x:Type ListView}}}"  -->
			<!--  Background="Transparent"  -->
			<!--  Style="{StaticResource Label.Condition}"  -->
			<!--  >  -->
			<!--    -->
			<!--    -->
			<!-- 					</Label> -->
			<!-- 				</Border> -->
			<!--    -->
			<!--  <ComboBox x:Name="Cbx1"  -->
			<!--  Margin="5,0,0,0"  -->
			<!--  Padding="8,2,2,2"  -->
			<!--  HorizontalAlignment="Left"  -->
			<!--  FontSize="10"  -->
			<!--  custom:CustomProperties.DropDownWidth="180.0"  -->
			<!--  d:DataContext="{Binding Source={x:Static tree:CompareOperations.ValueCompareOps}}"  -->
			<!--  DisplayMemberPath="Name"  -->
			<!--  MaxDropDownHeight="100"  -->
			<!--  SelectedIndex="{Binding CompareOpCode,  -->
			<!--  FallbackValue='1'}"  -->
			<!--  BorderThickness="2"  -->
			<!--  IsEditable="False"  -->
			<!--  ItemContainerStyle="{DynamicResource ComboBoxItem1}"  -->
			<!--  ItemsSource="{Binding Source={x:Static tree:CompareOperations.ValueCompareOps}}"  -->
			<!--  FocusVisualStyle="{x:Null}"  -->
			<!--  >  -->
			<!--    -->
			<!-- 					<ComboBox.Style> -->
			<!--  <Style  -->
			<!--  TargetType="ComboBox"  -->
			<!--  BasedOn="{StaticResource Cbox1Style1}"  -->
			<!--  >  -->
			<!-- 							<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->
			<!-- 							<Setter Property="Foreground" Value="White" /> -->
			<!-- 							<Style.Triggers> -->
			<!-- 								<Trigger Property="IsEnabled" Value="false"> -->
			<!-- 									<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
			<!-- 									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->
			<!-- 								</Trigger> -->
			<!--    -->
			<!-- 							</Style.Triggers> -->
			<!-- 						</Style> -->
			<!-- 					</ComboBox.Style> -->
			<!-- 				</ComboBox> -->
			<!--    -->
			<!--    -->
			<!--  ~1~  value  @1@  -->
			<!--  <Border x:Name="Bdr2"  -->
			<!--  Margin="5,0,0,0"  -->
			<!--  CornerRadius="3"  -->
			<!--  DockPanel.Dock="left"  -->
			<!--  BorderThickness="0"  -->
			<!--  >  -->
			<!-- 					<Border.Style> -->
			<!--  <Style  -->
			<!--  TargetType="Border"  -->
			<!--  BasedOn="{StaticResource Border.Base}"  -->
			<!--  >  -->
			<!-- 							<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" /> -->
			<!-- 						</Style> -->
			<!-- 					</Border.Style> -->
			<!--    -->
			<!--  <TextBox x:Name="Tbx1"  -->
			<!--  MinWidth="50 "  -->
			<!--  Padding="16,0,16,0"  -->
			<!--  VerticalAlignment="Center"  -->
			<!--  HorizontalContentAlignment="Center"  -->
			<!--  FontSize="10"  -->
			<!--  res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"  -->
			<!--  res:TextBoxBehavior.SelectAllTextOnFocus="True"  -->
			<!--  Text="{Binding CompareValue,  -->
			<!--  Mode=TwoWay,  -->
			<!--  FallbackValue='1'}"  -->
			<!--  Background="Transparent"  -->
			<!--  BorderThickness="0"  -->
			<!--  >  -->
			<!-- 						<TextBox.Style> -->
			<!--  <Style  -->
			<!--  TargetType="TextBox"  -->
			<!--  BasedOn="{StaticResource Control.Base}"  -->
			<!--  >  -->
			<!-- 								<Setter Property="Foreground" Value="White" /> -->
			<!-- 								<Setter Property="Background" Value="Transparent" /> -->
			<!--    -->
			<!-- 							</Style> -->
			<!-- 						</TextBox.Style> -->
			<!-- 					</TextBox> -->
			<!-- 				</Border> -->
			<!-- 			</DockPanel> -->
			<!-- 		</Grid> -->
			<!-- 	</Border> -->
			<!--    -->
			<!-- 	<DataTemplate.Triggers> -->
			<!--    -->
			<!--  ~1~  true  @1@  -->
			<!-- 		<DataTrigger Binding="{Binding Path=IsFirstCompOp}" Value="True"> -->
			<!-- 			<Setter TargetName="BorderCkBx" Property="Visibility" Value="Hidden" /> -->
			<!-- 			<Setter TargetName="BtnDeleteCondition" Property="Visibility" Value="Hidden" /> -->
			<!-- 			<Setter TargetName="DtBorder1" Property="BorderThickness" Value="0" /> -->
			<!-- 			<Setter TargetName="DtGrid1R1" Property="Height" Value="0" /> -->
			<!-- 		</DataTrigger> -->
			<!--    -->
			<!--  ~1~  true  @1@  -->
			<!-- 		<DataTrigger Binding="{Binding Path=IsDisabled}" Value="True"> -->
			<!-- 			<Setter TargetName="Bdr1" Property="Background" Value="{StaticResource ItemsControl.Title.Background.Disabled}" /> -->
			<!-- 			<Setter TargetName="Bdr2" Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" /> -->
			<!-- 			<Setter TargetName="DpCompare" Property="IsEnabled" Value="false" /> -->
			<!-- 			<Setter TargetName="LblComponentName2" Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
			<!-- 			<Setter TargetName="Tbx1" Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
			<!-- 		</DataTrigger> -->
			<!-- 	</DataTemplate.Triggers> -->
			<!-- </DataTemplate> -->
			<!--    -->
			<!--    -->
			<!--    -->
			<!--    -->
			<!--    -->
			<!--  <DataTemplate x:Key="Lv2DataTemplate2"  -->
			<!--  DataType="tree:ComparisonOperation"  -->
			<!--  >  -->
			<!--    -->
			<!--  <Grid  -->
			<!--  Margin="0,8,0,-32"  -->
			<!--  HorizontalAlignment="Stretch"  -->
			<!--  >  -->
			<!--    -->
			<!-- 		<Grid.ColumnDefinitions> -->
			<!-- 			<ColumnDefinition Width="162" /> -->
			<!-- 			<ColumnDefinition Width="150" /> -->
			<!--    -->
			<!-- 			<ColumnDefinition Width="auto" /> -->
			<!-- 		</Grid.ColumnDefinitions> -->
			<!--    -->
			<!-- 		<Grid.RowDefinitions> -->
			<!-- 			<RowDefinition Height="Auto" /> -->
			<!-- 		</Grid.RowDefinitions> -->
			<!--    -->
			<!--    -->
			<!--  <StackPanel  -->
			<!--  Grid.Column="1"  -->
			<!--  Grid.Row="0"  -->
			<!--  Orientation="Horizontal"  -->
			<!--  >  -->
			<!--  <Border  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Width="{StaticResource LogicalHorizBarWidth}"  -->
			<!--  Height="5"  -->
			<!--  Padding="0,0,0,0"  -->
			<!--  HorizontalAlignment="Stretch"  -->
			<!--  CornerRadius="3"  -->
			<!--  DockPanel.Dock="left"  -->
			<!--  Background="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"  -->
			<!--  BorderThickness="0"  -->
			<!--  >  -->
			<!-- 			</Border> -->
			<!--    -->
			<!--    -->
			<!--  <ComboBox x:Name="Cbx2"  -->
			<!--  Margin="7,2,7,6"  -->
			<!--  Width="70"  -->
			<!--  Height="14"  -->
			<!--  HorizontalAlignment="Center"  -->
			<!--  FontSize="10"  -->
			<!--  custom:CustomProperties.DropDownWidth="90.0"  -->
			<!--  DisplayMemberPath="Name"  -->
			<!--  DockPanel.Dock="left"  -->
			<!--  MaxDropDownHeight="100"  -->
			<!--  SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor,  -->
			<!--  AncestorType={x:Type ListViewItem}},  -->
			<!--  Path=DataContext.CompareOpCode,  -->
			<!--  Mode=TwoWay}"  -->
			<!--  BorderThickness="2"  -->
			<!--  IsEditable="False"  -->
			<!--  ItemContainerStyle="{DynamicResource ComboBoxItem1}"  -->
			<!--  ItemsSource="{Binding Source={x:Static tree:CompareOperations.LogicalCompareOps}}"  -->
			<!--  FocusVisualStyle="{x:Null}"  -->
			<!--  >  -->
			<!-- 				<ComboBox.Style> -->
			<!--  <Style  -->
			<!--  TargetType="ComboBox"  -->
			<!--  BasedOn="{StaticResource Cbox1Style1}"  -->
			<!--  >  -->
			<!-- 						<Setter Property="Background" Value="{StaticResource ListView.Item.Background}" /> -->
			<!-- 						<Setter Property="Foreground" Value="White" /> -->
			<!-- 					</Style> -->
			<!-- 				</ComboBox.Style> -->
			<!--    -->
			<!-- 			</ComboBox> -->
			<!--    -->
			<!--    -->
			<!--  <Border  -->
			<!--  Width="{StaticResource LogicalHorizBarWidth}"  -->
			<!--  Height="5"  -->
			<!--  Padding="0"  -->
			<!--  HorizontalAlignment="right"  -->
			<!--  CornerRadius="3"  -->
			<!--  DockPanel.Dock="right"  -->
			<!--  Background="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"  -->
			<!--  BorderThickness="0"  -->
			<!--  />  -->
			<!-- 		</StackPanel> -->
			<!-- 	</Grid> -->
			<!--    -->
			<!--    -->
			<!-- </DataTemplate> -->


			<!--  logical condition  -->
			<DataTemplate x:Key="Lv2DataTemplate3"
					DataType="treeSupport:ComparisonOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label17"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border x:Name="Bdr2"
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label18"
								Content="Is NoOp"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="left"
							>

						<Label x:Name="Label19"
								Content="This is an Error"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>


		</ResourceDictionary>
	</Window.Resources>

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="4*" MinWidth="400" />
			<ColumnDefinition x:Name="GrdMainCol2" Width="4*" MinWidth="400" />
			<ColumnDefinition Width="0" />
			<ColumnDefinition Width="0" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition />
			<RowDefinition Height="Auto" />

		</Grid.RowDefinitions>

		<Grid
				Grid.Column="0"
				Grid.Row="2"
				Margin="5"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				>

			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="00" />
			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="22" />
				<RowDefinition Height="20" />
				<RowDefinition Height="20" />
				<RowDefinition Height="20" />
				<RowDefinition Height="*" />

			</Grid.RowDefinitions>

			<Label x:Name="Label29"
					Content="Settings"
					Grid.Column="0"
					Grid.Row="0"
					Margin="0,0,4,0"
					Padding="5,0,0,3"
					VerticalAlignment="Top"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<DockPanel
					Grid.Column="0"
					Grid.Row="1"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label31"
							Content="Sheet Organization Setting Folder"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>
				<!--    -->
				<!--  <Border  -->
				<!--  Margin="5,0,0,0"  -->
				<!--  HorizontalAlignment="Stretch"  -->
				<!--  Style="{StaticResource Border.Settings.Button}"  -->
				<!--  >  -->
				<!-- 	<Border.Background> -->
				<!-- 		<SolidColorBrush Color="{StaticResource Amber.200}" /> -->
				<!-- 	</Border.Background> -->
				<!--  <TextBox x:Name="tbx33"  -->
				<!--  HorizontalAlignment="Stretch"  -->
				<!--  HorizontalScrollBarVisibility="Hidden"  -->
				<!--  MaxLines="1"  -->
				<!--  MinLines="1"  -->
				<!--  ScrollViewer.CanContentScroll="True"  -->
				<!--  Text="{Binding ElementName=MainWinClsfrEd,  -->
				<!--  Path=ClassificationFile.FileName,  -->
				<!--  Mode=OneWay,  -->
				<!--  FallbackValue='FileName'}"  -->
				<!--  VerticalScrollBarVisibility="Disabled"  -->
				<!--  IsReadOnly="True"  -->
				<!--  Style="{StaticResource TextBox.Setting.Value}"  -->
				<!--  >  -->
				<!--    -->
				<!-- 	</TextBox> -->
				<!-- </Border> -->

				<Border
						Margin="5,0,5,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>

					<TextBox x:Name="tbx32"
							HorizontalAlignment="Stretch"
							DataContext="{Binding ElementName=MainWinClsfrEd,
																		Path=ClassificationFile.FolderPathLocal,
																		FallbackValue='c:\\File Path'}"
							d:DataContext="{Binding Source={x:Static sample:SampleData.FullFilePath}}"
							HorizontalScrollBarVisibility="Hidden"
							MaxLines="1"
							MinLines="1"
							ScrollViewer.CanContentScroll="True"
							Text="{Binding Mode=OneWay}"
							VerticalScrollBarVisibility="Disabled"
							Style="{StaticResource TextBox.Setting.Value}"
							>
						<!--  IsReadOnly="True"  -->
						<!--  d:DataContext="{Binding Source={d:DesignInstance {x:Type sample:SampleData}}}"  -->
					</TextBox>
				</Border>

			</DockPanel>

			<DockPanel
					Grid.Column="0"
					Grid.Row="2"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label36"
							Content="Sheet Sample Folder"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>

				<Border
						Margin="5,0,0,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>

					<TextBox x:Name="Tbx35"
							HorizontalAlignment="Stretch"
							Text="{Binding ElementName=MainWinClsfrEd,
														 Path=ClassificationFile.SampleFileName,
														 Mode=OneWay,
														 FallbackValue='Filename'}"
							Style="{StaticResource TextBox.Setting.Value}"
							>
					</TextBox>
				</Border>

				<Border
						Margin="5,0,5,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>
					<TextBox x:Name="Tbx34"
							HorizontalAlignment="Stretch"
							HorizontalScrollBarVisibility="Hidden"
							MaxLines="1"
							MinLines="1"
							ScrollViewer.CanContentScroll="True"
							Text="{Binding ElementName=MainWinClsfrEd,
														 Path=ClassificationFile.SampleFileFolderPath,
														 Mode=OneWay,
														 FallbackValue='File Path'}"
							VerticalScrollBarVisibility="Disabled"
							Style="{StaticResource TextBox.Setting.Value}"
							>
					</TextBox>
				</Border>
			</DockPanel>

			<!--
			<DockPanel
					Grid.Column="0"
					Grid.Row="3">

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label
							x:Name="Label38"
							Content="Sample Data Count"
							Style="{StaticResource Label.Settings.Title}" />
				</Border>

				<Border

						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource Amber.200}" />
					</Border.Background>
					<TextBox
							x:Name="Tbx38"
							HorizontalAlignment="Stretch"
							Text="{Binding Source= {x:Static sample:SampleData.TreeBase}, Path=ChildCount,
														 Mode=OneWay,
														 FallbackValue='none'}"
							Style="{StaticResource TextBox.Setting.Value}">
					</TextBox>

				</Border>

				<Border
						Margin="5,0,5,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}">
					<TextBox
							x:Name="Tbx39"
							HorizontalAlignment="Stretch"
							Text="{Binding Source= {x:Static sample:SampleData.TreeBase}, Path=ChildrenView.Count,
														 Mode=OneWay,
														 FallbackValue='none'}"
							Style="{StaticResource TextBox.Setting.Value}">
					</TextBox>
				</Border>
			</DockPanel>
			-->

			<DockPanel
					Grid.Column="0"
					Grid.Row="3"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label38"
							Content="Remember Tree Expand / Collapse state"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>


				<Border
						HorizontalAlignment="left"
						Background="{StaticResource Element.Button.Background.Normal}"
						Style="{StaticResource Border.Settings.Button}"
						>

					<Button x:Name="BtnRemExCollapseState"
							Content="{Binding ElementName=MainWinClsfrEd,
																Converter={StaticResource BoolToYesNo},
																Path=RememberCollapseState,
																Mode=OneWay,
																FallbackValue='none'}"
							Width="60"
							Padding="0,0,0,1"
							Background="Transparent"
							Foreground="White"
							BorderThickness="0"
							Click="BtnRemExCollapseState_OnClick"
							/>
					<!--  <TextBox  -->
					<!--  x:Name="TbxRememberExpandState"  -->
					<!--  Width="60"  -->
					<!--  IsReadOnly="True"  -->
					<!--  HorizontalAlignment="left"  -->
					<!--  HorizontalContentAlignment="Center"  -->
					<!--  Text="{Binding ElementName=MainWinClsfrEd,Path=RememberCollapseState,  -->
					<!--  Mode=OneWay,  -->
					<!--  FallbackValue='none'}"  -->
					<!--  Style="{StaticResource TextBox.Setting.Value}"  -->
					<!--  MouseUp="TbxRememberExpandState_OnMouseUp"  -->
					<!--  >  -->
					<!--    -->
					<!-- 	</TextBox> -->
					<!--    -->
				</Border>

				<!--  <Border  -->
				<!--  Margin="5,0,5,0"  -->
				<!--  HorizontalAlignment="Stretch"  -->
				<!--  Style="{StaticResource Border.Settings.Button}">  -->
				<!--  <TextBox  -->
				<!--  x:Name="Tbx39"  -->
				<!--  HorizontalAlignment="Stretch"  -->
				<!--  Text="{Binding Source= {x:Static sample:SampleData.TreeBase}, Path=ChildrenView.Count,  -->
				<!--  Mode=OneWay,  -->
				<!--  FallbackValue='none'}"  -->
				<!--  Style="{StaticResource TextBox.Setting.Value}">  -->
				<!-- 	</TextBox> -->
				<!-- </Border> -->
			</DockPanel>

		</Grid>

		<StackPanel
				Grid.Column="1"
				Grid.Row="2"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Orientation="Vertical"
				>
			<StackPanel
					HorizontalAlignment="right"
					Orientation="Horizontal"
					>
				<Button x:Name="BtnDebug"
						Content="Debug"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnDebug_OnClick"
						/>

				<Button x:Name="BtnTestAll"
						Content="Test All"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnTestAll_OnClick"
						/>
			</StackPanel>

			<StackPanel
					HorizontalAlignment="right"
					Orientation="Horizontal"
					>

				<Button x:Name="BtnSelect"
						Content="Select"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						IsEnabled="{Binding ClassificationFile.IsModified,
																ElementName=MainWinClsfrEd,
																Converter={StaticResource NotBool}}"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnSelect_OnClick"
						/>

				<Button x:Name="BtnCancelChanges"
						Content="Cancel Changes"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DataContext="{Binding ElementName=MainWinClsfrEd}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnSave_OnCancelChanges"
						>

					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="No Changes Yet" />
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding UserSelected, Converter={StaticResource NullObjToBool}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.IsModified}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="ToolTip" Value="Cancel all changes&#x0a;since last save" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding UserSelected, Converter={StaticResource NullObjToBool}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.IsModified}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="ToolTip" Value="Finish Editing the&#x0a;Selected Category" />
								</MultiDataTrigger>

							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>


				<Button x:Name="BtnDSave"
						Content="Save"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DataContext="{Binding ElementName=MainWinClsfrEd}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnSave_OnClick"
						>

					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="No Changes Yet" />
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding UserSelected, Converter={StaticResource NullObjToBool}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.IsModified}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="ToolTip" Value="Save Changes" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding UserSelected, Converter={StaticResource NullObjToBool}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.IsModified}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="ToolTip" Value="Finish Editing the Selected Category" />
								</MultiDataTrigger>

							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>


				<Button x:Name="BtDone"
						Content="Done"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnDone_OnClick"
						/>

			</StackPanel>
		</StackPanel>


		<Label x:Name="Label20"
				Content="Sheet Organization Categories"
				Grid.Column="0"
				Grid.Row="0"
				Grid.ColumnSpan="2"
				Margin="5,3,5,0"
				Padding="5,3,0,5"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Top"
				FontSize="14"
				Background="{StaticResource Win.Title.Background}"
				Foreground="White"
				/>

		<Grid
				Grid.Column="1"
				Grid.Row="1"
				Margin="0,0,5,5"
				>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />

			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="auto" />
				<RowDefinition Height="4*" />
				<RowDefinition Height="26" />
				<RowDefinition Height="3*" />
			</Grid.RowDefinitions>

			<Label x:Name="Label21"
					Content="Edit Selected Category"
					Grid.Column="0"
					Grid.Row="0"
					Margin="0,4,0,0"
					Padding="2,1,2,2"
					VerticalAlignment="Center"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<Border
					Grid.Column="0"
					Grid.Row="1"
					Margin="0,5,0,5"
					BorderThickness=".5"
					BorderBrush="{StaticResource ItemsControl.Border.Frame}"
					>
				<!--  BorderBrush="{xs:ScBrush A=#C6,  -->
				<!--  color={StaticResource Light.Blue.760}}"  -->

				<Grid x:Name="EditCategory"
						Margin="0,2,0,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						DataContext="{Binding ElementName=MainWinClsfrEd,
																	Path=UserSelected}"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="80" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="70" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="26" />
						<RowDefinition Height="26" />
						<RowDefinition Height="Auto" />
						<RowDefinition MinHeight="125" />

					</Grid.RowDefinitions>


					<Button x:Name="BtnDoneEditing"
							Grid.Column="1"
							Grid.Row="2"
							Grid.ColumnSpan="2"
							Margin="5"
							Width="{StaticResource Normal.Button.Width}"
							Height="{StaticResource Normal.Button.Height}"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Click="BtnDoneEditing_OnClick"
							>
						<Button.Style>
							<Style
									TargetType="Button"
									BasedOn="{StaticResource Button.Normal.Style}"
									>
								<Setter Property="Content" Value="Done" />
								<Setter Property="IsEnabled" Value="True" />
								<Style.Triggers>
									<DataTrigger Value="{x:Null}" Binding="{Binding Item}">
										<Setter Property="IsEnabled" Value="False" />
									</DataTrigger>
									<DataTrigger Value="True" Binding="{Binding Item.IsModified}">
										<Setter Property="Content" Value="Done" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Button.Style>
					</Button>

					<Label x:Name="Label22"
							Content="Title"
							Grid.Column="0"
							Grid.Row="0"
							Style="{StaticResource Label.Selected}"
							/>

					<TextBox x:Name="Tbx01"
							Grid.Column="1"
							Grid.ColumnSpan="2"
							d:DataContext="{Binding Source={x:Static sample:SampleData.Temp}}"
							res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
							res:TextBoxBehavior.SelectAllTextOnFocus="True"
							Text="{Binding Item.Title,
														 FallbackValue='',
														 TargetNullValue=''}"
							Style="{StaticResource TextBox.Selected}"
							/>

					<Label x:Name="Label23"
							Content="Description"
							Grid.Column="0"
							Grid.Row="1"
							Style="{StaticResource Label.Selected}"
							/>

					<TextBox x:Name="Tbx02"
							Grid.Column="1"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							d:DataContext="{Binding Source={x:Static sample:SampleData.Temp}}"
							res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
							res:TextBoxBehavior.SelectAllTextOnFocus="True"
							Text="{Binding Item.Description,
														 FallbackValue='',
														 TargetNullValue=''}"
							Style="{StaticResource TextBox.Selected}"
							/>

					<Label x:Name="Label24"
							Content="Conditions"
							Grid.Column="0"
							Grid.Row="2"
							Margin="5,0,0,5"
							VerticalAlignment="Bottom"
							Style="{StaticResource Label.Selected}"
							/>

					<ListView x:Name="Lv2"
							Grid.Column="0"
							Grid.Row="3"
							Grid.ColumnSpan="3"
							Margin="5,4,5,6"
							MinHeight="26"
							Padding="0,0,0,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="top"
							VerticalContentAlignment="Bottom"
							d:DataContext="{x:Static sample:SampleData.Temp}"
							ItemContainerStyle="{StaticResource Lv2ItemContainerStyle1}"
							ItemTemplateSelector="{StaticResource Lv2ConditionSelector}"
							ItemsSource="{Binding Item.CompareOps,
																		FallbackValue={x:Null}}"
							Style="{DynamicResource Tv1Lv1Style}"
							/>
					<!--  ItemTemplate="{StaticResource Lv2DataTemplate0}"  -->
					<!--  SelectionChanged="Lv2_SelectionChanged"  -->

					<Button x:Name="BtnAddCondition"
							Content="+"
							Grid.Column="2"
							Grid.Row="3"
							Margin="0,0,25,19"
							Width="30"
							Height="30"
							Padding="4,-2.5,0,0"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							HorizontalContentAlignment="Stretch"
							VerticalContentAlignment="Stretch"
							FontSize="26"
							FontWeight="Bold"
							BorderThickness="0"
							IsDefault="False"
							IsTabStop="False"
							Click="BtnAddCondition_OnClick"
							>
						<Button.Effect>
							<DropShadowEffect />
						</Button.Effect>

						<Button.Style>
							<Style
									TargetType="{x:Type Button}"
									BasedOn="{StaticResource Button.Condition.Style}"
									>
								<Setter Property="IsEnabled" Value="False" />
								<Style.Triggers>
									<DataTrigger Value="true" Binding="{Binding HasSelection, ElementName=MainWinClsfrEd}">
										<Setter Property="IsEnabled" Value="True" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Button.Style>
					</Button>


				</Grid>
			</Border>

			<Label x:Name="Label25"
					Content="Test Sheet Files"
					Grid.Column="0"
					Grid.Row="2"
					Margin="0,0,0,6"
					Padding="2,1,2,4"
					VerticalAlignment="Center"
					FontSize="13"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<DataGrid x:Name="Dg1"
					Grid.Column="0"
					Grid.Row="3"
					HorizontalAlignment="Stretch"
					HorizontalContentAlignment="Stretch"
					DataContext="{Binding FileList,
																ElementName=MainWinClsfrEd,
																FallbackValue={x:Null}}"
					d:DataContext="{Binding Source={x:Static sample:SampleData.FileList2}}"
					Background="{StaticResource TreeView.Background}"
					HorizontalGridLinesBrush="{StaticResource TreeViewRow.BorderBrush.Light}"
					AutoGenerateColumns="False"
					CanUserAddRows="False"
					GridLinesVisibility="Horizontal"
					HeadersVisibility="None"
					HorizontalScrollBarVisibility="Auto"
					VerticalScrollBarVisibility="Visible"
					ItemsSource="{Binding Files}"
					CellStyle="{StaticResource Dg.Cell.Base}"
					RowStyle="{StaticResource Dg.Row.Base}"
					Style="{DynamicResource Dg1Style}"
					>
				<DataGrid.Columns>

					<DataGridTemplateColumn CellStyle="{StaticResource Dg.Cell.Base}">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<!--  <Grid  -->
								<!--  Margin="-4,0,-2,0"  -->
								<!--    -->
								<!--  >  -->
								<!--  ~1~ Width="{Binding Path=ActualWidth, @1@  -->
								<!--  ~1~ FallbackValue=500, @1@  -->
								<!--  ~1~ Mode=OneWay, @1@  -->
								<!--  ~1~ RelativeSource={RelativeSource AncestorType={x:Type DataGridCellsPanel}}}" @1@  -->
								<!--    -->
								<!-- 	<Grid.ColumnDefinitions> -->
								<!-- 		<ColumnDefinition Width="Auto" /> -->
								<!-- 		<ColumnDefinition Width="*" /> -->
								<!--    -->
								<!-- 	</Grid.ColumnDefinitions> -->
								<!-- 	<Grid.RowDefinitions> -->
								<!-- 		<RowDefinition Height="*" /> -->
								<!-- 	</Grid.RowDefinitions> -->


								<!--  <Label  -->
								<!--  Grid.Column="1"  -->
								<!--  Grid.Row="0"  -->
								<!--  Padding="0,0,0,0"  -->
								<!--  VerticalAlignment="Bottom"  -->
								<!--  HorizontalAlignment="Right"  -->
								<!--  Foreground="White"  -->
								<!--  Content="Hello" />  -->


								<DockPanel
										Margin="-2,0,-2,0"
										Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}},
																		Path=ViewportWidth}"
										HorizontalAlignment="Stretch"
										>
									<!--  Grid.Column="1"  -->
									<!--  Grid.Row="0"  -->
									<Border
											Margin="0,0,0,5"
											HorizontalAlignment="Right"
											VerticalAlignment="Bottom"
											BorderThickness="1,0,1,0"
											DockPanel.Dock="Right"
											>
										<StackPanel Orientation="Vertical">
											<Label x:Name="Label27a"
													Content="{Binding Path=SheetNumberComponentTitles[0].AbbrevName,
																						Mode=OneWay,
																						FallbackValue='Type',
																						Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
													Margin="2,0,0,2"
													Foreground="DimGray"
													Style="{StaticResource Dg.CellLabel.Title}"
													/>

											<Label x:Name="Label28a"
													Content="{Binding FilePathInfo.FileNameObject.SheetComponentType,
																						FallbackValue=GRN}"
													Margin="2,1,0,0"
													Foreground="DimGray"
													Style="{StaticResource Dg.CellLabel.Data}"
													/>
										</StackPanel>
										<Border.Style>
											<Style
													TargetType="Border"
													BasedOn="{StaticResource Dg.CellLabel.Border}"
													>
												<Setter Property="Visibility" Value="Visible" />
												<Style.Triggers>
													<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.SheetComponentType, Mode=OneWay}">
														<Setter Property="Visibility" Value="Collapsed" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Border.Style>
									</Border>

									<!--  Grid.Column="0"  -->
									<!--  Grid.Row="0"  -->
									<StackPanel
											Margin="6,0,0,0"
											DockPanel.Dock="Left"
											Orientation="Vertical"
											>

										<StackPanel Orientation="Horizontal">

											<Label x:Name="Label25"
													Content="{Binding FilePathInfo.FileNameObject.SheetNumber,
																						FallbackValue='filename'}"
													Margin="2,3,0,0"
													MinWidth="86"
													Padding="0,0,10,0"
													HorizontalAlignment="Stretch"
													Foreground="White"
													/>

											<Label x:Name="Label26"
													Content="{Binding FilePathInfo.FileNameObject.SheetTitle,
																						FallbackValue='filename'}"
													Margin="0,3,0,0"
													Padding="0"
													HorizontalAlignment="Stretch"
													Foreground="White"
													/>
										</StackPanel>

										<StackPanel
												Margin="2"
												Orientation="Horizontal"
												>

											<!--<Label
													Content="{Binding Building}"
													Margin="0"
													Padding="0"
													DataContext="{Binding DataContext,
																								ElementName=Dg1,
																								Mode=OneWay}"
													d:DataContext="{Binding Source={x:Static sample:SampleData.sd}}"
													Background="Transparent"
													Foreground="White"
													Style="{StaticResource Dg.CellLabel.Title}"
													/>
											-->
											<!--  d:DataContext="{d:DesignInstance sample:SampleData, IsDesignTimeCreatable=True}"  -->


											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label27b"
															Content="{Binding Path=SheetNumberComponentTitles[1].AbbrevName,
																								Mode=OneWay,
																								FallbackValue='Ph / Bl',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>

													<Label x:Name="Label28b"
															Content="{Binding FilePathInfo.FileNameObject.PhaseBldg,
																								Mode=OneWay,
																								TargetNullValue='--',
																								FallbackValue=GRN}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Value="{x:Null}" Binding="{Binding ElementName=Dg1, Path=DataContext.Building}" />
																	<Condition Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.PhaseBldg}" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Visibility" Value="Collapsed">
																</Setter>
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label29"
															Content="{Binding Path=SheetNumberComponentTitles[2].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='D',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label30"
															Content="{Binding FilePathInfo.FileNameObject.Discipline,
																								FallbackValue=99}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Discipline, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label32"
															Content="{Binding Path=SheetNumberComponentTitles[3].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='C',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>

													<Label x:Name="Label31"
															Content="{Binding FilePathInfo.FileNameObject.Category,
																								FallbackValue=123A}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Category, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label33"
															Content="{Binding Path=SheetNumberComponentTitles[4].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Sc',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label34"
															Content="{Binding FilePathInfo.FileNameObject.Subcategory,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Subcategory, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label35"
															Content="{Binding Path=SheetNumberComponentTitles[5].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='M',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label36"
															Content="{Binding FilePathInfo.FileNameObject.Modifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Modifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37"
															Content="{Binding Path=SheetNumberComponentTitles[6].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Sm',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38"
															Content="{Binding FilePathInfo.FileNameObject.Submodifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Submodifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37a"
															Content="{Binding Path=SheetNumberComponentTitles[7].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Id',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38a"
															Content="{Binding FilePathInfo.FileNameObject.Identifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Identifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37b"
															Content="{Binding Path=SheetNumberComponentTitles[8].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Si',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38b"
															Content="{Binding FilePathInfo.FileNameObject.Subidentifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Subidentifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

										</StackPanel>
									</StackPanel>

									<!-- </Grid> -->
								</DockPanel>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>

		<TreeView x:Name="Tv1"
				Grid.Column="0"
				Grid.Row="1"
				Margin="5"
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				DataContext="{Binding ClassificationFile.TreeBase,
															ElementName=MainWinClsfrEd}"
				d:DataContext="{Binding Source={x:Static sample:SampleData.TreeBase}}"
				Background="{StaticResource ItemsControl.Background}"
				ScrollViewer.HorizontalScrollBarVisibility="Auto"
				SelectedItemChanged="Tv1_OnSelectedItemChanged"
				Tag="{Binding ContextCmdDelete,
											ElementName=MainWinClsfrEd}"
				ItemContainerStyle="{StaticResource Tv1ItemContainerStyle1}"
				ItemTemplate="{StaticResource Tv1ItemTemplate1}"
				ItemsSource="{Binding ChildrenView}"
				Style="{StaticResource Tv1Style1}"
				/>
		<!--  d:DataContext="{d:DesignInstance Type=sample:SampleData}"  -->
		<!--  d:DataContext="{Binding Source={x:Static sample:SampleData.BaseOfTreeRoot}}"  -->

	</Grid>
</Window>
