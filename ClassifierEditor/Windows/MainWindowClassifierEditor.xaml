<Window x:Name="MainWinClsfrEd"
		x:Class="ClassifierEditor.Windows.MainWindowClassifierEditor"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:file="clr-namespace:AndyShared.FileSupport.FileNameSheetPDF"
		xmlns:treeSupport="clr-namespace:AndyShared.ClassificationDataSupport.TreeSupport"
		xmlns:local="clr-namespace:ClassifierEditor.Windows"
		xmlns:sample="clr-namespace:ClassifierEditor.SampleData"
		xmlns:custom="clr-namespace:ClassifierEditor.Windows.Support"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:support="clr-namespace:AndyShared.Support"
		xmlns:res="clr-namespace:AndyResources.XamlResources"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:util="clr-namespace:UtilityLibrary"
		xmlns:generic="clr-namespace:System.Collections.Generic;assembly=mscorlib"
		xmlns:sampleFileSupport="clr-namespace:AndyShared.SampleFileSupport"
		xmlns:sheetSupport="clr-namespace:AndyShared.ClassificationDataSupport.SheetSupport"
		Title="Sheet Organization File Editor"
		Width="1800"
		Height="800"
		MinWidth="1195"
		MinHeight="800"
		DataContext="{Binding ElementName=MainWinClsfrEd}"
		mc:Ignorable="d"
		FontFamily="Tahoma"
		FontSize="12"
		Background="{StaticResource Window.Background}"
		Closing="MainWin_Closing"
		Initialized="Window_Initialized"
		Loaded="Window_Loaded"
		SizeToContent="Width"
		>
	<!--  Width="1195"  -->



	<Window.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ResourceFiles/XamlResources/MasterVisualResources.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/VisualStates.xaml" />

				<ResourceDictionary Source="ResourceFiles/XamlResources/ComboBoxEx.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/ScrollBar.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/ExpanderCheckBox.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/MenuItem.xaml" />

				<ResourceDictionary Source="ResourceFiles/XamlResources/IconResources.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconCheckMark.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconDelete-0x.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconArrowsScrollBar01.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/IconArrowsScrollBar02.xaml" />

			</ResourceDictionary.MergedDictionaries>

			<!--  fixes the context menu flickering  -->
			<PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>


			<local:Lv1ConditionTemplateSelector x:Key="Lv1ConditionSelector" />
			<local:Lv3TemplateSelector3 x:Key="Lv3TempSelector3" />

			<local:Lv2ConditionTemplateSelector x:Key="Lv2ConditionSelector" />

			<local:NotBoolConverter x:Key="NotBool" />
			<local:ElipseString x:Key="ElipseString" />

			<support:BoolToYesNoConverter x:Key="BoolToYesNo" />
			<support:NullObjToTrue x:Key="NullObjToTrue" />
			<support:NullObjToFalse x:Key="NullObjToFalse" />
			<support:PassThroughConverter x:Key="PassThru" />
			<support:MultiBoolAnd x:Key="MultiBoolAnd" />
			<support:MultiBoolOr x:Key="MultiBoolOr" />
			<support:InvertBool x:Key="InvertBool" />
			<support:Int32Comparison x:Key="CompareInt" />
			<support:EqualsToBool x:Key="ObjsEqual" />
			<support:IsChildOf x:Key="IsChildOf" />


			<sys:Double x:Key="LogicalHorizBarWidth">24</sys:Double>
			<sys:Double x:Key="ConditionFontSize">12</sys:Double>

			<sys:Double x:Key="DebugPanelFontSize">10</sys:Double>

			<sys:Double x:Key="CtxMnuIconWidth">8</sys:Double>
			<sys:Double x:Key="CtxMnuIconHeight">8</sys:Double>

			<sys:Double x:Key="BdrTv3ItemHeight">14</sys:Double>
			<sys:Double x:Key="BdrTv3ItemHeight2">16</sys:Double>

			<sys:Double x:Key="Lv3LogicalHorizBarWidth">16</sys:Double>

			<Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>

			<PathGeometry x:Key="TreeArrow"
					Figures="M0,0 L0,8 L8,0 z"
					/>

			<PathGeometry x:Key="TreeArrow2"
					Figures="M3.5,3.5 L3.5,8 L8,3.5 z"
					/>

			<SolidColorBrush x:Key="brush.ctx.enabled" Color="LawnGreen" />
			<SolidColorBrush x:Key="brush.ctx.delete" Color="Red" />
			<SolidColorBrush x:Key="brush.ctx.disabled" Color="DimGray" />


			<!-- saved

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#1F26A0DA"/>
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#A826A0DA"/>

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3D26A0DA"/>
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF26A0DA"/>

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#2E0080FF"/>
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#99006CD9"/>

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA"/>
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#FFDADADA"/>

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF26A0DA"/>

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#5426A0DA"/>
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF26A0DA"/>


      v2

            <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#CCC2E4F4" />
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#BF26A0DA" />

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF26A0DA" />
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3D26A0DA" />

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#99006CD9" />
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#2E0080FF" />

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#CC80C4E5" />
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA" />

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF26A0DA" />

      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF26A0DA" />
      <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#5426A0DA" />

			-->

			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#FF00FFFF" />
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#BF26A0DA" />

			<!--  selected but not focused  -->
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#CC80C4E5" />
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3D26A0DA" />

			<!--  selected and hovering and focus  -->
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#FF80C4E5" />
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#AF26A0DA" />

			<!--  selected and focus  -->
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#CC80C4E5" />
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA" />

			<!--  hovered but focus removed  -->
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#9900FFFF" />


			<!--  hovering and focus but not selected  -->
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#99C2E4F4" />
			<SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#7926A0DA" />




			<!--#region > styles-->

			<!--  rectangles  -->

			<Style x:Key="RectFlag"
					TargetType="Rectangle"
					>
				<Setter Property="Margin" Value="1,0,0,0" />
				<Setter Property="Width" Value="4" />
				<Setter Property="Height" Value="4" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Top" />
				<Setter Property="Fill" Value="DimGray" />
				<Setter Property="Stroke" Value="White" />
				<Setter Property="StrokeThickness" Value="0" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="StrokeThickness" Value="2" />
					</Trigger>
				</Style.Triggers>

			</Style>

			<!--  border  -->

			<Style x:Key="Border.Base"
					TargetType="Border"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Border.Settings.Base"
					TargetType="Border"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="CornerRadius" Value="3" />
				<Setter Property="BorderThickness" Value="0" />
			</Style>

			<Style x:Key="Border.Settings.Title"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Label.Status.Title.Background}" />
				<Setter Property="Background" Value="{StaticResource Label.Status.Title.Background}" />
			</Style>

			<Style x:Key="Border.Settings.Value"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Label.Status.Button.Background}" />
				<Setter Property="Background" Value="{StaticResource Label.Status.Button.Background}" />

				<Setter Property="Margin" Value="5,0,0,0" />
			</Style>

			<Style x:Key="Border.Settings.Button"
					TargetType="Border"
					BasedOn="{StaticResource Border.Settings.Base}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource Element.Value.Background.Normal}" />
				<Setter Property="Background" Value="{StaticResource Element.Value.Background.Normal}" />
				<Setter Property="Margin" Value="5,0,0,0" />
			</Style>


			<Style x:Key="ItemsControl.Border.Logical.Background"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Normal}" />

				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Disabled}" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<!--  labels (control)  -->

			<Style x:Key="Control.Base"
					TargetType="Control"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
						<Setter Property="Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Label.Base"
					TargetType="{x:Type Label}"
					>
				<!--  BasedOn="{StaticResource Control.Base}"  -->
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="label.debug.panel"
					TargetType="Label"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="FontSize" Value="{StaticResource DebugPanelFontSize}" />
				<Setter Property="Width" Value="150" />
				<!-- <Setter Property="Height" Value="14"/> -->
				<Setter Property="Margin" Value="0,1,5,1" />
				<Setter Property="Padding" Value="0,0,4,0" />
				<Setter Property="Background" Value="#444444" />
				<Setter Property="Foreground" Value="DarkGray" />
			</Style>

			<Style x:Key="Label.Selected"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="Padding" Value="2" />
			</Style>

			<Style x:Key="Label.Condition"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="FontSize" Value="{StaticResource ConditionFontSize}" />
				<Setter Property="HorizontalAlignment" Value="left" />
				<Setter Property="Margin" Value="2,2,2,3" />

			</Style>

			<Style x:Key="Label.Condition.ComponentName"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Condition.ComponentDescBody"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Setter Property="Foreground" Value="Lime" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="LimeGreen" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Condition.Condition"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">

						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />

					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Condition.Value"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Label.Condition}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}" />

					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.Settings.Title"
					TargetType="Label"
					BasedOn="{StaticResource Label.Base}"
					>
				<Setter Property="Padding" Value="10,0,10,1" />
			</Style>

			<Style x:Key="Label.ItemsControl.Base"
					TargetType="Label"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0,0,0,2" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
					</Trigger>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.MouseOver}">
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Label.ItemsControl.Header"
					TargetType="Label"
					BasedOn="{StaticResource Label.ItemsControl.Base}"
					>
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>

			<Style x:Key="Label.ItemsControl.Condition"
					TargetType="Label"
					BasedOn="{StaticResource Label.ItemsControl.Base}"
					>
				<Setter Property="FontSize" Value="{StaticResource ConditionFontSize}" />
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>


			<!--  textbox  -->

			<Style x:Key="TextBox.Base"
					TargetType="TextBox"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="TextBox.Setting.Value"
					TargetType="TextBox"
					BasedOn="{StaticResource TextBox.Base}"
					>
				<Setter Property="IsReadOnly" Value="True" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="Padding" Value="8,0,8,1" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="FontSize" Value="12" />
			</Style>

			<Style x:Key="TextBox.Selected"
					TargetType="{x:Type TextBox}"
					>
				<Setter Property="Background" Value="{StaticResource TextBox.Background}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="Margin" Value="4,0" />
				<Setter Property="MaxLines" Value="1" />
				<Setter Property="Padding" Value="6,2,4,2" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />

				<Style.Triggers>
					<DataTrigger Value="true" Binding="{Binding IsNodeSelected, FallbackValue=False}">
						<Setter Property="IsEnabled" Value="true" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="textbox.debug.panel"
					TargetType="TextBox"
					>
				<Setter Property="Foreground" Value="White" />
				<Setter Property="Background" Value="Black" />
				<Setter Property="FontSize" Value="{StaticResource DebugPanelFontSize}" />

			</Style>

			<!--  textblock  -->

			<Style x:Key="textblock.debug.panel"
					TargetType="TextBlock"
					>
				<Setter Property="Foreground" Value="White" />
				<Setter Property="Background" Value="Black" />
				<Setter Property="FontSize" Value="{StaticResource DebugPanelFontSize}" />

			</Style>

			<!--  button  -->

			<Style x:Key="Button.Condition.Style"
					TargetType="{x:Type Button}"
					>
				<Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="Bd"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="18"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="contentPresenterBtn"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource Control.Disabled.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
									<Setter TargetName="contentPresenterBtn" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>

			<Style x:Key="Button.Stealth"
					TargetType="{x:Type Button}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">

							<Border x:Name="Bd"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="0"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="contentPresenterBtn"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<!--  <Border x:Name="Bd"  -->
							<!--  Background="{TemplateBinding Background}"  -->
							<!--  BorderThickness="{TemplateBinding BorderThickness}"  -->
							<!--  BorderBrush="{TemplateBinding BorderBrush}"  -->
							<!--  CornerRadius="3"  -->
							<!--  SnapsToDevicePixels="true"  -->
							<!--  >  -->
							<!--    -->
							<!-- </Border> -->
							<!-- <ControlTemplate.Triggers> -->
							<!-- 	<Trigger Property="IsDefaulted" Value="true"> -->
							<!-- 		<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" /> -->
							<!-- 	</Trigger> -->
							<!-- 	<Trigger Property="IsMouseOver" Value="true"> -->
							<!-- 		<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.MouseOver.Background}" /> -->
							<!-- 		<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" /> -->
							<!-- 	</Trigger> -->
							<!-- 	<Trigger Property="IsPressed" Value="true"> -->
							<!-- 		<Setter TargetName="Bd" Property="Background" Value="{StaticResource Button.Pressed.Background}" /> -->
							<!-- 		<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" /> -->
							<!-- 	</Trigger> -->
							<!-- 	<Trigger Property="IsEnabled" Value="false"> -->
							<!-- 		<Setter TargetName="Bd" Property="Background" Value="{StaticResource Control.Disabled.Background}" /> -->
							<!-- 		<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" /> -->
							<!-- 		<Setter TargetName="contentPresenterBtn2" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" /> -->
							<!-- 	</Trigger> -->
							<!-- </ControlTemplate.Triggers> -->
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<!--  datagrid  -->

			<Style x:Key="Dg.Cell.Base"
					TargetType="{x:Type DataGridCell}"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg.Row.Base"
					TargetType="{x:Type DataGridRow}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg.CellLabel.Base"
					TargetType="{x:Type Label}"
					>
				<Setter Property="Background" Value="{StaticResource Dg.CellLabel.Background}" />
				<Setter Property="FontSize" Value="8" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0,0,0,0" />
				<Setter Property="Padding" Value="2" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>

			<Style x:Key="Dg.CellLabel.Title"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>

				<Setter Property="Padding" Value="5,2,5,2" />
				<Setter Property="MinWidth" Value="24" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
			</Style>
			<!-- <Setter Property="Width" Value="36" /> -->

			<Style x:Key="Dg.CellLabel.Data"
					TargetType="{x:Type Label}"
					BasedOn="{StaticResource Dg.CellLabel.Base}"
					>
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="Padding" Value="3,2,3,2" />
				<Setter Property="MinWidth" Value="22" />
				<Setter Property="Margin" Value="3,0,0,0" />
			</Style>

			<Style x:Key="Dg.CellLabel.Border"
					TargetType="{x:Type Border}"
					>
				<Setter Property="BorderBrush" Value="{StaticResource TreeViewRow.BorderBrush.Light}" />
				<Setter Property="BorderThickness" Value="0,0,1,0" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0,2,0,2" />
				<Setter Property="Padding" Value="1,0,2,0" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
			</Style>

			<Style x:Key="Dg1Style"
					TargetType="{x:Type DataGrid}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<!-- <Setter Property="BorderBrush" Value="#FF688CAF" /> -->
				<Setter Property="BorderBrush" Value="{StaticResource ItemsControl.Border.Frame}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGrid}">
							<Border
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									SnapsToDevicePixels="True"
									>
								<ScrollViewer x:Name="DG_ScrollViewer"
										Focusable="false"
										>
									<ScrollViewer.Template>
										<ControlTemplate TargetType="{x:Type ScrollViewer}">

											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="*" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<Button x:Name="BtnX2"
														Width="{Binding CellsPanelHorizontalOffset,
																						FallbackValue=0,
																						RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Command="{x:Static DataGrid.SelectAllCommand}"
														Focusable="false"
														Visibility="{Binding HeadersVisibility,
																								 FallbackValue=Visible,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.All},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
																																					TypeInTargetAssembly={x:Type DataGrid}}}"
														/>
												<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
														Grid.Column="1"
														Grid.Row="0"
														Visibility="{Binding HeadersVisibility,
																								 FallbackValue=Visible,
																								 ConverterParameter={x:Static DataGridHeadersVisibility.Column},
																								 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																								 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
														/>
												<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
														Grid.Column="0"
														Grid.Row="1"
														Grid.ColumnSpan="2"
														CanContentScroll="{TemplateBinding CanContentScroll}"
														/>

												<ScrollBar x:Name="PART_VerticalScrollBar"
														Grid.Column="2"
														Grid.Row="1"
														Margin="0,0,0,0"
														Width="{StaticResource BarSizeOutline}"
														MinWidth="{StaticResource BarSizeOutline}"
														Value="{Binding VerticalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														Background="{StaticResource ScrollBarBkg}"
														Cursor="Arrow"
														Maximum="{TemplateBinding ScrollableHeight}"
														Minimum="0"
														ViewportSize="{TemplateBinding ViewportHeight}"
														Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
														Style="{StaticResource ScrollBarStyle}"
														/>

												<!--<ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Column="2"
                            Grid.Row="1"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Orientation="Vertical"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset,
                                            Mode=OneWay,
                                            RelativeSource={RelativeSource TemplatedParent}}"
                            />-->
												<Grid
														Grid.Column="1"
														Grid.Row="2"
														>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, FallbackValue=50}" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>

													<ScrollBar x:Name="PART_HorizontalScrollBar"
															Grid.Column="1"
															Grid.Row="0"
															Height="{StaticResource BarSizeOutline}"
															MinHeight="{StaticResource BarSizeOutline}"
															Value="{Binding HorizontalOffset,
																							Mode=OneWay,
																							RelativeSource={RelativeSource TemplatedParent}}"
															Background="{StaticResource ScrollBarBkg}"
															AutomationProperties.AutomationId="HorizontalScrollBar"
															Cursor="Arrow"
															Maximum="{TemplateBinding ScrollableWidth}"
															Minimum="0"
															Orientation="Horizontal"
															ViewportSize="{TemplateBinding ViewportWidth}"
															Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
															Style="{StaticResource ScrollBarStyle}"
															/>


													<!--<ScrollBar
                              x:Name="PART_HorizontalScrollBar"
                              Grid.Column="1"
                              Maximum="{TemplateBinding ScrollableWidth}"
                              Orientation="Horizontal"
                              ViewportSize="{TemplateBinding ViewportWidth}"
                              Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                              Value="{Binding HorizontalOffset,
                                              Mode=OneWay,
                                              RelativeSource={RelativeSource TemplatedParent}}"
                              />-->
												</Grid>
											</Grid>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true" />
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</MultiTrigger>
				</Style.Triggers>
			</Style>


			<!--#endregion-->

			<!--#region > combobox-->

			<!--
				applies to:
				Cbx0 = compare component index			Cbox1Style1			ComboBoxTemplate1
				Cbx1 = value comp ops								Cbox1Style1			ComboBoxTemplate1
				Cbx2 = logical comp ops							Cbox1Style1			ComboBoxTemplate1
				CbxItemClass = item class						Cbox1Style1			ComboBoxTemplate1
			-->


			<ControlTemplate x:Key="Tv1ScrollViewerControlTemplate1"
					TargetType="{x:Type ScrollViewer}"
					>
				<Grid x:Name="GridZ"
						Background="{TemplateBinding Background}"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<Rectangle x:Name="Corner"
							Grid.Column="2"
							Grid.Row="2"
							Fill="black"
							/>

					<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
							Content="{TemplateBinding Content}"
							Grid.Column="0"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							/>

					<ScrollBar x:Name="PART_VerticalScrollBar"
							Grid.Column="2"
							Grid.Row="1"
							Margin="0,0,0,0"
							Width="{StaticResource BarSizeOutline}"
							Value="{Binding VerticalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Style="{StaticResource ScrollBarStyle}"
							/>

					<ScrollBar x:Name="PART_HorizontalScrollBar"
							Grid.Column="1"
							Grid.Row="2"
							Height="{StaticResource BarSizeOutline}"
							MinHeight="{StaticResource BarSizeOutline}"
							Value="{Binding HorizontalOffset,
															Mode=OneWay,
															RelativeSource={RelativeSource TemplatedParent}}"
							Background="{StaticResource ScrollBarBkg}"
							AutomationProperties.AutomationId="HorizontalScrollBar"
							ClipToBounds="True"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Style="{StaticResource ScrollBarStyle}"
							/>

				</Grid>
			</ControlTemplate>


			<ControlTemplate x:Key="ComboBoxToggleButton1"
					TargetType="{x:Type ToggleButton}"
					>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="20" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Border x:Name="Border"
							Grid.Column="0"
							BorderThickness="1"
							CornerRadius="2"
							/>
					<Border
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Margin="0"
							Padding="0"
							Background="Transparent"
							CornerRadius="2,0,0,2"
							/>
					<Path x:Name="Arrow"
							Grid.Column="0"
							Margin="0,1.5,0,3"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="M 0,0 4,8 8,0 z"
							Fill="red"
							RenderTransformOrigin="0.5,0.5"
							>
						<Path.RenderTransform>
							<TransformGroup>
								<RotateTransform Angle="-90" />
							</TransformGroup>
						</Path.RenderTransform>
					</Path>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsChecked" Value="true">
						<Setter TargetName="Arrow" Property="Fill" Value="OrangeRed" />
						<Setter TargetName="Arrow" Property="RenderTransform">
							<Setter.Value>
								<RotateTransform Angle="0" />
							</Setter.Value>
						</Setter>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<ControlTemplate x:Key="ComboBoxTextBox" x:Name="ComboBoxTextBox_01"
					TargetType="{x:Type TextBox}"
					>

				<Border x:Name="PART_ContentHost"
						Background="{TemplateBinding Background}"
						Focusable="False"
						/>
			</ControlTemplate>

			<ControlTemplate x:Key="ComboBoxTemplate1"
					TargetType="ComboBox"

					>
				<Border x:Name="bdr_cbt1"
						Margin="0,0,0,0"
						Padding="4,0,10,0"
						CornerRadius="3"
						>
					<!--  Background="{StaticResource ItemsControl.Subject.Background.Normal}"  -->
					<Border.Style>
						<Style TargetType="Border">
							<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->
							<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" />
							<Setter Property="BorderThickness" Value="0" />
							<Style.Triggers>
								<!--  true  -->
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" Value="{Binding Path=(custom:CustomProperties.MouseOverBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />

								</Trigger>
								<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.MouseOver}" /> -->
								<Trigger Property="IsEnabled" Value="False">
									<!--  false  -->
									<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
									<Setter Property="Background" Value="{Binding Path=(custom:CustomProperties.NotEnabledBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
								</Trigger>
								<!-- <Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->

							</Style.Triggers>
						</Style>
					</Border.Style>

					<Grid x:Name="cbx_gd1"
							Margin="0"
							>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="20" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<ToggleButton x:Name="ToggleButton"
								Grid.Column="0"
								Background="{TemplateBinding Background}"
								IsChecked="{Binding IsDropDownOpen,
																		Mode=TwoWay,
																		RelativeSource={RelativeSource TemplatedParent}}"
								ClickMode="Press"
								Focusable="false"
								Template="{StaticResource ComboBoxToggleButton1}"
								/>

						<ContentPresenter x:Name="ContentSite"
								Content="{TemplateBinding SelectionBoxItem}"
								Grid.Column="1"
								Margin="0,0,1,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Center"
								IsHitTestVisible="False"
								ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
								ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
								>
							<!--  HorizontalAlignment="Stretch"  -->

						</ContentPresenter>

						<TextBox x:Name="PART_EditableTextBox"
								Grid.Column="1"
								Margin="3,0,3,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Background="Transparent"
								Foreground="{TemplateBinding Foreground}"
								IsReadOnly="{TemplateBinding IsReadOnly}"
								Focusable="True"
								Visibility="Hidden"
								Style="{x:Null}"
								Template="{StaticResource ComboBoxTextBox}"
								/>

						<Popup x:Name="PopupX"
								AllowsTransparency="True"
								Grid.Column="1"
								Margin="0"
								IsOpen="{TemplateBinding IsDropDownOpen}"
								Focusable="False"
								Placement="Bottom"
								PopupAnimation="Slide"
								StaysOpen="True"
								>


							<!--  Closed="CbxPopup_OnClosed"  -->
							<!--  Opened="CbxPopup_OnOpened"  -->
							<!--  IsOpen="{TemplateBinding IsDropDownOpen}"  -->

							<Grid x:Name="DropDownX"
									Margin="2,2,0,0"
									MinWidth="{TemplateBinding ActualWidth}"
									MaxHeight="{TemplateBinding MaxDropDownHeight}"
									SnapsToDevicePixels="True"
									>
								<Border x:Name="DropDownBorderX"
										Margin="0"
										Padding="0"
										Background="{Binding Path=(custom:CustomProperties.DropDownBrush),
																				 RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										BorderThickness="0"
										>
									<!--  Background="{StaticResource ItemsControl.ListItem.Background.Normal}"  -->
									<!--  <Setter Property="Background" Value="{Binding Path=(custom:CustomProperties.NotEnabledBrush),  -->
									<!--  RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>  -->
									<!--  Background="{TemplateBinding Background}"  -->
									<Border.BorderBrush>
										<SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
									</Border.BorderBrush>

								</Border>

								<ScrollViewer x:Name="SvX"
										Width="{TemplateBinding custom:CustomProperties.DropDownWidth}"
										Padding="0"
										SnapsToDevicePixels="True"
										Template="{StaticResource Tv1ScrollViewerControlTemplate1}"
										>
									<StackPanel x:Name="SpX"
											IsItemsHost="True"
											KeyboardNavigation.DirectionalNavigation="Contained"
											Orientation="Vertical"
											/>

								</ScrollViewer>
							</Grid>
						</Popup>
						<!-- <Grid.Style> -->
						<!-- 	<Style TargetType="Grid"> -->
						<!-- 		<Style.Triggers> -->
						<!-- 	<DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=Content}" Value="{x:Null}"> -->
						<!-- 		<Setter Property="Visibility" Value="Collapsed"></Setter> -->
						<!-- 	</DataTrigger> -->
						<!-- 		</Style.Triggers> -->
						<!-- 	</Style> -->
						<!-- </Grid.Style> -->


						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames
												Storyboard.TargetName="PART_EditableTextBox"
												Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
												>
											<EasingColorKeyFrame
													Value="{StaticResource DisabledForegroundColor}"
													KeyTime="0"
													/>
											<!--  Value="{StaticResource DisabledForegroundColor}"  -->
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
												Storyboard.TargetName="PART_EditableTextBox"
												Storyboard.TargetProperty="(UIElement.Visibility)"
												>
											<DiscreteObjectKeyFrame
													Value="{x:Static Visibility.Visible}"
													KeyTime="0"
													/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
												Storyboard.TargetName="ContentSite"
												Storyboard.TargetProperty="(UIElement.Visibility)"
												>
											<DiscreteObjectKeyFrame
													Value="{x:Static Visibility.Collapsed}"
													KeyTime="0"
													/>
											<!--  Value="{x:Static Visibility.Hidden}"  -->
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Uneditable" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>

				</Border>

				<!-- </Border> -->
				<ControlTemplate.Triggers>

					<Trigger Property="HasItems" Value="false">
						<Setter TargetName="DropDownBorderX" Property="MinHeight" Value="95" />
					</Trigger>
					<Trigger Property="IsGrouping" Value="true">
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</Trigger>
					<Trigger Property="AllowsTransparency" Value="true" SourceName="PopupX">
						<Setter TargetName="DropDownBorderX" Property="CornerRadius" Value="4" />
						<Setter TargetName="DropDownBorderX" Property="Margin" Value="0,2,0,0" />
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<Style x:Key="CboxFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Path x:Name="Arrow"
										Grid.Column="0"
										Margin="0,1.5,0,0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="M 0,0 0,8 8,4 z"
										Fill="red"
										/>
								<Rectangle
										Grid.Column="0"
										Grid.ColumnSpan="2"
										Margin="2,0,0,0"
										Fill="#44ffffff"
										SnapsToDevicePixels="true"
										>

									<!--  Fill="#44545454"  -->

									<Rectangle.Stroke>
										<SolidColorBrush Color="{StaticResource Gray.220}" />
									</Rectangle.Stroke>
								</Rectangle>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="Cbox1Style1"
					TargetType="{x:Type ComboBox}"
					>
				<!-- <EventSetter Event="MouseUp" Handler="Cbx_OnMouseUp"></EventSetter> -->
				<!-- <Setter Property="IsDropDownOpen" Value="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpen, Mode=TwoWay}"></Setter> -->
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="SnapsToDevicePixels" Value="true" />
				<!-- <Setter Property="Template" Value="{StaticResource ComboBoxTemplate1}" /> -->
				<!-- <Style.Triggers> -->
				<!-- 	<Trigger Property="IsEnabled" Value="False"> -->
				<!-- 		<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
				<!-- 	</Trigger> -->
				<!-- </Style.Triggers> -->
			</Style>

			<Style x:Key="ComboBoxItemContainerStyle1"
					TargetType="{x:Type ComboBoxItem}"
					x:Shared="False"
					>

				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Padding" Value="4,1" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">
							<Border x:Name="Bd"
									Padding="{TemplateBinding Padding}"
									HorizontalAlignment="Stretch"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="CpY"
										HorizontalAlignment="Stretch"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
								<!--  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="False" />
										<Condition Property="IsMouseOver" Value="True" />
										<Condition Property="IsKeyboardFocused" Value="False" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True" />
										<Condition Property="IsMouseOver" Value="False" />
										<Condition Property="IsKeyboardFocused" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True" />
										<Condition Property="IsMouseOver" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True" />
										<Condition Property="IsMouseOver" Value="False" />
										<Condition Property="IsKeyboardFocused" Value="False" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="False" />
										<Condition Property="IsMouseOver" Value="False" />
										<Condition Property="IsKeyboardFocused" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="False" />
										<Condition Property="IsMouseOver" Value="True" />
										<Condition Property="IsKeyboardFocused" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<!--#region > removed-->

			<!--  removed  -->
			<!--  <Style x:Key="ComboBoxItem1" x:Name="cbx_sty1"  -->
			<!--  TargetType="{x:Type ComboBoxItem}"  -->
			<!--  >  -->
			<!-- 	<Setter Property="FocusVisualStyle" Value="{DynamicResource CboxFocusVisual}" /> -->
			<!-- 	<Setter Property="OverridesDefaultStyle" Value="true" /> -->
			<!-- 	<Setter Property="SnapsToDevicePixels" Value="true" /> -->
			<!-- 	<Setter Property="Template"> -->
			<!-- 		<Setter.Value> -->
			<!--  <ControlTemplate x:Name="cbx_ct1"  -->
			<!--  TargetType="{x:Type ComboBoxItem}"  -->
			<!--  >  -->
			<!--    -->
			<!--  <Border x:Name="Border"  -->
			<!--  Margin="0,0,0,0"  -->
			<!--  Padding="10,2,2,2"  -->
			<!--  Background="Transparent"  -->
			<!--  SnapsToDevicePixels="true"  -->
			<!--  >  -->
			<!-- 					<Border.Style> -->
			<!-- 						<Style TargetType="Border"> -->
			<!-- 							~1~ <Style.Triggers> @1@ -->
			<!--  ~1~  <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}, Path=Content.Name, Converter={StaticResource PassThru}}"  @1@  -->
			<!--  ~1~  Value="{x:Null}">  @1@  -->
			<!-- 							~1~ 		<Setter Property="Visibility" Value="Collapsed"/> @1@ -->
			<!-- 							~1~ 	</DataTrigger> @1@ -->
			<!-- 							~1~ </Style.Triggers> @1@ -->
			<!-- 						</Style> -->
			<!-- 					</Border.Style> -->
			<!-- 					<ContentPresenter x:Name="ContentPresenterA" /> -->
			<!--    -->
			<!-- 					<VisualStateManager.VisualStateGroups> -->
			<!-- 						<VisualStateGroup x:Name="SelectionStates"> -->
			<!-- 							<VisualState x:Name="Unselected" /> -->
			<!-- 							<VisualState x:Name="Selected"> -->
			<!-- 								<Storyboard> -->
			<!--  <ColorAnimationUsingKeyFrames  -->
			<!--  Storyboard.TargetName="Border"  -->
			<!--  Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"  -->
			<!--  >  -->
			<!--  ~1~  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush)"  @1@  -->
			<!--  ~1~  ReSharper disable once Xaml.InvalidResourceType  @1@  -->
			<!--  <EasingColorKeyFrame  -->
			<!--  Value="{DynamicResource ItemsControl.ListItem.Background.Selected.C}"  -->
			<!--  KeyTime="0"  -->
			<!--  />  -->
			<!--  ~1~ Value="{StaticResource SelectedBackgroundColor}" @1@  -->
			<!--  ~1~  color of the drop down selected item  @1@  -->
			<!-- 									</ColorAnimationUsingKeyFrames> -->
			<!-- 								</Storyboard> -->
			<!-- 							</VisualState> -->
			<!--    -->
			<!-- 							<VisualState x:Name="SelectedUnfocused"> -->
			<!-- 								<Storyboard> -->
			<!--  <ColorAnimationUsingKeyFrames  -->
			<!--  Storyboard.TargetName="Border"  -->
			<!--  Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"  -->
			<!--  >  -->
			<!--  ~1~  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush)"  @1@  -->
			<!--  ~1~  ReSharper disable once Xaml.InvalidResourceType  @1@  -->
			<!--  <EasingColorKeyFrame  -->
			<!--  Value="{DynamicResource ItemsControl.ListItem.Background.Selected.UnFocused.C}"  -->
			<!--  KeyTime="0"  -->
			<!--  />  -->
			<!--  ~1~  color of the drop down selected item focus lost  @1@  -->
			<!--  ~1~  Value="{StaticResource SelectedUnfocusedColor}"  @1@  -->
			<!-- 									</ColorAnimationUsingKeyFrames> -->
			<!-- 								</Storyboard> -->
			<!-- 							</VisualState> -->
			<!-- 						</VisualStateGroup> -->
			<!-- 					</VisualStateManager.VisualStateGroups> -->
			<!-- 				</Border> -->
			<!-- 				<ControlTemplate.Triggers> -->
			<!-- 					<DataTrigger Value="{x:Null}" Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Converter={StaticResource PassThru}}"> -->
			<!-- 						<Setter Property="Visibility" Value="Collapsed" /> -->
			<!-- 					</DataTrigger> -->
			<!-- 				</ControlTemplate.Triggers> -->
			<!-- 			</ControlTemplate> -->
			<!-- 		</Setter.Value> -->
			<!-- 	</Setter> -->
			<!--    -->
			<!--    -->
			<!-- </Style> -->

			<!--#endregion-->

			<!--#endregion-->

			<!--#region > checkbox-->

			<Style x:Key="Ckbx1Style"
					TargetType="{x:Type CheckBox}"
					>
				<Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Grid x:Name="templateRoot"
									Margin="0"
									Background="Transparent"
									SnapsToDevicePixels="True"
									>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Border
										Margin="0"
										Width="{TemplateBinding Height}"
										Height="{TemplateBinding Height}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Background="{TemplateBinding Background}"
										BorderThickness="1"
										BorderBrush="Transparent"
										>

									<Grid>

										<Border x:Name="checkBoxBorder"
												Margin="1.0"
												BorderThickness="1"
												BorderBrush="{TemplateBinding BorderBrush}"
												/>
										<Grid x:Name="markGrid"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												>
											<Path x:Name="optionMark"
													Margin="0"
													Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
													Fill="{StaticResource OptionMark.Static.Glyph2}"
													Opacity="0"
													Stretch="None"
													/>
											<Rectangle x:Name="indeterminateMark"
													Margin="2,1.5,2,1.5"
													Fill="{StaticResource OptionMark.Static.Glyph2}"
													Opacity="0"
													/>
										</Grid>

									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter"
										Grid.Column="1"
										Margin="{TemplateBinding Padding}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="Padding" Value="4,-1,0,0" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />
									<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}" />
									<Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
									<Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
									<Setter TargetName="optionMark" Property="Opacity" Value="1" />
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
									<Setter TargetName="optionMark" Property="Opacity" Value="0" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<Style x:Key="Tv1ExpandCollapseToggleStyle"
					TargetType="{x:Type ToggleButton}"
					>
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Margin" Value="0,6,0,0" />
				<Setter Property="Width" Value="16" />
				<Setter Property="Height" Value="20" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border
									Width="14"
									Height="20"
									Background="Transparent"
									>

								<StackPanel Orientation="Vertical">
									<!--  Padding="5,5,5,5"  -->
									<Path x:Name="ExpandPath"
											Width="10"
											Height="10"
											StrokeThickness="1"
											Stretch="Uniform"
											>

									</Path>

									<Path x:Name="ExpandPath2"
											Margin="0,-2,0,2"
											Width="10"
											Height="10"
											StrokeThickness="1"
											Stretch="Uniform"
											>

									</Path>
								</StackPanel>

							</Border>

							<ControlTemplate.Triggers>

								<Trigger Property="IsChecked" Value="False">
									<Setter TargetName="ExpandPath" Property="Data" Value="{StaticResource Icon.Arrow.Dn2}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="LawnGreen" />
									<Setter TargetName="ExpandPath" Property="Fill" Value="LawnGreen" />
									<Setter TargetName="ExpandPath2" Property="Data" Value="{StaticResource Icon.Arrow.Dn2}" />
									<Setter TargetName="ExpandPath2" Property="Fill" Value="LawnGreen" />
									<Setter TargetName="ExpandPath2" Property="Stroke" Value="LawnGreen" />

								</Trigger>


								<Trigger Property="IsChecked" Value="True">
									<Setter TargetName="ExpandPath" Property="Data" Value="{StaticResource Icon.Arrow.Up2}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="LawnGreen" />
									<Setter TargetName="ExpandPath" Property="Fill" Value="LawnGreen" />
									<Setter TargetName="ExpandPath2" Property="Data" Value="{StaticResource Icon.Arrow.Up2}" />
									<Setter TargetName="ExpandPath2" Property="Fill" Value="LawnGreen" />
									<Setter TargetName="ExpandPath2" Property="Stroke" Value="LawnGreen" />

								</Trigger>

								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
									<Setter TargetName="ExpandPath2" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
									<Setter TargetName="ExpandPath2" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
								</Trigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsChecked" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
									<Setter TargetName="ExpandPath2" Property="Fill" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
									<Setter TargetName="ExpandPath2" Property="Stroke" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>

			</Style>

			<!--#endregion-->

			<!--#region > context menu items-->


			<Style x:Key="CtxBase"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="0,-1,0,0" />
				<Setter Property="Width" Value="{StaticResource CtxMnuIconWidth}" />
				<Setter Property="Height" Value="{StaticResource CtxMnuIconHeight}" />
				<Setter Property="Fill" Value="DimGray" />
				<Setter Property="Stretch" Value="Uniform" />
			</Style>


			<Style x:Key="CtxIcon"
					TargetType="Path"
					BasedOn="{StaticResource CtxBase}"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="true">
						<Setter Property="Fill" Value="{StaticResource brush.ctx.enabled}" />
					</Trigger>
				</Style.Triggers>
			</Style>



			<!-- removed
			<Style x:Key="Tv.context.menuitem.move"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="Tag" Value="{StaticResource brush.ctx.disabled}" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="true" Binding="{Binding HasSelection, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindowClassifierEditor}}}" />
							<Condition Value="false" Binding="{Binding IsNodeSelected}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="true" />
						<Setter Property="Tag" Value="{StaticResource brush.ctx.enabled}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.clone"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="Tag" Value="{StaticResource brush.ctx.disabled}" />
				<Style.Triggers>
					<DataTrigger Value="true" Binding="{Binding HasSelection, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindowClassifierEditor}}}">
						<Setter Property="IsEnabled" Value="true" />
						<Setter Property="Tag" Value="{StaticResource brush.ctx.enabled}" />
					</DataTrigger>

				</Style.Triggers>
			</Style>
			-->

			<Style x:Key="Tv.context.menuitem.base"
					TargetType="MenuItem"
					BasedOn="{StaticResource MenuItemStyle1}"
					>
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Padding" Value="0,2,0,2" />
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="Foreground" Value="DimGray" />
			</Style>

			<Style x:Key="Tv.context.separator.first"
					TargetType="Separator"
					>
				<Setter Property="Visibility" Value="Visible" />
				<Setter Property="Margin" Value="6" />
				<Style.Triggers>
					<DataTrigger Value="false" Binding="{Binding Path=NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}">
						<Setter Property="Visibility" Value="Collapsed" />
					</DataTrigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Tv.context.separator.second"
					TargetType="Separator"
					>
				<Setter Property="Visibility" Value="Visible" />
				<Setter Property="Margin" Value="6" />
				<Style.Triggers>
					<DataTrigger Value="true" Binding="{Binding Path=NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}">
						<Setter Property="Visibility" Value="Collapsed" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.first"
					TargetType="MenuItem"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="Visibility" Value="Visible" />
				<Style.Triggers>
					<DataTrigger Value="false" Binding="{Binding Path=NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}">
						<Setter Property="Visibility" Value="Collapsed" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.second"
					TargetType="MenuItem"
					BasedOn="{StaticResource Tv.context.menuitem.base}"
					>
				<Setter Property="Visibility" Value="Collapsed" />
				<Setter Property="IsEnabled" Value="True" />
				<Setter Property="Foreground" Value="White" />
				<Style.Triggers>
					<DataTrigger Value="false" Binding="{Binding Path=NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}">
						<Setter Property="Visibility" Value="Visible" />
					</DataTrigger>
					<DataTrigger Value="true" Binding="{Binding Item.CannotSelect}">
						<Setter Property="IsEnabled" Value="false" />
					</DataTrigger>



					<!-- <DataTrigger Value="false" Binding="{Binding Item.IsLocked}"> -->
					<!-- 	<Setter Property="IsEnabled" Value="false" /> -->
					<!-- </DataTrigger> -->
					<!-- <DataTrigger Value="false" Binding="{Binding Item.IsFixed}"> -->
					<!-- 	<Setter Property="IsEnabled" Value="false" /> -->
					<!-- </DataTrigger> -->


				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.1a"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.first}"
					>
				<Style.Triggers>

					<!--  trigger base  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="false" Binding="{Binding Item.IsLocked}" />
							<Condition Value="false" Binding="{Binding Item.IsFixed}" />

							<Condition Value="true" Binding="{Binding HasContextSelection, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" />
							<Condition Value="true" Binding="{Binding Mws.NodeEditing, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}, FallbackValue='true'}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="Tag" Value="1" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.1c"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.1a}"
					>
				<Style.Triggers>

					<!--  trigger base  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="false" Binding="{Binding Item.IsLocked}" />
							<Condition Value="false" Binding="{Binding Item.IsFixed}" />

							<Condition Value="false" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="Tag" Value="1" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<Style x:Key="Tv.context.menuitem.1e"
					TargetType="{x:Type MenuItem}"
					BasedOn="{StaticResource Tv.context.menuitem.first}"
					>
				<Style.Triggers>

					<!--  trigger base  -->

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="false" Binding="{Binding Item.IsLocked}" />
							<Condition Value="false" Binding="{Binding Item.IsFixed}" />
							<!--  node has some children nodes  -->
							<Condition Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}" />
							<!--  has a context selection object  -->
							<Condition Value="true" Binding="{Binding HasContextSelection, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" />
							<!--  node editing is null (not editing  -->
							<Condition Value="true" Binding="{Binding Mws.NodeEditing, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}, FallbackValue='true'}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="Tag" Value="1" />
					</MultiDataTrigger>



					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="false" Binding="{Binding Item.IsLocked}" />
							<Condition Value="false" Binding="{Binding Item.IsFixed}" />
							<!--  node has some children nodes  -->
							<Condition Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}" />
							<!--  editing node has not been modified  -->
							<Condition Value="false" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="Tag" Value="1" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>




			<!--  <Style x:Key="Tv.context.menuitem.1d"  -->
			<!--  TargetType="{x:Type MenuItem}"  -->
			<!--  BasedOn="{StaticResource Tv.context.menuitem.first}"  -->
			<!--  >  -->
			<!-- 	<Style.Triggers> -->
			<!--    -->
			<!--  ~1~  trigger base  @1@  -->
			<!-- 		<MultiDataTrigger> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				<Condition Value="false" Binding="{Binding Item.IsLocked}" /> -->
			<!-- 				<Condition Value="false" Binding="{Binding Item.IsFixed}" /> -->
			<!-- 				<Condition Value="true" Binding="{Binding HasContextSelection, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" /> -->
			<!-- 				<Condition Value="true" Binding="{Binding HasSelection, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" /> -->
			<!-- 				<Condition Value="false" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="IsEnabled" Value="True" /> -->
			<!-- 			<Setter Property="Foreground" Value="White" /> -->
			<!-- 			<Setter Property="Tag" Value="1" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!--    -->
			<!-- 	</Style.Triggers> -->
			<!-- </Style> -->


			<!--
				context menu settings
				either means that the menu option is not affected - it could be either enabled or disabled
				
				data context us the active node and NOT the selected node
				active node meaning the version in the treeview and not the cloen in the editing area
				
				options                                                       case 1    case 2
				.                              IsLocked = T   IsLocked = F \
				.                              or             and           \
				
				.               default        or             and            /
				.               state          IsFixed = T    Isfixed =  F  /
				.                                             can exp F    can exp T   can exp T   can exp T   can exp T
				.                                             is exp na    is exp F	   is exp T    is exp F    is exp T
				.                                             sel mod na   sel mod F	 sel mod F   sel mod T   sel mod T
				
				whole menu      enabled        no chg ->>
				.
				expand / collapse  disabled    no chg	        no chg       enable     enable       no chg      no chg
				.                                                          as exp     as collapse
				._________________________________________________________________________________________________________
				.                              ContextSelected is:
				.                             _________________________________________________________________________
        .                              IsLocked   = T
        .                              or                 IsLocked   = F
        .                              IsFixed    = T   & IsFixed    = F
        WHEN            default
        .               state                           has            has            edit
        .                                               no edit        edit           mod
				.                                               == is mov'g  = is mov'g =
				.                                                = (n/a)        = F      = T                        style
        .               ________       ______            ______        ______   _______    _______          for all - base = (3) are false

			StackPanel 1 >>																																											
			  expand   (see above)																																							 base
			  .    spacer			                																																									
        add before                      disabled       no chg            enable        enable   disable    disable         +<  style 1c = base + 1a + triggers
        add after                       disabled       no chg            enable        enable   disable    disable         v
        add child                       disabled       no chg            enable        enable   disable    disable         v
        .    spacer			
        move before                     disabled       no chg            disable       enable              disable         +<  style 1c = base + 1a + triggers
        move after                      disabled       no chg            disable       enable              disable         v
        move as child                   disabled       no chg            disable       enable              disable         v
        .   spacer			
        duplicate                      disabled       no chg            enable        enable              disable         +< style 1c = base + 1a + triggers
        .
				duplicate branch
				.								
        duplicate as child              disabled       no chg            enable        enable              disable         +< style 1c = base + 1a + triggers
        .								
        delete                          disabled       no chg            enable        disable             disable         +< style 1a = base + triggers
			
			<< StackPanel 1

			StackPanel 2 >>
			
			
			<< StackPanel 2


				what happens

				nothing selected - no edit made / selected
					> default
						> stack pane 1 visible
						> stack panel 2 collapsed
				right click
					> set contextSource
				menu shows
				enable / disable per chart
				> non-move selected
					> preform action
        > move action selected
						> stack pane 1 collapsed
						> stack panel 2 visible
					> de-highlight contextSource
					> mouse moved - only highlight those allowed - different highlight (depth == move source depth)
					> click - move target highlight
					> or not click
					> right-click
						> set targetSelected
						> highlight
						> choices: Apply Move or Cancel Move
							> cancel move
								> de-highlight contextTarget selected - set to null
								> de-highlight contextSource
								> stack pane 1 visible
						> stack panel 2 collapsed
							> apply move
								> de-highlight contextTarget selected - set to null
								> de-highlight contextSource
								> stack pane 1 visible
								> stack panel 2 collapsed
								> apply move

				item selected - edit made / selected - no changes
				> de-select item
				> follow the above

				item selected - edit made / selected - has changes changes
				all disabled
			-->


			<ContextMenu x:Key="Tv1ContextMenu" x:Name="Tv1ContextMenu"
					MinWidth="280"
					Padding="0,6,0,6"
					d:DataContext="{Binding ElementName=MainWinClsfrEd,
																	Path=Mws.NodeSelected}"
					Background="{StaticResource ContextMenu.Background}"
					Foreground="White"
					HasDropShadow="True"
					Closed="Tv1ContextMenu_OnClosed"
					Opened="Tv1ContextMenu_OnOpened"
					StaysOpen="False"
					OverridesDefaultStyle="True"
					>


				<ContextMenu.Template>
					<ControlTemplate x:Name="ContextTemplate"
							TargetType="{x:Type ContextMenu}"
							>

						<Border x:Name="ContextMenuBorder"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								>

							<Grid x:Name="GridXx"
									RenderOptions.ClearTypeHint="Enabled"
									>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<Grid.RowDefinitions>
									<RowDefinition Height="*" />
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>

								<StackPanel
										Grid.Column="0"
										Grid.Row="0"
										Height="20"
										Orientation="Horizontal"
										Visibility="Collapsed"
										>

									<Rectangle
											Margin="1,0,0,0"
											Width="10"
											Height="10"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle.Style>
											<Style TargetType="Rectangle">
												<Setter Property="Fill" Value="DimGray" />
												<Style.Triggers>
													<DataTrigger Value="true" Binding="{Binding CanExpand}">
														<Setter Property="Fill" Value="LimeGreen" />
													</DataTrigger>
													<DataTrigger Value="false" Binding="{Binding CanExpand}">
														<Setter Property="Fill" Value="Red" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Rectangle.Style>
									</Rectangle>

									<Rectangle
											Margin="1,0,0,0"
											Width="10"
											Height="10"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle.Style>
											<Style TargetType="Rectangle">
												<Setter Property="Fill" Value="DimGray" />
												<Style.Triggers>
													<DataTrigger Value="true" Binding="{Binding IsExpanded}">
														<Setter Property="Fill" Value="LimeGreen" />
													</DataTrigger>
													<DataTrigger Value="false" Binding="{Binding IsExpanded}">
														<Setter Property="Fill" Value="Red" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Rectangle.Style>
									</Rectangle>


									<Rectangle
											Margin="1,0,0,0"
											Width="10"
											Height="10"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle.Style>
											<Style TargetType="Rectangle">
												<Setter Property="Fill" Value="DimGray" />
												<Style.Triggers>
													<DataTrigger Value="true" Binding="{Binding Mws.NodeEditing, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}, ConverterParameter='1'}">
														<Setter Property="Fill" Value="LimeGreen" />
													</DataTrigger>
													<DataTrigger Value="false" Binding="{Binding Mws.NodeEditing, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}, ConverterParameter='2'}">
														<Setter Property="Fill" Value="Red" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Rectangle.Style>
									</Rectangle>

									<Rectangle
											Margin="1,0,0,0"
											Width="10"
											Height="10"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											>
										<Rectangle.Style>
											<Style TargetType="Rectangle">
												<Setter Property="Fill" Value="DimGray" />
												<Style.Triggers>
													<DataTrigger Value="true" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}}">
														<Setter Property="Fill" Value="LimeGreen" />
													</DataTrigger>
													<DataTrigger Value="false" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}}">
														<Setter Property="Fill" Value="Red" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Rectangle.Style>
									</Rectangle>

								</StackPanel>

								<Canvas
										Grid.Column="0"
										Grid.Row="1"
										Width="0"
										Height="0"
										HorizontalAlignment="Left"
										VerticalAlignment="Top"
										>
									<Rectangle x:Name="OpaqueRect"
											Width="{Binding ActualWidth,
																			ElementName=ContextMenuBorder}"
											Height="{Binding ActualHeight,
																			 ElementName=ContextMenuBorder}"
											Fill="{Binding Background,
																		 ElementName=ContextMenuBorder}"
											/>

								</Canvas>

								<ItemsPresenter x:Name="ItemsPresenter"
										Grid.Column="0"
										Grid.Row="1"
										Margin="{TemplateBinding Padding}"
										KeyboardNavigation.DirectionalNavigation="Cycle"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>

						</Border>

					</ControlTemplate>

				</ContextMenu.Template>


				<!--  menu item: expand / collapse  -->
				<MenuItem x:Name="mnu_expcol_all"
						Click="Tv1ContextMenuExpColAll_OnClick"
						>
					<!--  Tag="{DynamicResource brush.ctx.disabled}"  -->
					<!-- <DataTrigger Value="true" Binding="{Binding Mws.NodeCopy.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}}"> -->
					<MenuItem.Icon>

						<StackPanel
								VerticalAlignment="Center"
								Orientation="Vertical"
								>

							<Path x:Name="pthExpCollapseTop"
									Stretch="Uniform"
									>
								<Path.Style>
									<Style
											TargetType="Path"
											BasedOn="{StaticResource CtxBase}"
											>
										<Setter Property="Data" Value="{StaticResource Icon.Asterisk.01}" />

										<Style.Triggers>

											<DataTrigger Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Fill" Value="LawnGreen" />

											</DataTrigger>

											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
													<Condition Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
												</MultiDataTrigger.Conditions>
												<!-- <Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" /> -->
												<Setter Property="Fill" Value="LawnGreen" />
											</MultiDataTrigger>


											<DataTrigger Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" />
												<!-- <Setter Property="Fill" Value="LawnGreen" /> -->
											</DataTrigger>

										</Style.Triggers>

									</Style>
								</Path.Style>
							</Path>

							<Path x:Name="pthExpCollapseBottom"
									Margin="0,-1,0,2"
									Stretch="Uniform"
									>
								<Path.Style>
									<Style
											TargetType="Path"
											BasedOn="{StaticResource CtxBase}"
											>
										<Setter Property="Data" Value="{StaticResource Icon.Arrow.Dn2}" />

										<Style.Triggers>

											<DataTrigger Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Fill" Value="LawnGreen" />
											</DataTrigger>

											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
													<Condition Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
												</MultiDataTrigger.Conditions>
												<!-- <Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" /> -->
												<Setter Property="Fill" Value="LawnGreen" />
											</MultiDataTrigger>

											<DataTrigger Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Data" Value="{StaticResource Icon.Asterisk.01}" />
												<!-- <Setter Property="Fill" Value="LawnGreen" /> -->
											</DataTrigger>

										</Style.Triggers>

									</Style>
								</Path.Style>
							</Path>

						</StackPanel>


					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="{x:Type MenuItem}"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="CommandParameter" Value="{Binding ContextCmdExpandAll, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
							<Setter Property="Header" Value="{Binding ContextCmdExpandAll, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
							<Setter Property="Tag" Value="0" />

							<!--  disabled  -->
							<Style.Triggers>


								<!--
									trigger - expand item
									is NOT cannot select (fixed or locked)
									
									editing not modified
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!-- <Condition Value="false" Binding="{Binding Item.IsLocked}" /> -->
										<!-- <Condition Value="false" Binding="{Binding Item.IsFixed}" /> -->
										<Condition Value="false" Binding="{Binding Item.CannotSelect}" />

										<!-- <Condition Value="true" Binding="{Binding CanExpand}" /> -->
										<!-- <Condition Value="false" Binding="{Binding IsExpanded}" /> -->
										<Condition Value="False" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />

										<Condition Value="false" Binding="{Binding BaseOfTree.HasGrandChildrenExpanded, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />

									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="Foreground" Value="White" />
									<Setter Property="Tag" Value="1" />
								</MultiDataTrigger>


								<!--
									trigger - collapse item
									is NOT cannot select (fixed or locked)
									
									editing not modified
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!-- <Condition Value="false" Binding="{Binding Item.IsLocked}" /> -->
										<!-- <Condition Value="false" Binding="{Binding Item.IsFixed}" /> -->
										<Condition Value="false" Binding="{Binding Item.CannotSelect}" />

										<!-- <Condition Value="true" Binding="{Binding CanExpand}" /> -->
										<!-- <Condition Value="true" Binding="{Binding IsExpanded}" /> -->
										<Condition Value="False" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />

										<Condition Value="true" Binding="{Binding BaseOfTree.HasGrandChildrenExpanded, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />

									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="Foreground" Value="White" />
								</MultiDataTrigger>


								<!--
									trigger - change header title
									is NOT cannot select (fixed or locked)
									
									editing status does not matter
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!-- <Condition Value="false" Binding="{Binding Item.IsLocked}" /> -->
										<!-- <Condition Value="false" Binding="{Binding Item.IsFixed}" /> -->

										<Condition Value="false" Binding="{Binding Item.CannotSelect}" />

										<!-- <Condition Value="true" Binding="{Binding CanExpand}" /> -->
										<!-- <Condition Value="true" Binding="{Binding IsExpanded}" /> -->

										<Condition Value="true" Binding="{Binding BaseOfTree.HasGrandChildrenExpanded, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />

									</MultiDataTrigger.Conditions>
									<Setter Property="CommandParameter" Value="{Binding ContextCmdCollapseAll, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
									<Setter Property="Header" Value="{Binding ContextCmdCollapseAll, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
									<Setter Property="Tag" Value="2" />
								</MultiDataTrigger>
							</Style.Triggers>


						</Style>
					</MenuItem.Style>

				</MenuItem>




				<!--  menu item: expand / collapse  -->
				<MenuItem x:Name="mnu_expand"
						Click="Tv1ContextMenuExpand_OnClick"
						>
					<!--  Tag="{DynamicResource brush.ctx.disabled}"  -->
					<!-- <DataTrigger Value="true" Binding="{Binding Mws.NodeCopy.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}}"> -->
					<MenuItem.Icon>

						<StackPanel
								VerticalAlignment="Center"
								Orientation="Vertical"
								>

							<Path x:Name="pthExpTop"
									Stretch="Uniform"
									>
								<Path.Style>
									<Style
											TargetType="Path"
											BasedOn="{StaticResource CtxBase}"
											>
										<Setter Property="Data" Value="{StaticResource Icon.Arrow.Dn2}" />
										<!-- <Setter Property="Data" Value="{StaticResource Icon.Svg.Plus}" /> -->
										<!-- <Setter Property="Fill" Value="DimGray" /> -->

										<Style.Triggers>

											<DataTrigger Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Fill" Value="LawnGreen" />

											</DataTrigger>

											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
													<Condition Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
												</MultiDataTrigger.Conditions>
												<!-- <Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" /> -->
												<Setter Property="Fill" Value="LawnGreen" />
											</MultiDataTrigger>


											<DataTrigger Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" />
												<!-- <Setter Property="Fill" Value="LawnGreen" /> -->
											</DataTrigger>

										</Style.Triggers>

									</Style>
								</Path.Style>
							</Path>

							<Path x:Name="pthExpBottom"
									Margin="0,-2,0,2"
									Stretch="Uniform"
									>
								<Path.Style>
									<Style
											TargetType="Path"
											BasedOn="{StaticResource CtxBase}"
											>
										<Setter Property="Data" Value="{StaticResource Icon.Arrow.Dn2}" />
										<!-- <Setter Property="Fill" Value="DimGray" /> -->
										<!-- <Setter Property="Visibility" Value="Collapsed" /> -->

										<Style.Triggers>

											<DataTrigger Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Fill" Value="LawnGreen" />
											</DataTrigger>

											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
													<Condition Value="true" Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" />
												</MultiDataTrigger.Conditions>
												<!-- <Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" /> -->
												<Setter Property="Fill" Value="LawnGreen" />
											</MultiDataTrigger>

											<DataTrigger Value="2" Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}">
												<Setter Property="Data" Value="{StaticResource Icon.Arrow.Up2}" />
												<!-- <Setter Property="Fill" Value="LawnGreen" /> -->
											</DataTrigger>

										</Style.Triggers>

									</Style>
								</Path.Style>
							</Path>

						</StackPanel>


					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="{x:Type MenuItem}"
								BasedOn="{StaticResource Tv.context.menuitem.base}"
								>
							<Setter Property="CommandParameter" Value="{Binding ContextCmdExpand, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
							<Setter Property="Header" Value="{Binding ContextCmdExpand, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
							<Setter Property="Tag" Value="0" />

							<!--  disabled  -->
							<Style.Triggers>


								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Item.IsLocked}" />
										<Condition Value="false" Binding="{Binding Item.IsFixed}" />


										<Condition Value="true" Binding="{Binding CanExpand}" />
										<Condition Value="false" Binding="{Binding IsExpanded}" />
										<Condition Value="False" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='False'}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="Foreground" Value="White" />
									<Setter Property="Tag" Value="1" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Item.IsLocked}" />
										<Condition Value="false" Binding="{Binding Item.IsFixed}" />


										<Condition Value="true" Binding="{Binding CanExpand}" />
										<Condition Value="true" Binding="{Binding IsExpanded}" />
										<Condition Value="False" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, TargetNullValue='False', FallbackValue='False'}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="Foreground" Value="White" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Item.IsLocked}" />
										<Condition Value="false" Binding="{Binding Item.IsFixed}" />

										<Condition Value="true" Binding="{Binding CanExpand}" />
										<Condition Value="true" Binding="{Binding IsExpanded}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="CommandParameter" Value="{Binding ContextCmdCollapse, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
									<Setter Property="Header" Value="{Binding ContextCmdCollapse, Source={x:Static local:MainWindowClassifierEditor.Me}}" />
									<Setter Property="Tag" Value="2" />
								</MultiDataTrigger>
							</Style.Triggers>


						</Style>
					</MenuItem.Style>

				</MenuItem>





				<Separator Style="{StaticResource Tv.context.separator.first}" />

				<!--  menu item: add before  -->
				<MenuItem x:Name="mnu_add_cat_before"
						Header="Add Category Before"
						Style="{StaticResource Tv.context.menuitem.1c}"
						Click="Tv1ContextMenuAddBefore_OnClick"
						>

					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Vertical"
								>
							<Path
									Data="{DynamicResource Icon.Arrow.Up2}"
									Style="{StaticResource CtxIcon}"
									/>
							<!--  Height="10"  -->
							<Path
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>
				</MenuItem>

				<MenuItem x:Name="mnu_add_cat_after"
						Header="Add Category After"
						Style="{StaticResource Tv.context.menuitem.1c}"
						Click="Tv1ContextMenuAddAfter_OnClick"
						>

					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Vertical"
								>

							<!--  Height="10"  -->
							<Path
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
							<!--  Height="10"  -->
							<Path
									Data="{DynamicResource Icon.Arrow.Dn2}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>
				</MenuItem>

				<MenuItem x:Name="mnu_add_sub_cat"
						Header="Add Sub-Category"
						Style="{StaticResource Tv.context.menuitem.1c}"
						Click="Tv1ContextMenuAddChild_OnClick"
						>

					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Horizontal"
								>
							<!--  Height="10"  -->
							<Path
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
							<!--  Height="10"  -->
							<Path
									Data="{DynamicResource Icon.Arrow.Right2}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>
				</MenuItem>

				<Separator Style="{StaticResource Tv.context.separator.first}" />

				<MenuItem x:Name="mnu_sel_move_before"
						Click="Tv1ContextMenuMoveBefore_OnClick"
						>
					<MenuItem.Icon>

						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Vertical"
								>
							<Path
									Data="{DynamicResource Icon.Arrow.Up2}"
									Style="{StaticResource CtxIcon}"
									/>
							<Path
									Data="{DynamicResource Icon.Svg.Dash}"
									Style="{StaticResource CtxIcon}"
									/>
							<!--  Data="{DynamicResource Icon.Arrow.Up2}"  -->
						</StackPanel>
					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.1c}"
								>
							<Setter Property="Header" Value="Move Category Before" />
							<Style.Triggers>
								<DataTrigger Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}">
									<Setter Property="Header" Value="Move Branch Before" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>

				</MenuItem>

				<MenuItem x:Name="mnu_sel_move_after"
						Click="Tv1ContextMenuMoveAfter_OnClick"
						>

					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Vertical"
								>
							<Path
									Data="{DynamicResource Icon.Svg.Dash}"
									Style="{StaticResource CtxIcon}"
									/>
							<Path
									Data="{DynamicResource Icon.Arrow.Dn2}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.1c}"
								>
							<Setter Property="Header" Value="Move Category After" />
							<Style.Triggers>
								<DataTrigger Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}">
									<Setter Property="Header" Value="Move Branch After" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</MenuItem.Style>

				</MenuItem>

				<MenuItem x:Name="mnu_sel_move_subcat"
						Click="Tv1ContextMenuMoveChild_OnClick"
						>
					<!--  CommandParameter="{Binding ContextCmdMoveAsChild,  -->
					<!--  Mode=OneWay,  -->
					<!--  RelativeSource={RelativeSource FindAncestor,  -->
					<!--  AncestorType={x:Type local:MainWindowClassifierEditor}}}"  -->

					<MenuItem.Icon>

						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Horizontal"
								>
							<Path
									Data="{DynamicResource Icon.Svg.Dash}"
									Style="{StaticResource CtxIcon}"
									/>
							<Path
									Margin="-1,0,0,0"
									Data="{DynamicResource Icon.Arrow.Right2}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.1c}"
								>
							<Setter Property="Header" Value="Move Category as Sub-category" />
							<Style.Triggers>
								<DataTrigger Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}">
									<Setter Property="Header" Value="Move Branch as Sub-category" />
								</DataTrigger>

							</Style.Triggers>
						</Style>
					</MenuItem.Style>

				</MenuItem>

				<Separator Style="{StaticResource Tv.context.separator.first}" />


				<MenuItem x:Name="mnu_duplicate"
						Header="Duplicate Category"
						Style="{StaticResource Tv.context.menuitem.1c}"
						Click="Tv1ContextMenuDuplicate_OnClick"
						>
					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Horizontal"
								>
							<Path
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
							<Path
									Margin="-1,-1,0,0"
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>
				</MenuItem>



				<MenuItem x:Name="mnu_duplicate_branch"
						Header="Duplicate Branch"
						Click="Tv1ContextMenuDuplicateBranch_OnClick"
						>
					<!--  Style="{StaticResource Tv.context.menuitem.first}"  -->
					<MenuItem.Icon>
						<StackPanel
								HorizontalAlignment="Center"
								Orientation="Horizontal"
								>
							<Label
									Content="("
									Margin="0"
									Padding="0"
									FontSize="11"
									>
								<Label.Style>
									<Style TargetType="Label">
										<Setter Property="Foreground" Value="LawnGreen" />
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="true">
												<Setter Property="Foreground" Value="{StaticResource brush.ctx.enabled}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Label.Style>
							</Label>
							<Path
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
							<Label
									Content=")"
									Margin="0"
									Padding="0"
									FontSize="11"
									>
								<Label.Style>
									<Style TargetType="Label">
										<Setter Property="Foreground" Value="LawnGreen" />
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="true">
												<Setter Property="Foreground" Value="{StaticResource brush.ctx.enabled}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Label.Style>
							</Label>

						</StackPanel>
					</MenuItem.Icon>



					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.first}"
								>
							<Setter Property="IsEnabled" Value="true" />
							<Setter Property="Foreground" Value="White" />
							<!-- <Setter Property="Header" Value="Move Category After"/> -->

							<Style.Triggers>

								<!-- <DataTrigger Value="true" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}"> -->
								<!-- 	<Setter Property="Header" Value="Move Branch After"/> -->
								<!-- </DataTrigger> -->


								<!--  disable when  -->
								<!--  cannot select is true - is fixed, is locked, is max depth - or -  -->
								<!--  this node matches the source node (i.e. itself  -->
								<!--  the editing node has changes  -->


								<DataTrigger Value="true" Binding="{Binding CannotSelect}">
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="Foreground" Value="DimGray" />
								</DataTrigger>

								<DataTrigger Value="false" Binding="{Binding ChildCount, Converter={StaticResource CompareInt}, ConverterParameter='> 0'}">
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="Foreground" Value="DimGray" />
								</DataTrigger>

								<DataTrigger Value="true">
									<DataTrigger.Binding>
										<MultiBinding Converter="{StaticResource ObjsEqual}">
											<Binding />
											<Binding
													Path="NodeContextSource"
													Source="{x:Static local:MainWindowClassifierEditor.Me}"
													/>
										</MultiBinding>
									</DataTrigger.Binding>
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="Foreground" Value="DimGray" />
								</DataTrigger>

								<DataTrigger Value="true" Binding="{Binding Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}, FallbackValue='false'}">
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="Foreground" Value="DimGray" />
								</DataTrigger>

							</Style.Triggers>
						</Style>
					</MenuItem.Style>


				</MenuItem>



				<MenuItem x:Name="mnu_dup_as_subcat"
						Header="Duplicate Category as a Sub-Category"
						Style="{StaticResource Tv.context.menuitem.1c}"
						Click="Tv1ContextMenuDuplicateAsChild_OnClick"
						>

					<MenuItem.Icon>

						<StackPanel
								HorizontalAlignment="Center"
								IsEnabled="{Binding Path=IsEnabled,
																		RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}"
								Orientation="Horizontal"
								>
							<Path
									Data="{DynamicResource Icon.Arrow.Right2}"
									Style="{StaticResource CtxIcon}"
									/>
							<Path
									Margin="-1,0,0,0"
									Data="{DynamicResource Icon.Svg.Plus}"
									Style="{StaticResource CtxIcon}"
									/>
						</StackPanel>
					</MenuItem.Icon>


				</MenuItem>

				<Separator Style="{StaticResource Tv.context.separator.first}" />

				<MenuItem x:Name="mnu_del_cat"
						Header="Delete Category"
						Style="{StaticResource Tv.context.menuitem.1a}"
						Click="Tv1ContextMenuDelete_OnClick"
						>

					<MenuItem.Icon>
						<Path
								Data="{StaticResource IconDeleteGeom}"
								Style="{StaticResource CtxIcon}"
								/>
					</MenuItem.Icon>

				</MenuItem>

				<Separator Style="{StaticResource Tv.context.separator.second}" />

				<MenuItem x:Name="mnu_apply_move"
						Header="{Binding Path=MoveTitle,
														 Source={x:Static local:MainWindowClassifierEditor.Me}}"
						Click="Tv1ContextMenuApply_OnClick"
						>

					<MenuItem.Icon>
						<Path
								Data="{StaticResource IconDeleteGeom}"
								Style="{StaticResource CtxIcon}"
								/>
					</MenuItem.Icon>

					<MenuItem.Style>
						<Style
								TargetType="MenuItem"
								BasedOn="{StaticResource Tv.context.menuitem.second}"
								>
							<Setter Property="IsEnabled" Value="true" />

							<Style.Triggers>


								<!--  context node is the same as the source node - disable  -->
								<DataTrigger Value="true">
									<DataTrigger.Binding>
										<MultiBinding Converter="{StaticResource ObjsEqual}">
											<Binding />
											<Binding
													Path="NodeContextSource"
													Source="{x:Static local:MainWindowClassifierEditor.Me}"
													/>
										</MultiBinding>
									</DataTrigger.Binding>
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>

								<DataTrigger Value="true">
									<DataTrigger.Binding>
										<MultiBinding
												Converter="{StaticResource IsChildOf}"
												ConverterParameter="context menu"
												>
											<!--  context node  -->
											<Binding />
											<!--  source node  -->
											<Binding
													Path="NodeContextSource"
													Source="{x:Static local:MainWindowClassifierEditor.Me}"
													/>
										</MultiBinding>
									</DataTrigger.Binding>
									<Setter Property="IsEnabled" Value="false" />
								</DataTrigger>


							</Style.Triggers>

						</Style>
					</MenuItem.Style>


				</MenuItem>

				<MenuItem x:Name="mnu_cancel_move"
						Header="{Binding Path=[0],
														 Source={x:Static local:MainWindowClassifierEditor.ContextMoveTitles}}"
						Style="{StaticResource Tv.context.menuitem.second}"
						Click="Tv1ContextMenuCancel_OnClick"
						>

					<MenuItem.Icon>
						<Path
								Data="{StaticResource IconDeleteGeom}"
								Style="{StaticResource CtxIcon}"
								/>
					</MenuItem.Icon>

				</MenuItem>



			</ContextMenu>

			<!--#endregion-->

			<!--#region > tv1 style and template-->

			<Style x:Key="Tv1ItemFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<Style x:Key="Tv1ItemContainerStyle1"
					TargetType="{x:Type TreeViewItem}"
					>

				<EventSetter
						Event="MouseLeftButtonUp"
						Handler="TreeViewItem_OnMouseUp"
						/>

				<EventSetter
						Event="Selected"
						Handler="TreeViewItem_OnSelected"
						/>

				<EventSetter
						Event="Unselected"
						Handler="TreeViewItem_OnUnSelected"
						/>

				<!--  Event="PreviewMouseDown"  -->
				<!-- <Setter Property="d:DataContext" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/> -->
				<Setter Property="ContextMenu" Value="{StaticResource Tv1ContextMenu}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource Tv1ItemFocusVisual}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
				<Setter Property="IsSelected" Value="{Binding IsNodeSelected, Mode=TwoWay}" />
				<Setter Property="Padding" Value="1,0,0,0" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate x:Name="Tv1ItemContainer"
								TargetType="TreeViewItem"
								>
							<!--  removed  -->
							<!--  <Grid Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"  -->
							<!--  Margin="0,2,0,0"  -->
							<!--  >  -->
							<!--  ~1~  UIElement.MouseLeftButtonUp="UIElement_OnMouseLeftButtonUp"  @1@  -->
							<!--    -->
							<!--    -->
							<!-- 	<Grid.ColumnDefinitions> -->
							<!--  <ColumnDefinition  -->
							<!--  Width="Auto"  -->
							<!--  MinWidth="19"  -->
							<!--  />  -->
							<!-- 		<ColumnDefinition /> -->
							<!-- 	</Grid.ColumnDefinitions> -->
							<!-- 	<Grid.RowDefinitions> -->
							<!-- 		<RowDefinition Height="Auto" /> -->
							<!-- 		<RowDefinition /> -->
							<!-- 	</Grid.RowDefinitions> -->

							<DockPanel d:DataContext="{Binding ElementName=MainWinClsfrEd, Path=BaseOfTree}">

								<ToggleButton x:Name="Expander"
										VerticalAlignment="Top"
										IsChecked="{Binding IsExpanded,
																				RelativeSource={RelativeSource TemplatedParent}}"
										IsEnabled="true"
										DockPanel.Dock="Left"
										ClickMode="Press"
										MouseEnter="Expander_MouseEnter"
										MouseLeave="Expander_MouseLeave"
										Style="{StaticResource Tv1ExpandCollapseToggleStyle}"
										/>

								<Border x:Name="Bdr"
										Margin="0,0.5,0,0"
										Width="Auto"
										BorderThickness="12,1.5,.5,6"
										DockPanel.Dock="Top"
										CornerRadius="6"
										SnapsToDevicePixels="True"
										>
									<Border.Style>
										<Style TargetType="{x:Type Border}">
											<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											<Setter Property="BorderBrush">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
														<GradientStop Offset="0.03" Color="{StaticResource TreeViewRow.BorderBrush.Dark.C}">
														</GradientStop>
														<GradientStop Offset="0.10" Color="{StaticResource TreeViewRow.BorderBrush.Light.C}" />
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
											<Style.Triggers>
												<DataTrigger Value="true" Binding="{Binding IsNodeSelected}">
													<Setter Property="BorderBrush">
														<Setter.Value>
															<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
																<GradientStop Offset="0.03" Color="{StaticResource TreeViewRow.BorderBrush.Dark.C}">
																</GradientStop>
																<GradientStop Offset="0.10" Color="{StaticResource TreeViewRow.BorderBrush.Selected.C}" />
															</LinearGradientBrush>
														</Setter.Value>
													</Setter>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Border.Style>

									<!-- <Border.BorderBrush> -->
									<!-- 	<LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0"> -->
									<!-- 		<GradientStop Offset="0.03" Color="{StaticResource TreeViewRow.BorderBrush.Dark.C}" > -->
									<!-- 		</GradientStop> -->
									<!-- 		<GradientStop Offset="0.10" Color="{StaticResource TreeViewRow.BorderBrush.Light.C}" /> -->
									<!-- 	</LinearGradientBrush> -->
									<!-- </Border.BorderBrush> -->


									<Border x:Name="BD"
											Margin="-3.5,-.5,.5,-1"
											BorderThickness="4,0.5,2,0.5"
											BorderBrush="{StaticResource TreeView.Background}"
											CornerRadius="5"
											>
										<Border.Style>
											<Style TargetType="{x:Type Border}">
												<Setter Property="Background" Value="{StaticResource TreeView.Background}" />
											</Style>
										</Border.Style>

										<VirtualizingStackPanel
												Grid.Column="1"
												Grid.Row="0"
												>

											<Border x:Name="Bd"
													Padding="{TemplateBinding Padding}"
													BorderThickness="{TemplateBinding BorderThickness}"
													BorderBrush="{TemplateBinding BorderBrush}"
													SnapsToDevicePixels="true"
													CornerRadius="5"
													>
												<Border.Style>
													<Style TargetType="{x:Type Border}">
														<Setter Property="Background" Value="{StaticResource ItemsControl.Selected.InActive.Background}" />
														<Style.Triggers>

															<!-- <Trigger Property="IsMouseOver" Value="True"> -->
															<!-- 	<Setter Property="Background" Value="{StaticResource ItemsControl.MouseOver.Background}"/> -->
															<!-- </Trigger> -->


															<!--
																normal highlight mode
																* mouse is over
																* is enabled
																* is NOT target
																* is NOT source
																* HAS source
																* item being edited does not need saving
															-->
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Value="true" Binding="{Binding ElementName=Bd, Path=IsMouseOver}" />

																	<Condition Value="true" Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Condition Value="false" Binding="{Binding IsContextTarget}" />
																	<Condition Value="false" Binding="{Binding IsContextSource}" />
																	<Condition Value="true" Binding="{Binding NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}" />
																	<Condition Value="False" Binding="{Binding Path=Mws.NodeEditing.Item.NeedsSaving, Source={x:Static local:MainWindowClassifierEditor.Me}}">
																	</Condition>
																</MultiDataTrigger.Conditions>
																<Setter Property="Background" Value="{StaticResource ItemsControl.MouseOver.Background}" />
															</MultiDataTrigger>

															<!--
																special highlight mode = got context source (i.e. moving node)
																* mouse is over
																* is enabled
																* is NOT source
																* HAS source
																* is NOT fixed
																* is NOT locked
															-->
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Value="true" Binding="{Binding ElementName=Bd, Path=IsMouseOver}" />

																	<Condition Value="true" Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" />
																	<Condition Value="false" Binding="{Binding IsContextSource}" />
																	<Condition Value="false" Binding="{Binding NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}" />

																	<Condition Value="true" Binding="{Binding Item.IsFixed, Converter={StaticResource InvertBool}}" />
																	<Condition Value="true" Binding="{Binding Item.IsLocked, Converter={StaticResource InvertBool}}" />
																	<Condition Value="false">
																		<Condition.Binding>
																			<MultiBinding
																					Converter="{StaticResource IsChildOf}"
																					ConverterParameter="item container"
																					>
																				<Binding />
																				<Binding
																						Path="NodeContextSource"
																						Source="{x:Static local:MainWindowClassifierEditor.Me}"
																						/>
																			</MultiBinding>
																		</Condition.Binding>
																	</Condition>

																</MultiDataTrigger.Conditions>
																<Setter Property="Background" Value="DimGray" />
															</MultiDataTrigger>

														</Style.Triggers>
													</Style>
												</Border.Style>

												<ContentPresenter x:Name="PART_Header"
														ContentSource="Header"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
														/>

											</Border>

											<ItemsPresenter x:Name="ItemsHost" />
										</VirtualizingStackPanel>
									</Border>

								</Border>
							</DockPanel>
							<!-- </Grid> -->


							<ControlTemplate.Triggers>

								<!--  expander visibility  -->
								<Trigger Property="IsExpanded" Value="false">
									<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
								</Trigger>

								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
								</Trigger>

								<!--  context menu control  -->

								<!--
									context menu status
									* context select, CannotSelect IS true
									* disable the context menu
								-->
								<DataTrigger Value="true" Binding="{Binding Item.CannotSelect}">
									<Setter Property="ContextMenu" Value="{x:Null}" />
								</DataTrigger>


								<!--  decorations  -->

								<!--  not enabled decoration decoration  -->
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>

								<!--
									is selected  (i.e. for editing)
									* and is NOT target
									* and is NOT source
									* has ctx source is null
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!--  true  -->
										<Condition Value="true" Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" />

										<!--  false  -->
										<Condition Value="false" Binding="{Binding Path=IsContextTarget}" />
										<Condition Value="false" Binding="{Binding Path=IsContextSource}" />
										<Condition Value="true" Binding="{Binding NodeContextSource, Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource NullObjToTrue}}" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Selected.Active.Background}" />
								</MultiDataTrigger>

								<!--
									is target
									* and is NOT fixed
									* and is NOT locked
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!--  false  -->
										<Condition Value="true" Binding="{Binding Path=IsContextTarget}" />
										<!--  true  -->
										<!-- <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self} }" Value="false" /> -->

										<Condition Value="true" Binding="{Binding Item.IsFixed, Converter={StaticResource InvertBool}}" />
										<Condition Value="true" Binding="{Binding Item.IsLocked, Converter={StaticResource InvertBool}}" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.ContextTarget.Background}" />
								</MultiDataTrigger>


								<!--  is source  -->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<!--  false  -->
										<Condition Value="true" Binding="{Binding Path=IsContextSource}" />
										<!--  true  -->
										<!-- <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self} }" Value="false" /> -->
									</MultiDataTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource TreeView.ContextSource.Background}" />
								</MultiDataTrigger>


								<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
									<Setter TargetName="Bd" Property="Background" Value="#77777777" />
									<!-- <Setter TargetName="Bd" Property="Background" Value="#33f80000" /> -->
								</DataTrigger>

								<DataTrigger Value="true" Binding="{Binding Item.IsLocked}">
									<Setter TargetName="Bd" Property="Background" Value="#3333a3" />
								</DataTrigger>

								<!--
									is parent fixed and is admin
									>> disable
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding Source={x:Static local:MainWindowClassifierEditor.Me}, Path=UserIsAdmin}" />
										<Condition Value="true" Binding="{Binding Item.IsParentExFixed}" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="Bd" Property="Background" Value="#AA444444" />
								</MultiDataTrigger>


								<!--  enable status  -->

								<!--
									is fixed and is not admin
									>> disable
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Source={x:Static local:MainWindowClassifierEditor.Me}, Path=UserIsAdmin}" />
										<Condition Value="true" Binding="{Binding Item.IsFixed}" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="Bd" Property="IsEnabled" Value="False" />
								</MultiDataTrigger>

								<!--
									is parent fixed and is not admin
									>> disable
								-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Source={x:Static local:MainWindowClassifierEditor.Me}, Path=UserIsAdmin}" />
										<Condition Value="true" Binding="{Binding Item.IsParentExFixed}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="False" />
									<Setter TargetName="Bd" Property="Background" Value="#22333333" />
								</MultiDataTrigger>


							</ControlTemplate.Triggers>
						</ControlTemplate>


					</Setter.Value>
				</Setter>

				<Style.Triggers>


					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>

			</Style>


			<Style x:Key="Tv1Style1"
					TargetType="{x:Type TreeView}"
					>
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ItemsControl.Border.Frame}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Padding" Value="1" />
				<Setter Property="IsEnabled" Value="{Binding Path=Mws.NodeEditing.Item.NeedsSaving,
					Source={x:Static local:MainWindowClassifierEditor.Me}, Converter={StaticResource InvertBool}, 
					FallbackValue='True'}"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeView}">
							<Border x:Name="Bd"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									SnapsToDevicePixels="true"
									>
								<ScrollViewer x:Name="_tv_scrollviewer_"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										CanContentScroll="false"
										Focusable="false"
										HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										Template="{StaticResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Tv1ScrollViewerControlTemplate1}"  -->
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</Trigger>
								<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
									<Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
						<Setter Property="ItemsPanel">
							<Setter.Value>
								<ItemsPanelTemplate>
									<VirtualizingStackPanel />
								</ItemsPanelTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Tv1Lv1Style"
					TargetType="{x:Type ListView}"
					>
				<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListView}">

							<Border x:Name="Bd"
									Padding="0,5,0,5"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="6"
									SnapsToDevicePixels="true"
									>
								<ScrollViewer
										Margin="0,0,3,0"
										Padding="{TemplateBinding Padding}"
										Focusable="false"
										Template="{StaticResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Lv1ScrollViewerTemplate1}"  -->
									<Grid Margin="0">
										<Grid.RowDefinitions>
											<RowDefinition Height="*" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<ItemsPresenter
												Grid.Row="0"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												/>


										<Border x:Name="Bdr"
												Grid.Row="1"
												Margin="5,2,2,4"
												Padding="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Bottom"
												BorderThickness="0"
												BorderBrush="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"
												CornerRadius="2"
												>
											<Border.Style>
												<Style TargetType="{x:Type Border}">
													<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Normal}" />
													<Setter Property="Visibility" Value="Collapsed" />
													<Style.Triggers>
														<DataTrigger Value="0" Binding="{Binding Item.CompareOps.Count, FallbackValue=0}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<DataTrigger Value="{x:Null}" Binding="{Binding Item.CompareOps, FallbackValue={x:Null}}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Disabled}">
															</Setter>
														</Trigger>
													</Style.Triggers>
												</Style>
											</Border.Style>

											<StackPanel Orientation="Horizontal">

												<Label x:Name="Label1"
														Content="No Conditions"
														Width="Auto"
														Padding="10,1,10,2"
														HorizontalContentAlignment="Center"
														VerticalContentAlignment="Center"
														FontSize="{StaticResource ConditionFontSize}"
														Style="{StaticResource Label.ItemsControl.Base}"
														/>

											</StackPanel>

										</Border>

									</Grid>
								</ScrollViewer>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsGrouping" Value="true" />
										<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</MultiTrigger>
							</ControlTemplate.Triggers>

						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<Style x:Key="Lv3Style3"
					TargetType="{x:Type ListView}"
					>
				<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Normal}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListView}">

							<Border x:Name="Bd"
									Padding="0,3,0,3"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="6"
									SnapsToDevicePixels="true"
									>
								<ScrollViewer
										Margin="0,0,3,0"
										Padding="{TemplateBinding Padding}"
										Focusable="false"
										Template="{StaticResource Tv1ScrollViewerControlTemplate1}"
										>
									<!--  Template="{DynamicResource Lv1ScrollViewerTemplate1}"  -->
									<Grid Margin="0">
										<Grid.RowDefinitions>
											<RowDefinition Height="*" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<ItemsPresenter
												Grid.Row="0"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												/>


										<Border x:Name="Bdr"
												Grid.Row="1"
												Margin="5,2,2,4"
												Padding="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Bottom"
												BorderThickness="0"
												BorderBrush="{StaticResource ItemsControl.Item.Alt1.Background.Normal}"
												CornerRadius="2"
												>
											<Border.Style>
												<Style TargetType="{x:Type Border}">
													<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Normal}" />
													<Setter Property="Visibility" Value="Collapsed" />
													<Style.Triggers>
														<DataTrigger Value="0" Binding="{Binding Item.CompareOps.Count, FallbackValue=0}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<DataTrigger Value="{x:Null}" Binding="{Binding Item.CompareOps, FallbackValue={x:Null}}">
															<Setter Property="Visibility" Value="Visible" />
														</DataTrigger>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Background" Value="{StaticResource ItemsControl.Item.Alt1.Background.Disabled}">
															</Setter>
														</Trigger>
													</Style.Triggers>
												</Style>
											</Border.Style>

											<StackPanel Orientation="Horizontal">

												<Label x:Name="Label1"
														Content="No Conditions"
														Width="Auto"
														Padding="10,1,10,2"
														HorizontalContentAlignment="Center"
														VerticalContentAlignment="Center"
														FontSize="{StaticResource ConditionFontSize}"
														Style="{StaticResource Label.ItemsControl.Base}"
														/>

											</StackPanel>

										</Border>

									</Grid>
								</ScrollViewer>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="Bd" Property="Background" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
									<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ItemsControl.Item.Background.Disabled}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsGrouping" Value="true" />
										<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</MultiTrigger>
							</ControlTemplate.Triggers>

						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<Style x:Key="Tv1LvItemContainerStyle1" x:Name="lvItem01"
					TargetType="{x:Type ListViewItem}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Background" Value="{Binding Background, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderBrush" Value="{Binding BorderBrush, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderThickness" Value="{Binding BorderThickness, FallbackValue=1, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Foreground" Value="{Binding Foreground, FallbackValue=White, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, FallbackValue=Center}" />
				<Setter Property="Margin" Value="4,0,4,0" />
				<Setter Property="Padding" Value="{Binding Padding, FallbackValue=0, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<ContentPresenter x:Name="contentPresenterLv"
										Margin="0"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="Stretch"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Center}" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<!--  DataType="{x:Type tree:TreeNode}"  -->
			<HierarchicalDataTemplate x:Key="Tv1ItemTemplate1" x:Name="Hdt1"
					DataType="{x:Type treeSupport:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>

				<Grid x:Name="GD1"
						Margin="0,1,2,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="3" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition Height="Auto" />
						<RowDefinition />
					</Grid.RowDefinitions>

					<!--  header  -->
					<!--  status markers  -->
					<StackPanel
							Grid.Column="0"
							Grid.Row="0"
							Orientation="Vertical"
							Visibility="Collapsed"
							>
						<Rectangle
								Width="3"
								Height="3"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								>
							<Rectangle.Style>
								<Style TargetType="Rectangle">
									<Setter Property="Fill" Value="DimGray" />

									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=IsNodeSelected}">
											<Setter Property="Fill" Value="LawnGreen" />
										</DataTrigger>
									</Style.Triggers>

								</Style>
							</Rectangle.Style>
						</Rectangle>

						<Rectangle
								Margin="0,1,0,0"
								Width="3"
								Height="3"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								>
							<Rectangle.Style>
								<Style TargetType="Rectangle">
									<Setter Property="Fill" Value="DimGray" />

									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=TreeNodeModified}">
											<Setter Property="Fill" Value="LawnGreen" />
										</DataTrigger>
									</Style.Triggers>

								</Style>
							</Rectangle.Style>
						</Rectangle>

						<Rectangle
								Margin="0,1,0,0"
								Width="3"
								Height="3"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								>
							<Rectangle.Style>
								<Style TargetType="Rectangle">
									<Setter Property="Fill" Value="DimGray" />

									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=TreeNodeChildItemModified}">
											<Setter Property="Fill" Value="LawnGreen" />
										</DataTrigger>
									</Style.Triggers>

								</Style>
							</Rectangle.Style>
						</Rectangle>

					</StackPanel>

					<DockPanel
							Grid.Column="1"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Margin="8,2,0,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							
							>

						<Label x:Name="Label2"
								Content="{Binding Item.Title,
																	FallbackValue='title'}"
								Margin="0,2,10,0"
								MinWidth="140"
								DockPanel.Dock="Left"

								>
								<Label.Style>
									<Style TargetType="Label" BasedOn="{StaticResource Label.ItemsControl.Header}">
									<Setter Property="Foreground" Value="White"/>

									<Style.Triggers>
									<DataTrigger Binding="{Binding Item.ShtCatModified}" Value="true">
										<Setter Property="Foreground" Value="LawnGreen"/>
									</DataTrigger>

									</Style.Triggers>
									</Style>
								</Label.Style>

						</Label>

						<Label x:Name="Label3"
								Content="{Binding Item.Description,
																	FallbackValue='description descripton description'}"
								Margin="5,2,4,0"
								MinWidth="100"
								DockPanel.Dock="Left"
								Style="{StaticResource Label.ItemsControl.Header}"
								/>


						<Button x:Name="BtnDelete"
								Content="{StaticResource IconDelete04}"
								Width="13"
								Height="13"
								VerticalAlignment="Top"
								BorderThickness="0"
								DockPanel.Dock="Right"
								Click="BtnDelete_OnClick"
								>
							<Button.Style>
								<Style
										TargetType="Button"
										BasedOn="{StaticResource Button.Stealth}"
										>
									<Setter Property="Background" Value="Transparent" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Foreground" Value="DimGray" />
											<Setter Property="Background" Value="Transparent" />
											<Setter Property="Border.Background" Value="Transparent" />
										</Trigger>
										<DataTrigger Value="1" Binding="{Binding ElementName=MainWinClsfrEd, Path=ClassificationFile.TreeBase.ChildCount}">
											<Setter Property="IsEnabled" Value="False">
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>


						<StackPanel
								Margin="0,0,7,-4"
								MinWidth="70"
								HorizontalAlignment="Right"
								DockPanel.Dock="Right"
								Orientation="Vertical"
								Visibility="Collapsed"
								>

							<DockPanel
									Margin="0,0,0,0"
									Width="52"
									HorizontalAlignment="Right"
									>

								<Label
										Content="{Binding Path=Item.ID,
																			FallbackValue='ABCD'}"
										Margin="0,0,0,0"
										Width="20"
										Padding="0"
										HorizontalAlignment="Right"
										HorizontalContentAlignment="Right"
										FontSize="7"
										Foreground="DarkGray"
										DockPanel.Dock="Right"
										/>
								<Label
										Content="ID"
										Margin="0,0,0,0"
										Padding="0"
										HorizontalAlignment="Right"
										FontSize="7"
										Foreground="DimGray"
										DockPanel.Dock="Right"
										/>

							</DockPanel>

							<DockPanel
									Margin="0,0,0,0"
									Width="52"
									HorizontalAlignment="Right"
									>

								<Label
										Content="{Binding Path=Item.Depth,
																			FallbackValue='2'}"
										Margin="0,0,0,0"
										Width="20"
										Padding="0"
										HorizontalAlignment="Right"
										HorizontalContentAlignment="Right"
										FontSize="7"
										Foreground="DarkGray"
										DockPanel.Dock="Right"
										/>

								<Label
										Content="Depth"
										Margin="0,0,0,0"
										Padding="0"
										HorizontalAlignment="Right"
										FontSize="7"
										Foreground="DimGray"
										DockPanel.Dock="Right"
										/>

							</DockPanel>

							<Label
									Content="{Binding RootParent.Item.Title,
																		FallbackValue='grandpa',
																		Mode=OneWay}"
									Margin="0,0,0,0"
									Padding="0"
									HorizontalAlignment="Right"
									FontSize="7"
									Foreground="DarkGray"
									DockPanel.Dock="Right"
									/>

						</StackPanel>

					</DockPanel>

					<DockPanel
							Grid.Column="1"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="8,7,0,7"
					>


						<!-- -->
						<!-- <Border x:Name="BdItemClass" -->
						<!-- 		Margin="0,0,5,0" -->
						<!-- 		Width="105" -->
						<!-- 		Padding="0" -->
						<!-- 		HorizontalAlignment="Left" -->
						<!-- 		BorderThickness="0" -->
						<!-- 		CornerRadius="3" -->
						<!-- 		DockPanel.Dock="Left" -->
						<!-- 		> -->
						<!-- -->
						<!-- 	<Border.Style> -->
						<!-- 		<Style -->
						<!-- 				TargetType="Border" -->
						<!-- 				BasedOn="{StaticResource Border.Base}" -->
						<!-- 				> -->
						<!-- 			<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->
						<!-- 			<Style.Triggers> -->
						<!-- 				<Trigger Property="IsEnabled" Value="False"> -->
						<!-- 					<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->
						<!-- 				</Trigger> -->
						<!-- 			</Style.Triggers> -->
						<!-- 		</Style> -->
						<!-- 	</Border.Style> -->
						<!-- -->
						<!-- 	<Label x:Name="LabelItemClass" -->
						<!-- 			Content="{Binding Item.ItemClassName, -->
						<!-- 												FallbackValue='class name'}" -->
						<!-- 			Margin="0,0,0,2" -->
						<!-- 			Padding="0" -->
						<!-- 			HorizontalAlignment="Center" -->
						<!-- 			Style="{StaticResource Label.Condition.Condition}" -->
						<!-- 			/> -->
						<!-- -->
						<!-- </Border> -->
						<!-- -->

						
						<ComboBox x:Name="CbxItemClassx"
								Tag="Item"
								Margin="0,0,5,0"
								Width="105"
								Height="18"
								Padding="0"

								HorizontalAlignment="right"

								d:ItemsSource="{Binding Source={x:Static sheetSupport:ItemClassDef.ItemClassDefs}}"
								FontSize="{StaticResource ConditionFontSize}"
								BorderThickness="2"
								custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
								custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
								IsEditable="False"
								IsReadOnly="True"
								custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
								custom:CustomProperties.DropDownWidth="90.0"
								DockPanel.Dock="Left"
								MaxDropDownHeight="100"
								SelectedValuePath="Key"
								SelectedValue="{Binding Item.ItemClassIndex,
																				FallbackValue=1}"
								ItemsSource="{Binding 
											Source={x:Static sheetSupport:ItemClassDef.ItemClassDefs}}"
								ItemContainerStyle="{StaticResource ComboBoxItemContainerStyle1}"
								FocusVisualStyle="{x:Null}"
								Template="{StaticResource ComboBoxTemplate1}"
								>
							<!-- d:DataContext="{x:Static sample:SampleData.Temp}" -->
							<!--  IsDropDownOpen="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpenCbx0, Mode=TwoWay}"  -->
							<!--  SelectionChanged="CbxItemClass_SelectionChanged"  -->
							<!--  MouseUp="Cbx_OnMouseUp"  -->

							<ComboBox.ItemTemplate>
								<DataTemplate x:Name="DtCbxItemClass">
									<TextBlock
											Margin="0"
											Padding="0,0,0,2"
											FontSize="10"
											Text="{Binding Path=Value.Name,
																		 FallbackValue='name'}"
											>
										<TextBlock.Style>
											<Style TargetType="TextBlock">
												<Setter Property="Foreground" Value="White" />
												<Style.Triggers>
													<Trigger Property="IsEnabled" Value="false">
														<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</TextBlock.Style>
									</TextBlock>
								</DataTemplate>
							</ComboBox.ItemTemplate>


							<ComboBox.Style>
								<Style
										TargetType="ComboBox"
										BasedOn="{StaticResource Cbox1Style1}"
										>
									<EventSetter
											Event="Label.MouseUp"
											Handler="CbxLabel_OnMouseUp"
											/>
									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
									<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
									<Setter Property="IsEnabled" Value="true" />
									<Style.Triggers>
										<DataTrigger Value="{x:Null}" Binding="{Binding Path=Item}">

											<Setter Property="IsEnabled" Value="false" />

										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>



						<Border x:Name="bdrItemClassValue"
								Margin="5,0,0,0"
								Padding="4,0,4,2"
								HorizontalAlignment="Left"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="LblItemClassValue"
									Content="{Binding Item.SortCode,
																		FallbackValue='abc'}"
									Margin="0,0,0,0"
									MinWidth="50"
									Padding="14,0,14,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.Value}"
									/>

						</Border>


						<Border x:Name="BdrFixed"
								Margin="0,0,5,0"
								Width="55"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Visibility" Value="Collapsed" />
									<Setter Property="Background" Value="{StaticResource CheckBox.Background.Value}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</Trigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsLocked}">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding ElementName=MainWinClsfrEd, Path=UserIsAdmin}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxFixed"
									Content="Fixed"
									Margin="3,0,0,0"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="LightGray"
									BorderBrush="white"
									IsEnabled="False"
									IsChecked="{Binding Path=Item.IsFixed,
																			Mode=OneWay}"
									Style="{StaticResource Ckbx1Style}"
									/>

						</Border>

						<Border x:Name="BdrLocked"
								Margin="0,0,5,0"
								Width="55"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>
							<!--  IsEnabled="{Binding Item.IsFixed,  -->
							<!--  Converter={StaticResource NotBool}}"  -->
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background.Value}" />
									<Setter Property="Visibility" Value="Collapsed" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</Trigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</DataTrigger>

										<DataTrigger Value="false" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>

										<DataTrigger Value="true" Binding="{Binding ElementName=MainWinClsfrEd, Path=UserIsAdmin}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxLocked"
									Content="Locked"
									Margin="3,0,0,0"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="LightGray"
									BorderBrush="white"
									IsEnabled="False"
									IsChecked="{Binding Path=Item.IsLocked,
																			Mode=TwoWay}"
									Style="{StaticResource Ckbx1Style}"
									/>
							<!--  Checked="CkbxLocked_OnChecked"  -->


						</Border>

						<DockPanel.Style>
							<Style TargetType="DockPanel">
								<Setter Property="Visibility" Value="Visible"/>

								<Style.Triggers>
									<DataTrigger Binding="{Binding Item.CompOpCount}" Value="0">
										<Setter Property="Visibility" Value="Collapsed"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</DockPanel.Style>

					</DockPanel>



					<DockPanel
							Grid.Column="1"
							Grid.Row="2"
							Grid.ColumnSpan="2"
							Margin="0,0,0,0"
							>

						<ListView x:Name="Lv1"
								Margin="0,0,5,6"
								MaxHeight="110"
								Padding="2,0,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Bottom"
								DockPanel.Dock="Bottom"
								ScrollViewer.HorizontalScrollBarVisibility="Disabled"
								ScrollViewer.VerticalScrollBarVisibility="Auto"
								PreviewMouseWheel="UIElement_OnPreviewMouseWheel"
								ItemContainerStyle="{StaticResource Tv1LvItemContainerStyle1}"
								ItemTemplateSelector="{StaticResource Lv1ConditionSelector}"
								ItemsSource="{Binding Item.CompareOps,
																			FallbackValue={x:Null}}"
								Style="{StaticResource Tv1Lv1Style}"
								/>
						<!--  ItemTemplate="{DynamicResource Lv1DataTemplate0}"  -->
					</DockPanel>

				</Grid>

			</HierarchicalDataTemplate>

			<!--#endregion-->

			<!--  DataType="{x:Type tree:TreeNode}"  -->

			<HierarchicalDataTemplate x:Key="Tv3ItemTemplate3"
					DataType="{x:Type treeSupport:TreeNode}"
					ItemsSource="{Binding ChildrenView}"
					>

				<Grid x:Name="GD2"
						Margin="0,0,0,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Center"
						Background="Transparent"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="3" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition />
						<RowDefinition />
					</Grid.RowDefinitions>

					<DockPanel
							Grid.Column="1"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Margin="0,0,0,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							>

						<Label x:Name="Label2"
								Content="{Binding Item.Title,
																	FallbackValue='title'}"
								Margin="-5,0,4,0"
								Width="140"
								Padding="5,0,5,0"
								Background="Black"
								DockPanel.Dock="Left"
								Style="{StaticResource Label.ItemsControl.Header}"
								/>

						<Label x:Name="Label3"
								Content="{Binding Item.Description,
																	FallbackValue='description descripton description'}"
								Margin="0,0,4,0"
								MinWidth="110"
								Padding="5,0,5,0"
								Background="Black"
								DockPanel.Dock="Left"
								Style="{StaticResource Label.ItemsControl.Header}"
								/>


						<Button x:Name="BtnDelete"
								Content="{StaticResource IconDelete04}"
								Width="12"
								Height="12"
								VerticalAlignment="Top"
								BorderThickness="0"
								DockPanel.Dock="Right"
								Click="BtnDelete_OnClick"
								>
							<Button.Style>
								<Style
										TargetType="Button"
										BasedOn="{StaticResource Button.Stealth}"
										>
									<Setter Property="Background" Value="Transparent" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Foreground" Value="DimGray" />
											<Setter Property="Background" Value="Transparent" />
											<Setter Property="Border.Background" Value="Transparent" />
										</Trigger>
										<DataTrigger Value="1" Binding="{Binding ElementName=MainWinClsfrEd, Path=ClassificationFile.TreeBase.ChildCount}">
											<Setter Property="IsEnabled" Value="False">
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>

						<StackPanel
								Margin="0,0,5,1"
								HorizontalAlignment="Right"
								DockPanel.Dock="Bottom"
								Orientation="Vertical"
								>

							<DockPanel
									Margin="0,-1,0,0"
									Width="52"
									HorizontalAlignment="Right"
									>

								<Label
										Content="{Binding Path=Item.ID,
																			FallbackValue='ABCD'}"
										Margin="0,0,0,0"
										Width="20"
										Padding="0"
										HorizontalAlignment="Right"
										HorizontalContentAlignment="Right"
										FontSize="7"
										Foreground="DarkGray"
										DockPanel.Dock="Right"
										/>
								<Label
										Content="ID"
										Margin="0,0,0,0"
										Padding="0"
										HorizontalAlignment="Right"
										FontSize="7"
										Foreground="DimGray"
										DockPanel.Dock="Right"
										/>

							</DockPanel>

							<DockPanel
									Margin="0,-1,0,0"
									Width="52"
									HorizontalAlignment="Right"
									>

								<Label
										Content="{Binding Path=Item.Depth,
																			FallbackValue='2'}"
										Margin="0,0,0,0"
										Width="20"
										Padding="0"
										HorizontalAlignment="Right"
										HorizontalContentAlignment="Right"
										FontSize="7"
										Foreground="DarkGray"
										DockPanel.Dock="Right"
										/>

								<Label
										Content="Depth"
										Margin="0,0,0,0"
										Padding="0"
										HorizontalAlignment="Right"
										FontSize="7"
										Foreground="DimGray"
										DockPanel.Dock="Right"
										/>

							</DockPanel>

						</StackPanel>

					</DockPanel>

					<DockPanel
							Grid.Column="1"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="0,0,0,2"
							>

						<StackPanel Orientation="Horizontal">

							<Border
									Margin="0"
									Height="{StaticResource BdrTv3ItemHeight}"
									Padding="0,0,0,0"
									CornerRadius="3"
									>
								<Border.Style>
									<Style TargetType="Border">
										<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}">
										</Setter>
									</Style>
								</Border.Style>

								<Label x:Name="LabelItemClass"
										Content="{Binding Item.ItemClassName,
																			FallbackValue='class name'}"
										Margin="0,-1,0,0"
										Width="110"
										Padding="5,0,5,0"
										HorizontalAlignment="Center"
										Background="Transparent"
										Style="{StaticResource Label.Condition.Condition}"
										/>
							</Border>

							<Border
									Margin="5,0,0,0"
									Height="{StaticResource BdrTv3ItemHeight}"
									Padding="0"
									CornerRadius="3"
									>
								<Border.Style>
									<Style TargetType="Border">
										<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}">
										</Setter>
									</Style>
								</Border.Style>

								<Label x:Name="LabelItemClassValue"
										Content="{Binding Item.SortCode,
																			FallbackValue='class name'}"
										Margin="0,-1,0,0"
										Width="60"
										Padding="5,0,5,0"
										HorizontalContentAlignment="Center"
										Background="Transparent"
										Style="{StaticResource Label.Condition.Condition}"
										/>

							</Border>

						</StackPanel>


						<Border x:Name="BdrFixed2"
								Margin="0,0,5,0"
								Width="55"
								Height="{StaticResource BdrTv3ItemHeight}"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>

							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Visibility" Value="Collapsed" />
									<Setter Property="Background" Value="{StaticResource CheckBox.Background.Value}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</Trigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsLocked}">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding ElementName=MainWinClsfrEd, Path=UserIsAdmin}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxFixed2"
									Content="Fixed"
									Margin="3,0,0,0"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="LightGray"
									BorderBrush="white"
									IsEnabled="False"
									IsChecked="{Binding Path=Item.IsFixed,
																			Mode=OneWay}"
									Style="{StaticResource Ckbx1Style}"
									/>

						</Border>


						<Border x:Name="BdrLocked2"
								Margin="0,0,5,0"
								Width="55"
								Height="{StaticResource BdrTv3ItemHeight}"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>

							<!--  IsEnabled="{Binding Item.IsFixed,  -->
							<!--  Converter={StaticResource NotBool}}"  -->
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background.Value}" />
									<Setter Property="Visibility" Value="Collapsed" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</Trigger>
										<DataTrigger Value="true" Binding="{Binding Item.IsFixed}">
											<Setter Property="Background" Value="{StaticResource Control.Disabled.Background}" />
										</DataTrigger>

										<DataTrigger Value="false" Binding="{Binding Item.IsFixed}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>

										<DataTrigger Value="true" Binding="{Binding ElementName=MainWinClsfrEd, Path=UserIsAdmin}">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxLocked"
									Content="Locked"
									Margin="3,0,0,0"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="LightGray"
									BorderBrush="white"
									IsEnabled="False"
									IsChecked="{Binding Path=Item.IsLocked,
																			Mode=TwoWay}"
									Style="{StaticResource Ckbx1Style}"
									/>
							<!--  Checked="CkbxLocked_OnChecked"  -->


						</Border>
					</DockPanel>

					<DockPanel
							Grid.Column="1"
							Grid.Row="2"
							Grid.ColumnSpan="2"
							Margin="0,0,0,0"
							>

						<ListView x:Name="Lv3"
								Margin="0,3,5,6"
								MaxHeight="110"
								Padding="2,0,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Bottom"
								DockPanel.Dock="Bottom"
								ScrollViewer.HorizontalScrollBarVisibility="Disabled"
								ScrollViewer.VerticalScrollBarVisibility="Auto"
								ItemContainerStyle="{StaticResource Tv1LvItemContainerStyle1}"
								ItemTemplateSelector="{StaticResource Lv3TempSelector3}"
								ItemsSource="{Binding Item.CompareOps,
																			FallbackValue={x:Null}}"
								Style="{DynamicResource Lv3Style3}"
								/>
						<!--  ItemTemplate="{DynamicResource Lv1DataTemplate0}"  -->
					</DockPanel>


				</Grid>


			</HierarchicalDataTemplate>

			<!--#endregion-->

			<!--#region > lv1 templates-->

			<Style x:Key="Lv1ItemFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
									Fill="#55FF0000"
									Stroke="Red"
									StrokeThickness="2.0"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<DataTemplate x:Key="componentDescription2">
				<!--  DataType="file:FileNameSheetIdentifiers+ShtNumComps2"  -->
				<!--  DataType="{x:Type file:FileNameSheetIdentifiers+ShtNumComps2}"  -->
				<!--  DataType="file:ShtNumberCompName"  -->
				<StackPanel
						Margin="0"
						DataContext="{Binding Path=DataContext,
																	RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
						Orientation="Horizontal"
						>
					<!--    -->
					<!--  <Label  -->
					<!--  Content="{Binding Name,  -->
					<!--  FallbackValue='* Discipline',  -->
					<!--  Mode=OneWay}"  -->
					<!--  Padding="0,0,5,0"  -->
					<!--  VerticalAlignment="Center"  -->
					<!--  HorizontalContentAlignment="Center"  -->
					<!--  Style="{StaticResource Label.Condition.ComponentName}"  -->
					<!--  />  -->

					<Label
							Content="{Binding Neumonic.Preface,
																FallbackValue='*(x ',
																Mode=OneWay}"
							Margin="0"
							Width="Auto"
							Padding="0,0,0,2"
							VerticalAlignment="Center"
							FontSize="12"
							Style="{StaticResource Label.Condition.ComponentName}"
							/>
					<Label
							Content="{Binding Path=Neumonic.Body,
																FallbackValue='A',
																Mode=OneWay}"
							Margin="0"
							Width="Auto"
							Padding="2,0,2,1"
							VerticalAlignment="Center"
							FontSize="14"
							Style="{StaticResource Label.Condition.ComponentDescBody}"
							/>
					<Label
							Content="{Binding Path=Neumonic.Suffix,
																FallbackValue='.x-xy)',
																Mode=OneWay}"
							Margin="0,0,0,2"
							Width="Auto"
							Padding="0"
							VerticalAlignment="Center"
							FontSize="12"
							Style="{StaticResource Label.Condition.ComponentName}"
							/>

				</StackPanel>
			</DataTemplate>

			<!--  typical with conditions  v1  -->

			<DataTemplate x:Key="Lv1DataTemplate0"
					DataType="treeSupport:ComparisonOperation"
					>

				<StackPanel Orientation="Vertical">

					<DockPanel x:Name="dp_lv1_logical"
							Margin="38,3,0,6"
							LastChildFill="False"
							>

						<Border
								Width="{StaticResource LogicalHorizBarWidth}"
								Height="5"
								Padding="0"
								HorizontalAlignment="Left"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								Style="{StaticResource ItemsControl.Border.Logical.Background}"
								/>


						<Border
								Margin="5,0,5,0"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>


							<Label x:Name="Label10"
									Content="{Binding LogicalCompareString,
																		FallbackValue='And'}"
									Width="34"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									Style="{StaticResource Label.ItemsControl.Condition}"
									/>
						</Border>

						<Border
								Width="{StaticResource LogicalHorizBarWidth}"
								Height="5"
								Padding="0"
								HorizontalAlignment="Left"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								Style="{StaticResource ItemsControl.Border.Logical.Background}"
								/>

						<DockPanel.Style>
							<Style TargetType="DockPanel">
								<Setter Property="Visibility" Value="Visible" />
								<Style.Triggers>
									<DataTrigger Value="true" Binding="{Binding Path=IsFirstCompOp}">
										<Setter Property="Visibility" Value="Collapsed" />
										<Setter Property="HorizontalAlignment" Value="Right">
										</Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</DockPanel.Style>

					</DockPanel>

					<DockPanel x:Name="dp_lv1_condition"
							Margin="0"
							HorizontalAlignment="left"
							>
						<StackPanel Orientation="Vertical">
							<Rectangle
									Margin="0,0,-3,0"
									Width="3"
									Height="3"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									>
								<Rectangle.Style>
									<Style TargetType="Rectangle">
										<Setter Property="Fill" Value="DimGray" />
										<Style.Triggers>
											<DataTrigger Value="true" Binding="{Binding Path=IsSelected}">
												<Setter Property="Fill" Value="LawnGreen" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Rectangle.Style>
							</Rectangle>

							<Rectangle
									Margin="0,1,-3,0"
									Width="3"
									Height="3"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									>
								<Rectangle.Style>
									<Style TargetType="Rectangle">
										<Setter Property="Fill" Value="DimGray" />
										<Style.Triggers>
											<DataTrigger Value="true" Binding="{Binding Path=CompOpModified}">
												<Setter Property="Fill" Value="LimeGreen" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Rectangle.Style>
							</Rectangle>
						</StackPanel>

						<Border x:Name="bdr_lv1_component"
								Margin="5,0,0,0"
								Padding="18,0,18,2"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>

							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Disabled}" />
											<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<StackPanel Orientation="Horizontal">
								<Label
										Content="{Binding Path=CompareComponentName,
																			FallbackValue='* Discipline',
																			Mode=OneWay}"
										Margin="0,0,5,0"
										Padding="0"
										VerticalAlignment="Center"
										HorizontalContentAlignment="Center"
										Style="{StaticResource Label.Condition.ComponentName}"
										/>
								<ContentControl
										DataContext="{Binding Path=CompNameData}"
										IsEnabled="{Binding Path=IsEnabled,
																				RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
										ContentTemplate="{StaticResource componentDescription2}"
										/>
							</StackPanel>

						</Border>

						<Border x:Name="bdr_lv1_condition"
								Margin="5,0,0,0"
								Padding="18,0,18,2"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="Label8"
									Content="{Binding ValueCompareString}"
									Margin="0,0,0,0"
									Padding="0"
									Style="{StaticResource Label.Condition.Condition}"
									/>
						</Border>



						<Border x:Name="bdr_lv1_value"
								Margin="5,0,0,0"
								Padding="4,0,4,2"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<Label x:Name="Label9"
									Content="{Binding CompareValue}"
									Margin="0,0,0,0"
									MinWidth="50"
									Padding="14,0,14,0"
									HorizontalContentAlignment="Center"
									Style="{StaticResource Label.Condition.Value}"
									/>

						</Border>

					</DockPanel>

				</StackPanel>
			</DataTemplate>


			<!--  typical with conditions  v2  -->
			<!--#region > version 2 - removed  -->

			<!-- <DataTemplate x:Key="Lv3DataTemplate30" -->
			<!-- 		DataType="treeSupport:ComparisonOperation" -->
			<!-- 		> -->
			<!-- -->
			<!-- 	<StackPanel Orientation="Vertical"> -->
			<!-- -->
			<!-- 		<DockPanel x:Name="dp_lv1_logical" -->
			<!-- 				Margin="0,-2,0,-2" -->
			<!-- 				LastChildFill="False" -->
			<!-- 				> -->
			<!-- -->
			<!-- 			<Border -->
			<!-- 					Width="{StaticResource Lv3LogicalHorizBarWidth}" -->
			<!-- 					Height="5" -->
			<!-- 					Padding="0" -->
			<!-- 					HorizontalAlignment="Left" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="Left" -->
			<!-- 					Style="{StaticResource ItemsControl.Border.Logical.Background}" -->
			<!-- 					/> -->
			<!-- -->
			<!-- 			<Border -->
			<!-- 					Margin="5,0,5,0" -->
			<!-- 					Height="{StaticResource BdrTv3ItemHeight}" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="Left" -->
			<!-- 					> -->
			<!-- 				<Border.Style> -->
			<!-- 					<Style TargetType="{x:Type Border}"> -->
			<!-- 						<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->
			<!-- 						<Style.Triggers> -->
			<!-- 							<Trigger Property="IsEnabled" Value="False"> -->
			<!-- 								<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->
			<!-- 							</Trigger> -->
			<!-- 						</Style.Triggers> -->
			<!-- 					</Style> -->
			<!-- 				</Border.Style> -->
			<!-- -->
			<!-- -->
			<!-- 				<Label x:Name="Label10" -->
			<!-- 						Content="{Binding LogicalCompareString, -->
			<!-- 															FallbackValue='And'}" -->
			<!-- 						Margin="0,-1,0,0" -->
			<!-- 						Width="34" -->
			<!-- 						HorizontalContentAlignment="Center" -->
			<!-- 						VerticalContentAlignment="Center" -->
			<!-- 						Style="{StaticResource Label.ItemsControl.Condition}" -->
			<!-- 						/> -->
			<!-- 			</Border> -->
			<!-- -->
			<!-- 			<Border -->
			<!-- 					Width="{StaticResource Lv3LogicalHorizBarWidth}" -->
			<!-- 					Height="5" -->
			<!-- 					Padding="0" -->
			<!-- 					HorizontalAlignment="Left" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="Left" -->
			<!-- 					Style="{StaticResource ItemsControl.Border.Logical.Background}" -->
			<!-- 					/> -->
			<!-- -->
			<!-- 			<DockPanel.Style> -->
			<!-- 				<Style TargetType="DockPanel"> -->
			<!-- 					<Setter Property="Visibility" Value="Visible" /> -->
			<!-- 					<Style.Triggers> -->
			<!-- 						<DataTrigger Value="true" Binding="{Binding Path=IsFirstCompOp}"> -->
			<!-- 							<Setter Property="Visibility" Value="Collapsed" /> -->
			<!-- 						</DataTrigger> -->
			<!-- 					</Style.Triggers> -->
			<!-- 				</Style> -->
			<!-- 			</DockPanel.Style> -->
			<!-- -->
			<!-- 		</DockPanel> -->
			<!-- -->
			<!-- -->
			<!-- -->
			<!-- 		<DockPanel x:Name="dp_lv1_condition" -->
			<!-- 				HorizontalAlignment="left" -->
			<!-- 				> -->
			<!-- -->
			<!-- 			<Border x:Name="bdr_lv1_component" -->
			<!-- 					Margin="0,0,0,0" -->
			<!-- 					Height="{StaticResource BdrTv3ItemHeight2}" -->
			<!-- 					Padding="2,0,18,2" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="left" -->
			<!-- 					> -->
			<!-- 				<Border.Style> -->
			<!-- 					<Style TargetType="{x:Type Border}"> -->
			<!-- 						<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" /> -->
			<!-- 						<Style.Triggers> -->
			<!-- 							<Trigger Property="IsEnabled" Value="False"> -->
			<!-- 								<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Disabled}" /> -->
			<!-- 								<Setter Property="TextElement.Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
			<!-- 							</Trigger> -->
			<!-- 						</Style.Triggers> -->
			<!-- 					</Style> -->
			<!-- 				</Border.Style> -->
			<!-- -->
			<!-- 				<StackPanel Orientation="Horizontal"> -->
			<!-- -->
			<!-- 					<StackPanel -->
			<!-- 							Margin="0,2,10,0" -->
			<!-- 							Orientation="Vertical" -->
			<!-- 							> -->
			<!-- -->
			<!-- 						<Rectangle -->
			<!-- 								Margin="0,0,-3,0" -->
			<!-- 								Width="3" -->
			<!-- 								Height="3" -->
			<!-- 								HorizontalAlignment="Left" -->
			<!-- 								VerticalAlignment="Top" -->
			<!-- 								> -->
			<!-- 							<Rectangle.Style> -->
			<!-- 								<Style TargetType="Rectangle"> -->
			<!-- 									<Setter Property="Fill" Value="DimGray" /> -->
			<!-- 									<Style.Triggers> -->
			<!-- 										<DataTrigger Value="true" Binding="{Binding Path=IsSelected}"> -->
			<!-- 											<Setter Property="Fill" Value="LawnGreen" /> -->
			<!-- 										</DataTrigger> -->
			<!-- 									</Style.Triggers> -->
			<!-- 								</Style> -->
			<!-- 							</Rectangle.Style> -->
			<!-- 						</Rectangle> -->
			<!-- -->
			<!-- 						<Rectangle -->
			<!-- 								Margin="0,1,-3,0" -->
			<!-- 								Width="3" -->
			<!-- 								Height="3" -->
			<!-- 								HorizontalAlignment="Left" -->
			<!-- 								VerticalAlignment="Top" -->
			<!-- 								> -->
			<!-- 							<Rectangle.Style> -->
			<!-- 								<Style TargetType="Rectangle"> -->
			<!-- 									<Setter Property="Fill" Value="DimGray" /> -->
			<!-- 									<Style.Triggers> -->
			<!-- 										<DataTrigger Value="true" Binding="{Binding Path=CompOpModified}"> -->
			<!-- 											<Setter Property="Fill" Value="LimeGreen" /> -->
			<!-- 										</DataTrigger> -->
			<!-- 									</Style.Triggers> -->
			<!-- 								</Style> -->
			<!-- 							</Rectangle.Style> -->
			<!-- 						</Rectangle> -->
			<!-- -->
			<!-- 					</StackPanel> -->
			<!-- -->
			<!-- -->
			<!-- 					<Label -->
			<!-- 							Content="{Binding Path=CompareComponentName, -->
			<!-- 																FallbackValue='* Discipline', -->
			<!-- 																Mode=OneWay}" -->
			<!-- 							Margin="0,-1,5,0" -->
			<!-- 							Padding="0" -->
			<!-- 							VerticalAlignment="Center" -->
			<!-- 							HorizontalContentAlignment="Center" -->
			<!-- 							Style="{StaticResource Label.Condition.ComponentName}" -->
			<!-- 							/> -->
			<!-- 					<ContentControl -->
			<!-- 							Margin="0,-1,0,0" -->
			<!-- 							DataContext="{Binding Path=CompNameData}" -->
			<!-- 							IsEnabled="{Binding Path=IsEnabled, -->
			<!-- 																	RelativeSource={RelativeSource AncestorType={x:Type Border}}}" -->
			<!-- 							ContentTemplate="{StaticResource componentDescription2}" -->
			<!-- 							/> -->
			<!-- 				</StackPanel> -->
			<!-- -->
			<!-- 			</Border> -->
			<!-- -->
			<!-- 			<Border x:Name="bdr_lv1_condition" -->
			<!-- 					Margin="5,0,0,0" -->
			<!-- 					Height="{StaticResource BdrTv3ItemHeight2}" -->
			<!-- 					Padding="18,0,18,2" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="Left" -->
			<!-- 					> -->
			<!-- 				<Border.Style> -->
			<!-- 					<Style TargetType="{x:Type Border}"> -->
			<!-- 						<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" /> -->
			<!-- 						<Style.Triggers> -->
			<!-- 							<Trigger Property="IsEnabled" Value="False"> -->
			<!-- 								<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Disabled}" /> -->
			<!-- 							</Trigger> -->
			<!-- 						</Style.Triggers> -->
			<!-- 					</Style> -->
			<!-- 				</Border.Style> -->
			<!-- -->
			<!-- 				<Label x:Name="Label8" -->
			<!-- 						Content="{Binding ValueCompareString, -->
			<!-- 															FallbackValue='exactly equals'}" -->
			<!-- 						Margin="0,-1,0,0" -->
			<!-- 						Padding="0" -->
			<!-- 						Style="{StaticResource Label.Condition.Condition}" -->
			<!-- 						/> -->
			<!-- 			</Border> -->
			<!-- -->
			<!-- 			<Border x:Name="bdr_lv1_value" -->
			<!-- 					Margin="5,0,0,0" -->
			<!-- 					Height="{StaticResource BdrTv3ItemHeight2}" -->
			<!-- 					Padding="4,0,4,2" -->
			<!-- 					BorderThickness="0" -->
			<!-- 					CornerRadius="3" -->
			<!-- 					DockPanel.Dock="left" -->
			<!-- 					> -->
			<!-- 				<Border.Style> -->
			<!-- 					<Style TargetType="{x:Type Border}"> -->
			<!-- 						<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" /> -->
			<!-- 						<Style.Triggers> -->
			<!-- 							<Trigger Property="IsEnabled" Value="False"> -->
			<!-- 								<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" /> -->
			<!-- 							</Trigger> -->
			<!-- 						</Style.Triggers> -->
			<!-- 					</Style> -->
			<!-- 				</Border.Style> -->
			<!-- -->
			<!-- 				<Label x:Name="Label9" -->
			<!-- 						Content="{Binding CompareValue, -->
			<!-- 															FallbackValue='100'}" -->
			<!-- 						Margin="0,0,0,0" -->
			<!-- 						MinWidth="50" -->
			<!-- 						Padding="14,0,14,0" -->
			<!-- 						HorizontalContentAlignment="Center" -->
			<!-- 						Style="{StaticResource Label.Condition.Value}" -->
			<!-- 						/> -->
			<!-- -->
			<!-- 			</Border> -->
			<!-- -->
			<!-- 			<DockPanel.Style> -->
			<!-- 				<Style TargetType="DockPanel"> -->
			<!-- 					<Setter Property="Margin" Value="66,0,0,0" /> -->
			<!-- 					<Style.Triggers> -->
			<!-- 						<DataTrigger Value="1" Binding="{Binding Path=Parent.CompareOps.Count}"> -->
			<!-- 							<Setter Property="Margin" Value="0,0,0,0" /> -->
			<!-- 						</DataTrigger> -->
			<!-- 					</Style.Triggers> -->
			<!-- 				</Style> -->
			<!-- 			</DockPanel.Style> -->
			<!-- -->
			<!-- -->
			<!-- 		</DockPanel> -->
			<!-- -->
			<!-- 	</StackPanel> -->
			<!-- </DataTemplate> -->
			
			<!--#endregion -->


			<!--  no conditions  v1  -->

			<DataTemplate x:Key="Lv1DataTemplate3"
					DataType="treeSupport:ComparisonOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label11"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border x:Name="Bdr2"
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label12"
								Content="Is NoOp"
								Padding="18,0,18,0"
								Foreground="white"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="left"
							>

						<Label x:Name="Label13"
								Content="This is an Error"
								Padding="18,0,18,0"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>

			<!--  no conditions  v2  -->
			<!--#region > version 2 - removed  -->

			<!-- <DataTemplate x:Key="Lv3DataTemplate33" -->
			<!-- 		DataType="treeSupport:ComparisonOperation" -->
			<!-- 		> -->
			<!-- 	<DockPanel -->
			<!-- 			Margin="0" -->
			<!-- 			HorizontalAlignment="left" -->
			<!-- 			> -->
			<!-- 		<Border x:Name="Bdr1" -->
			<!-- 				Margin="0" -->
			<!-- 				Width="100" -->
			<!-- 				Padding="0" -->
			<!-- 				Background="{StaticResource ListView.Item.Background.Discipline}" -->
			<!-- 				BorderThickness="0" -->
			<!-- 				CornerRadius="3" -->
			<!-- 				DockPanel.Dock="Left" -->
			<!-- 				> -->
			<!-- 			<Label x:Name="Label11" -->
			<!-- 					Content="Compare Condtiion" -->
			<!-- 					HorizontalAlignment="Center" -->
			<!-- 					Style="{StaticResource Label.Condition.Condition}" -->
			<!-- 					/> -->
			<!-- 		</Border> -->
			<!-- -->
			<!-- 		<Border x:Name="Bdr2" -->
			<!-- 				Margin="5,0,0,0" -->
			<!-- 				Background="{StaticResource ListView.Item.Background}" -->
			<!-- 				BorderThickness="0" -->
			<!-- 				CornerRadius="3" -->
			<!-- 				DockPanel.Dock="Left" -->
			<!-- 				> -->
			<!-- 			<Label x:Name="Label12" -->
			<!-- 					Content="Is NoOp" -->
			<!-- 					Padding="18,0,18,0" -->
			<!-- 					Foreground="white" -->
			<!-- 					Style="{StaticResource Label.Condition.Condition}" -->
			<!-- 					/> -->
			<!-- 		</Border> -->
			<!-- -->
			<!-- 		<Border -->
			<!-- 				Margin="5,0,0,0" -->
			<!-- 				Background="{StaticResource ListView.Item.Background.Error}" -->
			<!-- 				BorderThickness="0" -->
			<!-- 				CornerRadius="3" -->
			<!-- 				DockPanel.Dock="left" -->
			<!-- 				> -->
			<!-- -->
			<!-- 			<Label x:Name="Label13" -->
			<!-- 					Content="This is an Error" -->
			<!-- 					Padding="18,0,18,0" -->
			<!-- 					Style="{StaticResource Label.Condition.Condition}" -->
			<!-- 					/> -->
			<!-- 		</Border> -->
			<!-- -->
			<!-- 	</DockPanel> -->
			<!-- </DataTemplate> -->
			
			<!--#endregion -->


			<!--#endregion-->


			<!--#region > lv2 style and templates-->

			<Style x:Key="Lv2ItemContainerStyle1"
					TargetType="{x:Type ListViewItem}"
					>

				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<!-- <Setter Property="FocusVisualStyle" Value="{x:Null}" /> -->
				<Setter Property="Background" Value="{Binding Background, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderBrush" Value="{Binding BorderBrush, FallbackValue=Black, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="BorderThickness" Value="{Binding BorderThickness, FallbackValue=1, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Foreground" Value="{Binding Foreground, FallbackValue=White, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, FallbackValue=Center}" />
				<Setter Property="Margin" Value="4,0,4,0" />
				<Setter Property="Padding" Value="{Binding Padding, FallbackValue=0, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<!--    -->
								<ContentPresenter x:Name="contentPresenterLv"
										Margin="{TemplateBinding Margin}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Center}" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<!--  normal  -->
			<Style x:Key="FocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
									Margin="2"
									StrokeDashArray="1 2"
									Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
									SnapsToDevicePixels="true"
									StrokeThickness="1"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<DataTemplate x:Key="Lv2DataTemplate0"
					DataType="treeSupport:ComparisonOperation"
					>

				<Border x:Name="DtBorder1"
						Margin="0,0,0,0"
						Padding="0,0,0,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						BorderThickness="0,0.5,0,0"
						BorderBrush="White"
						d:DesignWidth="450"
						>

					<Grid x:Name="DtGrid1"
							Margin="2,0,2,0"
							HorizontalAlignment="left"
							VerticalAlignment="Stretch"
							>
						<Grid.RowDefinitions>
							<!-- <RowDefinition x:Name="DtGrid1R1" Height="28" /> -->
							<RowDefinition Height="*" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="28" />
							<ColumnDefinition Width="74" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<Rectangle
								Grid.Column="0"
								Grid.Row="0"
								Margin="-2,0,0,0"
								Width="3"
								Height="3"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								>
							<Rectangle.Style>
								<Style TargetType="Rectangle">
									<Setter Property="Fill" Value="DimGray" />
									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=CompOpModified}">
											<Setter Property="Fill" Value="LawnGreen" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Rectangle.Style>
						</Rectangle>

						<Button x:Name="BtnDeleteCondition"
								Grid.Column="0"
								Grid.Row="0"
								Grid.RowSpan="2"
								Margin="0,0,0,0"
								Width="20"
								Height="20"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								BorderThickness="0"
								Click="BtnDeleteCondition_OnClick"
								>
							<Button.Effect>
								<DropShadowEffect />
							</Button.Effect>
							<Button.Style>
								<Style
										TargetType="Button"
										BasedOn="{StaticResource Button.Condition.Style}"
										>
									<Setter Property="Background" Value="{StaticResource Button.Static.Delete.Background}" />
									<Setter Property="Foreground" Value="{StaticResource Button.Static.Delete.Icon}" />

								</Style>
							</Button.Style>
							<Button.Content>
								<Viewbox x:Name="VbxTrash"
										Margin="0,0,2,1"
										Width="16"
										Height="16"
										Child="{StaticResource DeleteIcon}"
										/>
								<!-- </Grid> -->
							</Button.Content>
						</Button>

						<Border x:Name="BdrCkbxDisable"
								Grid.Column="1"
								Grid.Row="0"
								Grid.RowSpan="2"
								Margin="0,0,0,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="center"
								Background="{StaticResource CheckBox.Background}"
								BorderThickness="0"
								CornerRadius="3"
								>
							<Border.Effect>
								<DropShadowEffect />
							</Border.Effect>

							<CheckBox x:Name="CkbxDisable"
									Content="Disable"
									Margin="3,0,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									Foreground="white"
									BorderBrush="white"
									IsChecked="{Binding Path=IsDisabled,
																			Mode=TwoWay}"
									Checked="CkbxDisable_OnChecked"
									Style="{StaticResource Ckbx1Style}"
									/>
						</Border>

						<DockPanel x:Name="Lv2_DpLogical"
								Grid.Column="2"
								Grid.Row="0"
								Margin="0,8,0,0"
								>

							<Grid
									Margin="0,0,0,0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Center"
									>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="20" />
									<ColumnDefinition Width="*" />

									<ColumnDefinition Width="auto" />
								</Grid.ColumnDefinitions>

								<Grid.RowDefinitions>
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>


								<StackPanel
										Grid.Column="1"
										Grid.Row="0"
										Margin="0,0,0,0"
										Orientation="Horizontal"
										>

									<Border x:Name="bdr_logical_horiz_bar_left"
											Margin="0,0,0,5"
											Width="{StaticResource LogicalHorizBarWidth}"
											Height="5"
											Padding="0,0,0,0"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Center"
											BorderThickness="0"
											CornerRadius="3"
											DockPanel.Dock="left"
											Style="{StaticResource ItemsControl.Border.Logical.Background}"
											>
									</Border>


									<ComboBox x:Name="Cbx2"
											Tag="Logic"
											Margin="5,0,5,4"
											Width="90"
											MinHeight="16"
											Padding="0"
											FontSize="{StaticResource ConditionFontSize}"
											BorderThickness="2"
											custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
											custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
											IsEditable="False"
											IsReadOnly="True"
											custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
											custom:CustomProperties.DropDownWidth="90.0"
											MaxDropDownHeight="100"
											SelectedIndex="{Binding LogicalCompOpCode,
																							Mode=TwoWay,
																							FallbackValue=0}"
											ItemsSource="{Binding Source={x:Static treeSupport:CompareOperations.LogicalCompareOps}}"
											ItemContainerStyle="{StaticResource ComboBoxItemContainerStyle1}"
											FocusVisualStyle="{x:Null}"
											Template="{StaticResource ComboBoxTemplate1}"
											>
										<!--  IsDropDownOpen="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpenCbx2, Mode=TwoWay}"  -->
										<!--  Tag="2"  -->
										<!--  MouseUp="Cbx_OnMouseUp"  -->
										<!--  custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"  -->

										<ComboBox.ItemTemplate>
											<DataTemplate x:Name="Cbx2_Dt1">

												<TextBlock
														Margin="0"
														Padding="0,0,0,2"
														HorizontalAlignment="Stretch"
														DockPanel.Dock="Top"
														Text="{Binding Path=Name,
																					 FallbackValue='name',
																					 TargetNullValue='name'}"
														>
													<!--  Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=Width}"  -->
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Foreground" Value="White" />
															<Setter Property="Visibility" Value="Visible" />
															<Style.Triggers>
																<!-- <DataTrigger Value="0" Binding="{Binding Path=OpCodeValue}"> -->
																<!-- 	<Setter Property="Visibility" Value="Collapsed" /> -->
																<!-- </DataTrigger> -->
																<Trigger Property="IsEnabled" Value="false">
																	<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
																</Trigger>

															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

											</DataTemplate>
										</ComboBox.ItemTemplate>

										<ComboBox.Style>
											<Style
													TargetType="ComboBox"
													BasedOn="{StaticResource Cbox1Style1}"
													>
												<EventSetter
														Event="Label.MouseUp"
														Handler="CbxLabel_OnMouseUp"
														/>
												<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
												<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

											</Style>
										</ComboBox.Style>
									</ComboBox>

									<Border x:Name="bdr_logical_horiz_bar_right"
											Margin="0,0,0,5"
											Width="{StaticResource LogicalHorizBarWidth}"
											Height="5"
											Padding="0"
											HorizontalAlignment="right"
											BorderThickness="0"
											CornerRadius="3"
											DockPanel.Dock="right"
											Style="{StaticResource ItemsControl.Border.Logical.Background}"
											/>

									<StackPanel.Style>
										<Style TargetType="StackPanel">
											<Style.Triggers>
												<DataTrigger Value="True" Binding="{Binding Path=IsDisabled}">
													<Setter Property="IsEnabled" Value="false" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</StackPanel.Style>
								</StackPanel>
							</Grid>

						</DockPanel>

						<DockPanel x:Name="Lv2_DpCompare"
								Grid.Column="2"
								Grid.Row="1"
								Margin="0,3,0,8"
								>

							<ComboBox x:Name="Cbx0"
									Tag="CompIdx"
									Margin="5,0,0,0"
									Padding="0,1,0,1"
									HorizontalAlignment="Left"
									FontSize="{StaticResource ConditionFontSize}"
									BorderThickness="2"
									custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.PrimeOption.Background.MouseOver}"
									custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.PrimeOption.Background.Disabled}"
									IsEditable="False"
									IsReadOnly="True"
									custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.PrimeOption.Background.DropDown}"
									custom:CustomProperties.DropDownWidth="180.0"
									MaxDropDownHeight="200"
									SelectedIndex="{Binding CompareComponentIndex,
																					FallbackValue='1',
																					Mode=TwoWay}"
									ItemsSource="{Binding Source={x:Static file:FileNameSheetIdentifiers.ShtIds},
																				Path=lcv}"
									ItemContainerStyle="{StaticResource ComboBoxItemContainerStyle1}"
									FocusVisualStyle="{x:Null}"
									Template="{StaticResource ComboBoxTemplate1}"
									>
								<!--  IsDropDownOpen="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpenCbx0, Mode=TwoWay}"  -->
								<!--  Tag="0"  -->
								<!--  MouseUp="Cbx_OnMouseUp"  -->
								<!--  custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.PrimeOption.Background.MouseOver}"  -->
								<!--  ItemContainerStyle="{DynamicResource ComboBoxItem1}"  -->
								<!--  ItemTemplate="{StaticResource componentDescription}"  -->

								<ComboBox.ItemTemplate>
									<DataTemplate DataType="file:FileNameSheetIdentifiers+ShtNumComps2">
										<Grid x:Name="GrdItemTemplate"
												DataContext="{Binding Value}"
												IsSharedSizeScope="True"
												>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="90" />
												<ColumnDefinition />
											</Grid.ColumnDefinitions>

											<Label x:Name="LblDisc"
													Content="{Binding Path=Name,
																						FallbackValue='* Discipline',
																						Mode=OneWay}"
													Grid.Column="0"
													Grid.Row="0"
													Margin="0,0,5,0"
													Padding="0,0,0,2.5"
													VerticalAlignment="Center"
													HorizontalContentAlignment="Center"
													>
												<Label.Style>
													<Style
															TargetType="Label"
															BasedOn="{StaticResource Label.Condition.ComponentName}"
															>
													</Style>
												</Label.Style>

											</Label>


											<ContentControl x:Name="cbx0_cc"
													Grid.Column="1"
													Grid.Row="0"
													IsEnabled="{Binding Path=IsEnabled,
																							RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
													ContentTemplate="{StaticResource componentDescription2}"
													/>

										</Grid>
									</DataTemplate>
									<!--  DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ComboBoxItem}}}"  -->


								</ComboBox.ItemTemplate>

								<!-- <ComboBox.Triggers> -->
								<!-- 	<EventTrigger RoutedEvent="Label.MouseUp"> -->
								<!-- 		<BeginStoryboard> -->
								<!-- 			<Storyboard> -->
								<!--  <BooleanAnimationUsingKeyFrames  -->
								<!--  Storyboard.TargetName="Cbx0"  -->
								<!--  Storyboard.TargetProperty="(ComboBox.IsDropDownOpen)">  -->
								<!--  <DiscreteBooleanKeyFrame  -->
								<!--  KeyTime="00:00:00"  -->
								<!--  Value="True" />  -->
								<!-- 				</BooleanAnimationUsingKeyFrames> -->
								<!-- 			</Storyboard> -->
								<!-- 		</BeginStoryboard> -->
								<!-- 	</EventTrigger> -->
								<!--    -->
								<!-- </ComboBox.Triggers> -->

								<ComboBox.Style>

									<Style
											TargetType="ComboBox"
											BasedOn="{StaticResource Cbox1Style1}"
											>
										<EventSetter
												Event="Label.MouseUp"
												Handler="CbxLabel_OnMouseUp"
												/>
										<Setter Property="Background" Value="{StaticResource ItemsControl.PrimeOption.Background.Normal}" />
										<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

									</Style>
								</ComboBox.Style>

							</ComboBox>

							<ComboBox x:Name="Cbx1"
									Tag="Value"
									Margin="5,0,0,0"
									Padding="0,1,0,1"
									HorizontalAlignment="Left"
									d:DataContext="{Binding Source={x:Static treeSupport:CompareOperations.ValueCompareOps}}"
									FontSize="{StaticResource ConditionFontSize}"
									BorderThickness="2"
									custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
									custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
									IsEditable="False"
									IsReadOnly="True"
									custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
									custom:CustomProperties.DropDownWidth="180.0"
									MaxDropDownHeight="200"
									SelectedIndex="{Binding ValueCompOpCode,
																					FallbackValue='1'}"
									ItemsSource="{Binding Source={x:Static treeSupport:CompareOperations.ValueCompareOps}}"
									ItemContainerStyle="{StaticResource ComboBoxItemContainerStyle1}"
									FocusVisualStyle="{x:Null}"
									Template="{StaticResource ComboBoxTemplate1}"
									>
								<!--  IsDropDownOpen="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpenCbx0, Mode=TwoWay}"  -->
								<!--  MouseUp="Cbx_OnMouseUp"  -->
								<!--  ItemContainerStyle="{DynamicResource ComboBoxItem1}"  -->
								<!--  ItemTemplateSelector="{x:Null}"  -->
								<!--  DisplayMemberPath="Name"  -->
								<ComboBox.ItemTemplate>
									<DataTemplate x:Name="Cbx1_Dt1">
										<TextBlock
												Margin="0"
												Padding="0,0,0,2"
												Text="{Binding Path=Name}"
												>
											<TextBlock.Style>
												<Style TargetType="TextBlock">
													<Setter Property="Foreground" Value="White" />
													<Setter Property="Visibility" Value="Visible" />
													<Style.Triggers>
														<DataTrigger Value="0" Binding="{Binding Path=OpCodeValue}">
															<Setter Property="Visibility" Value="Collapsed" />
														</DataTrigger>
														<Trigger Property="IsEnabled" Value="false">
															<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
														</Trigger>
													</Style.Triggers>
												</Style>
											</TextBlock.Style>
										</TextBlock>
									</DataTemplate>
								</ComboBox.ItemTemplate>

								<ComboBox.Style>
									<Style
											TargetType="ComboBox"
											BasedOn="{StaticResource Cbox1Style1}"
											>
										<EventSetter
												Event="Label.MouseUp"
												Handler="CbxLabel_OnMouseUp"
												/>
										<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
										<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

									</Style>
								</ComboBox.Style>
							</ComboBox>

							<!--  value  -->
							<Border x:Name="Bdr2"
									Margin="5,0,0,0"
									BorderThickness="0"
									CornerRadius="3"
									DockPanel.Dock="left"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource Border.Base}"
											>
										<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
										<Style.Triggers>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.MouseOver}" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<TextBox x:Name="Tbx1"
										MinWidth="50"
										Padding="16,0,16,0"
										VerticalAlignment="Center"
										HorizontalContentAlignment="Center"
										FontSize="{StaticResource ConditionFontSize}"
										Background="Transparent"
										BorderThickness="0"
										res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
										res:TextBoxBehavior.SelectAllTextOnFocus="True"
										Text="{Binding CompareValue,
																	 Mode=TwoWay,
																	 FallbackValue='1'}"
										>
									<TextBox.Style>
										<Style
												TargetType="TextBox"
												BasedOn="{StaticResource TextBox.Base}"
												>
											<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
											<Style.Triggers>
												<!-- <Trigger Property="IsEnabled" Value="False"> -->
												<!-- 	<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt}"/> -->
												<!-- </Trigger> -->
											</Style.Triggers>

										</Style>
									</TextBox.Style>
								</TextBox>
							</Border>

						</DockPanel>

					</Grid>

				</Border>

				<DataTemplate.Triggers>

					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding Path=IsFirstCompOp}">
						<Setter TargetName="BdrCkbxDisable" Property="Visibility" Value="Hidden" />
						<Setter TargetName="BtnDeleteCondition" Property="Visibility" Value="Hidden" />
						<Setter TargetName="DtBorder1" Property="BorderThickness" Value="0" />
						<Setter TargetName="Lv2_DpLogical" Property="Visibility" Value="Collapsed" />
						<!-- <Setter TargetName="DtGrid1R1" Property="Height" Value="0" /> -->
					</DataTrigger>

					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding Path=IsDisabled}">
						<Setter TargetName="Bdr2" Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
						<Setter TargetName="Lv2_DpCompare" Property="IsEnabled" Value="false" />

						<!-- <Setter TargetName="Bdr1" Property="Background" Value="{StaticResource ItemsControl.Title.Background.Disabled}" /> -->
						<!-- <Setter TargetName="Tbx1" Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" /> -->
					</DataTrigger>

				</DataTemplate.Triggers>
			</DataTemplate>

			<!--  logical condition  -->
			<DataTemplate x:Key="Lv2DataTemplate3"
					DataType="treeSupport:ComparisonOperation"
					>
				<DockPanel
						Margin="0"
						HorizontalAlignment="left"
						>
					<Border x:Name="Bdr1"
							Margin="0"
							Width="100"
							Padding="0"
							Background="{StaticResource ListView.Item.Background.Discipline}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label17"
								Content="Compare Condtiion"
								HorizontalAlignment="Center"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border x:Name="Bdr2"
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="Left"
							>
						<Label x:Name="Label18"
								Content="Is NoOp"
								Padding="20,0,20,0"
								Foreground="white"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

					<Border
							Margin="5,0,0,0"
							Background="{StaticResource ListView.Item.Background.Error}"
							BorderThickness="0"
							CornerRadius="3"
							DockPanel.Dock="left"
							>

						<Label x:Name="Label19"
								Content="This is an Error"
								Padding="16,0,16,0"
								Style="{StaticResource Label.Condition.Condition}"
								/>
					</Border>

				</DockPanel>
			</DataTemplate>

			<!--#endregion-->


		</ResourceDictionary>

	</Window.Resources>

	<!--#region > prime grid-->

	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition MinWidth="590" />
			<ColumnDefinition Width="590" />
			<!--  x:Name="GrdMainCol2"  -->
			<ColumnDefinition Width="300" />
			<ColumnDefinition Width="300" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />

		</Grid.RowDefinitions>

		<!--#region > debug panel right-->


		<StackPanel
				Grid.Column="2"
				Grid.Row="0"
				Grid.RowSpan="2"
				Orientation="Vertical"
				Visibility="Visible"
				>

			<Label
					Content="window information"
					Margin="0,1,0,1"
					Padding="0,2,0,1"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="is user admin"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=UserIsAdmin,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>




			<Label
					Content="sel node information"
					Margin="0,1,0,1"
					Padding="0,2,0,1"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="title"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="ID"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.ID,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Parent"
						Style="{StaticResource label.debug.panel}"
						/>


				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Parent.ID,
													 Mode=OneWay,
													 StringFormat='{}({0}) ',
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Parent.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>


			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (node) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (item) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Item.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>



			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is locked"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Item.IsParentExLocked,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is fixed"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeSelected.Item.IsParentExFixed,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>





			<Label
					Content="edit node information"
					Margin="0,4,0,1"
					Padding="0,2,0,1"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="title"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="ID"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.ID,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Parent"
						Style="{StaticResource label.debug.panel}"
						/>


				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Parent.ID,
													 Mode=OneWay,
													 StringFormat='{}({0}) ',
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Parent.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>


			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (node) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (item) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Item.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>



			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is locked"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Item.IsParentExLocked,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is fixed"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=Mws.NodeEditing.Item.IsParentExFixed,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>





			<Label
					Content="ctx source node information"
					Margin="0,4,0,1"
					Padding="0,2,0,1"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="title"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="ID"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.ID,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Parent"
						Style="{StaticResource label.debug.panel}"
						/>


				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Parent.ID,
													 Mode=OneWay,
													 StringFormat='{}({0}) ',
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Parent.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (node) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (item) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Item.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>



			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is locked"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Item.IsParentExLocked,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is fixed"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextSource.Item.IsParentExFixed,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>



			<Label
					Content="ctx target node information"
					Margin="0,4,0,1"
					Padding="0,2,0,1"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="title"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="ID"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.ID,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>


			<StackPanel Orientation="Horizontal">

				<Label
						Content="Parent"
						Style="{StaticResource label.debug.panel}"
						/>


				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Parent.ID,
													 Mode=OneWay,
													 StringFormat='{}({0}) ',
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Parent.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (node) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex (item) / cannot select"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Item.IsParentExCannotSelect,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>



			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is locked"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Item.IsParentExLocked,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="parent ex / is fixed"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ElementName=MainWinClsfrEd,
													 Path=NodeContextTarget.Item.IsParentExFixed,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>





			<Label
					Content="Misc information"
					Margin="0,8,0,4"
					Padding="0,0,0,2"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>


			<StackPanel Orientation="Horizontal">

				<Label
						Content="TreeBase / TreeNodeModified"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.TreeBase.TreeNodeModified,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="TreeBase / TreeItemModified"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.TreeBase.TreeNodeChildItemModified,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Mws / node selected"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding Mws.NodeSelected.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Mws / node editing"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding Mws.NodeEditing.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Win / context source"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding NodeContextSource.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="Win / context target"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding NodeContextTarget.Item.Title,
													 Mode=OneWay,
													 FallbackValue='null'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

		</StackPanel>



		<StackPanel
				Grid.Column="3"
				Grid.Row="0"
				Grid.RowSpan="2"
				Margin="5,0,0,0"
				Orientation="Vertical"
				Visibility="Visible"
				>


			<!--  classification data  -->

			<Label
					Content="Classification file information"
					Margin="0,1,0,4"
					Padding="0,0,0,3"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>

			<StackPanel Orientation="Horizontal">

				<Label
						Content="File Id"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.FileId,
													 Mode=OneWay,
													 FallbackValue='fileid'}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>


			<StackPanel Orientation="Horizontal">

				<Label x:Name="lbl_0_6"
						Content="HeaderFromMemory"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.HeaderDescFromMemory,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lbl_0_7"
						Content="HeaderFromFile"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.HeaderDescFromFile,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lbl_0_8"
						Content="Header Note"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.HeaderNote,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">


				<Label x:Name="lbl_0_9"
						Content="Folder Path Local"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBox
						BorderThickness="0"
						IsReadOnly="True"
						TextAlignment="Right"
						Text="{Binding ClassificationFile.FolderPathLocal,
													 Mode=OneWay}"
						FlowDirection="RightToLeft"
						Style="{StaticResource textbox.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFolderPath"
						Content="Folder Path"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBox
						BorderThickness="0"
						IsReadOnly="True"
						TextAlignment="Right"
						FlowDirection="RightToLeft"
						Text="{Binding ClassificationFile.FolderPath,
													 Mode=OneWay}"
						Style="{StaticResource textbox.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lbl_0_10"
						Content="Full file Path"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBox
						BorderThickness="0"
						IsReadOnly="True"
						TextAlignment="Right"
						Text="{Binding ClassificationFile.FullFilePath,
													 Mode=OneWay}"
						FlowDirection="RightToLeft"
						Style="{StaticResource textbox.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lbl_0_11"
						Content="File Path Local"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBox
						BorderThickness="0"
						IsReadOnly="True"
						TextAlignment="Right"
						FlowDirection="RightToLeft"
						Text="{Binding ClassificationFile.FolderPathLocal,
													 Mode=OneWay,
													 FallbackValue='c\\path\\path\\path\\path\\FolderPathLocal'}"
						Style="{StaticResource textbox.debug.panel}"
						/>
				<!--  HorizontalContentAlignment="Right"  -->
				<!--  HorizontalAlignment="Right"  -->
				<!--  FlowDirection="RightToLeft"  -->
				<!--  Text="{Binding ClassificationFile.FolderPathLocal, Converter={StaticResource ElipseString}, ConverterParameter=30,  -->
				<!--  Mode=OneWay, FallbackValue='c\\path\\path\\path\\path\\FolderPathLocal'}"  -->

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFileName"
						Content="File Name"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.FileName,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>
			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFileNameNoEx"
						Content="File Name No Ex"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.FileNameNoExt,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFileNameExNoSep"
						Content="File Name Ex No Sep"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.FileNameExtNoSep,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFileId"
						Content="FileId"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.FileId,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblUserName"
						Content="User Name"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.UserName,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">
				<Label x:Name="lblSampFilePath"
						Content="Sample File Path"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.SampleFilePath,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblCanSave"
						Content="Can Save"
						Foreground="DeepSkyBlue"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.CanSave,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblCanEdit"
						Content="Can Edit"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.CanEdit,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblIsInit"
						Content="Is Init"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.IsInitialized,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblIsMod"
						Content="Is Mod"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.IsModified,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblIsValid"
						Content="Is Valid"
						Style="{StaticResource label.debug.panel}"
						/>

				<TextBlock
						Text="{Binding ClassificationFile.IsValid,
													 Mode=OneWay}"
						Style="{StaticResource textblock.debug.panel}"
						/>

			</StackPanel>

			<Label
					Content="Change Classification File"
					Margin="0,4,0,4"
					Padding="0,0,0,2"
					VerticalAlignment="Center"
					Background="#444444"
					Foreground="DarkGray"
					/>



			<StackPanel Orientation="Horizontal">

				<Label x:Name="lblFileIdNew"
						Content="New File Id"
						Style="{StaticResource label.debug.panel}"
						/>

				<DockPanel>
					<Button
							Content="Go"
							Width="30"
							DockPanel.Dock="Right"
							Click="BtnUpdateClassifFile_OnClick"
							/>

					<TextBox
							Width="100"
							DockPanel.Dock="Left"
							Text="{Binding FileIdNew,
														 Mode=TwoWay}"
							Style="{StaticResource textbox.debug.panel}"
							/>

				</DockPanel>

			</StackPanel>

			<TextBox
					Text="{Binding Messages}"
					Height="300"

					Foreground="White"
					x:Name="TbxMessages"
					Background="Transparent" 
					FontFamily="Consolas"
					/>

		</StackPanel>


		<!-- </Grid> -->

		<!--#endregion-->

		<!--#region > settings panel-->

		<Grid
				Grid.Column="0"
				Grid.Row="2"
				Margin="5"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				>

			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="00" />
			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="22" />
				<RowDefinition Height="20" />
				<RowDefinition Height="20" />
				<RowDefinition Height="20" />
				<RowDefinition Height="*" />

			</Grid.RowDefinitions>

			<Label x:Name="Label29"
					Content="Settings"
					Grid.Column="0"
					Grid.Row="0"
					Margin="0,0,4,0"
					Padding="5,0,0,3"
					VerticalAlignment="Top"
					FontSize="{StaticResource Header.Title.L2.Font.Size}"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<DockPanel
					Grid.Column="0"
					Grid.Row="1"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label31"
							Content="Sheet Organization File &amp; Folder"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>

				<Border
						Margin="5,0,0,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>

					<TextBox x:Name="tbx31b"
							Width="100"
							HorizontalAlignment="Stretch"
							DataContext="{Binding ElementName=MainWinClsfrEd,
																		Path=ClassificationFile.FileName,
																		FallbackValue='Filename'}"
							HorizontalScrollBarVisibility="Hidden"
							MaxLines="1"
							MinLines="1"
							ScrollViewer.CanContentScroll="True"
							Text="{Binding Mode=OneWay}"
							VerticalScrollBarVisibility="Disabled"
							Style="{StaticResource TextBox.Setting.Value}"
							>
						<!--  d:DataContext="{Binding Source={x:Static sample:SampleData.FullFilePath}}"  -->
						<!--  IsReadOnly="True"  -->
						<!--  d:DataContext="{Binding Source={d:DesignInstance {x:Type sample:SampleData}}}"  -->
					</TextBox>
				</Border>

				<Border
						Margin="5,0,5,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>

					<TextBox x:Name="tbx32"
							Width="264"
							HorizontalAlignment="left"
							DataContext="{Binding ElementName=MainWinClsfrEd,
																		Path=ClassificationFile.FolderPathLocal,
																		FallbackValue='c:\\File Path'}"
							d:DataContext="{Binding Source={x:Static sample:SampleData.FullFilePath}}"
							HorizontalScrollBarVisibility="Hidden"
							MaxLines="1"
							MinLines="1"
							ScrollViewer.CanContentScroll="True"
							Text="{Binding Mode=OneWay,
														 FallbackValue='fallback'}"
							VerticalScrollBarVisibility="Disabled"
							Style="{StaticResource TextBox.Setting.Value}"
							>
						<!--  IsReadOnly="True"  -->
						<!--  d:DataContext="{Binding Source={d:DesignInstance {x:Type sample:SampleData}}}"  -->
					</TextBox>
				</Border>

			</DockPanel>

			<DockPanel
					Grid.Column="0"
					Grid.Row="2"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label36"
							Content="Sheet Sample File &amp; Folder"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>

				<Border
						Margin="5,0,0,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>

					<TextBox x:Name="Tbx35"
							Width="100"
							HorizontalAlignment="Stretch"
							Text="{Binding ElementName=MainWinClsfrEd,
														 Path=ClassificationFile.SampleFileName,
														 Mode=OneWay,
														 FallbackValue='Filename'}"
							Style="{StaticResource TextBox.Setting.Value}"
							>
					</TextBox>
				</Border>

				<Border
						Margin="5,0,5,0"
						HorizontalAlignment="Stretch"
						Style="{StaticResource Border.Settings.Button}"
						>
					<TextBox x:Name="Tbx34"
							Width="264"
							HorizontalAlignment="left"
							HorizontalScrollBarVisibility="Hidden"
							MaxLines="1"
							MinLines="1"
							ScrollViewer.CanContentScroll="True"
							Text="{Binding ElementName=MainWinClsfrEd,
														 Path=ClassificationFile.SampleFileFolderPath,
														 Mode=OneWay,
														 FallbackValue='File Path'}"
							VerticalScrollBarVisibility="Disabled"
							Style="{StaticResource TextBox.Setting.Value}"
							>
					</TextBox>
				</Border>
			</DockPanel>

			<DockPanel
					Grid.Column="0"
					Grid.Row="3"
					>

				<Border Style="{StaticResource Border.Settings.Title}">

					<Label x:Name="Label38"
							Content="Remember Tree Expand / Collapse state"
							Style="{StaticResource Label.Settings.Title}"
							/>
				</Border>


				<Border
						HorizontalAlignment="left"
						Background="{StaticResource Element.Button.Background.Normal}"
						Style="{StaticResource Border.Settings.Button}"
						>

					<Button x:Name="BtnRemExCollapseState"
							Content="{Binding ElementName=MainWinClsfrEd,
																Converter={StaticResource BoolToYesNo},
																Path=RememberCollapseState,
																Mode=OneWay,
																FallbackValue='none'}"
							Width="60"
							Padding="0,0,0,1"
							Background="Transparent"
							Foreground="White"
							BorderThickness="0"
							Click="BtnRemExCollapseState_OnClick"
							/>

				</Border>

			</DockPanel>

		</Grid>
		<!--#endregion-->

		<!--#region > controls panel-->

		<StackPanel
				Grid.Column="1"
				Grid.Row="2"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Orientation="Vertical"
				>
			<StackPanel
					HorizontalAlignment="right"
					Orientation="Horizontal"
					>

				<!--  <Button x:Name="BtnExpCollapseTest"  -->
				<!--  Content="Exp/Col Test"  -->
				<!--  Margin="5"  -->
				<!--  Width="{StaticResource Normal.Button.Width}"  -->
				<!--  Height="{StaticResource Normal.Button.Height}"  -->
				<!--  HorizontalAlignment="Right"  -->
				<!--  VerticalAlignment="Bottom"  -->
				<!--  DockPanel.Dock="right"  -->
				<!--  Style="{StaticResource Button.Normal.Style}"  -->
				<!--  Template="{StaticResource Button.Normal.ControlTemplate}"  -->
				<!--  Click="BtnExpCollapseTest_OnClick"  -->
				<!--  />  -->

				<Button x:Name="BtnDisableTv1"
						Content="Disable TreeView"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnDisableTv1_OnClick"
						/>

				<Button x:Name="BtnDebug"
						Content="Debug"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnDebug_OnClick"
						/>

				<Button x:Name="BtnRepair"
						Content="Repair"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnRepair_OnClick"
						/>

				<Button x:Name="BtnValidate"
						Content="Validate"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Style="{StaticResource Button.Normal.Style}"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnValidate_OnClick"
						/>

				<Button x:Name="BtnClassify"
						Content="Test Classify"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnClassify_OnClick"
						>
					<!--  Style="{StaticResource Button.Normal.Style}"  -->
					<!--  IsEnabled="{Binding ElementName=BtnDone,Path=IsEnabled, Converter={StaticResource NotBool}}"  -->

					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="IsEnabled" Value="False" />
							<Style.Triggers>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
										<Condition Value="false" Binding="{Binding ClassificationFile.CanSave}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />

								</MultiDataTrigger>
							</Style.Triggers>

						</Style>
					</Button.Style>

				</Button>
			</StackPanel>

			<StackPanel
					HorizontalAlignment="right"
					Orientation="Horizontal"
					>

				<Button x:Name="BtnSelect"
						Content="Select"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnSelect_OnClick"
						>
					<!--  IsEnabled="{Binding ElementName=BtnSave,  -->
					<!--  Path=IsEnabled,  -->
					<!--  Converter={StaticResource NotBool}}"  -->
					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="Open or Create a Classification file" />
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Style.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="ToolTip" Value="Save or Cancel the changes in order to continue">
									</Setter>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding ElementName=BtnSave, Path=IsEnabled}" />
										<Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>

				<Button x:Name="BtnCancelChanges"
						Content="Cancel Changes"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DataContext="{Binding ElementName=MainWinClsfrEd}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnCancelChanges_OnClick"
						>

					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="No Changes Yet" />
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.CanSave}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="ToolTip" Value="Cancel all changes&#x0a;since last save" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.CanSave}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="ToolTip" Value="Finish Editing the&#x0a;Selected Category" />
								</MultiDataTrigger>

							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>

				<Button x:Name="BtnSave"
						Content="Save"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DataContext="{Binding ElementName=MainWinClsfrEd}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnSave_OnClick"
						>

					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="No Changes Yet" />
							<Setter Property="IsEnabled" Value="False" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Style.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.CanSave}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
									<Setter Property="ToolTip" Value="Save Changes" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
										<Condition Value="true" Binding="{Binding ClassificationFile.CanSave}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="false" />
									<Setter Property="ToolTip" Value="Finish Editing the Selected Category" />
								</MultiDataTrigger>

							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>

				<Button x:Name="BtDone"
						Content="Done"
						Margin="5"
						Width="{StaticResource Normal.Button.Width}"
						Height="{StaticResource Normal.Button.Height}"
						DockPanel.Dock="right"
						Template="{StaticResource Button.Normal.ControlTemplate}"
						Click="BtnDone_OnClick"
						>
					<!--  IsEnabled="{Binding ElementName=BtnSave,  -->
					<!--  Path=IsEnabled,  -->
					<!--  Converter={StaticResource NotBool}}"  -->
					<Button.Style>
						<Style
								TargetType="Button"
								BasedOn="{StaticResource Button.Normal.Style}"
								>
							<Setter Property="ToolTip" Value="Select when you are Finished" />
							<Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
							<Setter Property="IsEnabled" Value="False" />
							<Style.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="ToolTip" Value="Save or Cancel the changes in order to continue">
									</Setter>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Value="false" Binding="{Binding ElementName=BtnSave, Path=IsEnabled}" />
										<Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="True" />
								</MultiDataTrigger>
							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>

			</StackPanel>
		</StackPanel>

		<!--#endregion-->

		<!--#region > header-->

		<DockPanel
				Grid.Column="0"
				Grid.Row="0"
				Grid.ColumnSpan="2"
				Margin="5,0,0,0"
				>
			<Rectangle
					Margin="0,3,0,0"
					Width="2"
					Height="11"
					VerticalAlignment="Top"
					>
				<Rectangle.Style>
					<Style TargetType="Rectangle">
						<Setter Property="Fill" Value="DimGray" />
						<Style.Triggers>
							<DataTrigger Value="true" Binding="{Binding BaseOfTree.TreeNodeModified}">
								<Setter Property="Fill" Value="LawnGreen" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Rectangle.Style>

			</Rectangle>

			<Rectangle
					Margin="-2,3,0,11"
					Width="2"
					Height="10"
					VerticalAlignment="Bottom"
					>
				<Rectangle.Style>
					<Style TargetType="Rectangle">
						<Setter Property="Fill" Value="DimGray" />
						<Style.Triggers>
							<DataTrigger Value="true" Binding="{Binding BaseOfTree.TreeNodeChildItemModified}">
								<Setter Property="Fill" Value="LawnGreen" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Rectangle.Style>

			</Rectangle>


			<Rectangle
					Margin="-2,3,0,0"
					Width="2"
					Height="11"
					VerticalAlignment="Bottom"
					>
				<Rectangle.Style>
					<Style TargetType="Rectangle">
						<Setter Property="Fill" Value="DimGray" />
						<Style.Triggers>
							<DataTrigger Value="true" Binding="{Binding ClassificationFile.CanSave}">
								<Setter Property="Fill" Value="LawnGreen" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Rectangle.Style>

			</Rectangle>


			<Label x:Name="Label20"
					Content="Sheet Organization Categories"
					Margin="0,3,5,0"
					Padding="5,3,0,5"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Top"
					FontSize="{StaticResource Header.Title.L1.Font.Size}"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>
		</DockPanel>

		<!--#endregion-->

		<!--#region > editing panel-->

		<Grid
				Grid.Column="1"
				Grid.Row="1"
				Margin="0,0,5,5"
				>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />

			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="auto" />
				<RowDefinition Height="4*" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="3*" />
			</Grid.RowDefinitions>

			<Label x:Name="Label21"
					Content="Edit Selected Category"
					Grid.Column="0"
					Grid.Row="0"
					Margin="0,4,0,0"
					Padding="2,3,2,4"
					VerticalAlignment="Center"
					FontSize="{StaticResource Header.Title.L2.Font.Size}"
					Background="{StaticResource Win.Title.Background}"
					Foreground="White"
					/>

			<Border
					Grid.Column="0"
					Grid.Row="1"
					Margin="0,5,0,5"
					BorderThickness=".5"
					BorderBrush="{StaticResource ItemsControl.Border.Frame}"
					>
				<!--  BorderBrush="{xs:ScBrush A=#C6,  -->
				<!--  color={StaticResource Light.Blue.760}}"  -->

				<Grid x:Name="EditCategory"
						Margin="0,2,0,0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						DataContext="{Binding ElementName=MainWinClsfrEd,
																	Path=Mws.NodeEditing}"
						>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="80" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="70" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="26" />
						<RowDefinition Height="26" />
						<RowDefinition Height="26" />
						<RowDefinition Height="24" />
						<RowDefinition MinHeight="125" />

					</Grid.RowDefinitions>

					<StackPanel
							Grid.Column="0"
							Grid.Row="0"
							Orientation="Horizontal"
							>

						<Rectangle ToolTip="1 Item Modified">
							<Rectangle.Style>
								<Style
										TargetType="Rectangle"
										BasedOn="{StaticResource RectFlag}"
										>
									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=Item.NeedsSaving}">
											<Setter Property="Fill" Value="LawnGreen">
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>

							</Rectangle.Style>
						</Rectangle>

						<Rectangle ToolTip="2 Sheet Cat Modified">
							<Rectangle.Style>
								<Style
										TargetType="Rectangle"
										BasedOn="{StaticResource RectFlag}"
										>

									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=Item.ShtCatModified}">
											<Setter Property="Fill" Value="LawnGreen">
											</Setter>
										</DataTrigger>

									</Style.Triggers>
								</Style>

							</Rectangle.Style>
						</Rectangle>

						<Rectangle ToolTip="3 Comp Op Modified">
							<Rectangle.Style>
								<Style
										TargetType="Rectangle"
										BasedOn="{StaticResource RectFlag}"
										>

									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding Path=Item.ChildCompOpModified}">
											<Setter Property="Fill" Value="LimeGreen">
											</Setter>
										</DataTrigger>

									</Style.Triggers>
								</Style>
							</Rectangle.Style>
						</Rectangle>


						<Rectangle ToolTip="4 Selected not null">
							<Rectangle.Style>
								<Style
										TargetType="Rectangle"
										BasedOn="{StaticResource RectFlag}"
										>
									<Style.Triggers>
										<DataTrigger Value="true" Binding="{Binding ElementName=MainWinClsfrEd, Path=Mws.NodeSelected, Converter={StaticResource NullObjToFalse}}">
											<Setter Property="Fill" Value="LimeGreen">
											</Setter>
										</DataTrigger>
										<!-- <DataTrigger Value="false" Binding="{Binding ElementName=MainWinClsfrEd, Path=Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}"> -->
										<!-- 	<Setter Property="Fill" Value="Red"> -->
										<!-- 	</Setter> -->
										<!-- </DataTrigger> -->

									</Style.Triggers>
								</Style>
							</Rectangle.Style>
						</Rectangle>

						<!-- <Condition Value="true" Binding="{Binding Mws.NodeSelected, Converter={StaticResource NullObjToTrue}}" /> -->


					</StackPanel>

					<DockPanel
							Grid.Column="2"
							Grid.Row="0"
							HorizontalAlignment="Stretch"
							>

						<Button x:Name="BtnCancelEdit"
								Margin="0,0,5,5"
								Width="22"
								Height="20"
								Padding="0"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Background="Transparent"
								BorderThickness="0"
								IsEnabled="{Binding Converter={StaticResource NullObjToFalse}}"
								DockPanel.Dock="Right"
								Style="{StaticResource Button.Stealth}"
								Click="BtnCancelEdit_OnClick"
								>

							<ContentControl x:Name="CcDel2"
									Content="{StaticResource ResourceKey=IconDelete02}"
									Width="20"
									Height="20"
									DockPanel.Dock="Right"
									>
								<ContentControl.Style>
									<Style TargetType="ContentControl">
										<Setter Property="Foreground" Value="LimeGreen" />
										<Style.Triggers>
											<DataTrigger Value="true" Binding="{Binding Converter={StaticResource NullObjToTrue}}">
												<Setter Property="Foreground" Value="DimGray" />
											</DataTrigger>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Foreground" Value="LawnGreen" />
											</Trigger>
											<DataTrigger Value="true" Binding="{Binding ElementName=BtnCancelEdit, Path=IsPressed}">
												<Setter Property="Foreground" Value="CadetBlue" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</ContentControl.Style>
							</ContentControl>
						</Button>

						<Button x:Name="BtnSaveEdit"
								Margin="0,0,5,5"
								Width="22"
								Height="20"
								Padding="0"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Background="Transparent"
								BorderThickness="0"
								IsDefault="{Binding RelativeSource={RelativeSource Self},
																		Path=IsEnabled}"
								DockPanel.Dock="Right"
								Click="BtnSaveEdit_OnClick"
								>
							<!--  IsEnabled="{Binding Path=Item.NeedsSaving}"  -->

							<Button.IsEnabled>
								<MultiBinding Converter="{StaticResource MultiBoolAnd}">
									<Binding Converter="{StaticResource NullObjToFalse}" />
									<Binding Path="Item.NeedsSaving" />
								</MultiBinding>
							</Button.IsEnabled>

							<Button.Style>
								<Style
										TargetType="Button"
										BasedOn="{StaticResource Button.Stealth}"
										>
									<Setter Property="Foreground" Value="LimeGreen" />
									<Style.Triggers>
										<Trigger Property="IsMouseOver" Value="true">
											<Setter Property="Foreground" Value="LawnGreen" />
										</Trigger>
									</Style.Triggers>

								</Style>

							</Button.Style>

							<Path x:Name="pthChkMk"
									Grid.Column="0"
									Grid.Row="0"
									Width="22"
									Height="20"
									Data="{StaticResource Icon.Check.Mark}"
									Stretch="Uniform"
									StrokeThickness="0"
									>

								<Path.Style>
									<Style TargetType="Path">
										<Setter Property="Fill" Value="{Binding ElementName=BtnSaveEdit, Path=Foreground}" />
										<Style.Triggers>
											<DataTrigger Value="true" Binding="{Binding ElementName=BtnSaveEdit, Path=IsPressed}">
												<Setter Property="Fill" Value="CadetBlue" />
											</DataTrigger>
											<DataTrigger Value="true" Binding="{Binding Converter={StaticResource NullObjToTrue}}">
												<Setter Property="Fill" Value="DimGray" />
											</DataTrigger>
											<DataTrigger Value="false" Binding="{Binding Item.NeedsSaving}">
												<Setter Property="Fill" Value="DimGray" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Path.Style>

							</Path>


						</Button>

					</DockPanel>


					<Label x:Name="Label22"
							Content="Title"
							Grid.Column="0"
							Grid.Row="0"
							Style="{StaticResource Label.Selected}"
							/>

					<TextBox x:Name="Tbx01"
							Grid.Column="1"
							Grid.Row="0"

							IsEnabled="{Binding Converter={StaticResource NullObjToFalse}}"
							res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
							res:TextBoxBehavior.SelectAllTextOnFocus="True"
							Text="{Binding Item.Title,
														 FallbackValue='title',
														 TargetNullValue=''}"
							Style="{StaticResource TextBox.Selected}"
							/>

					<Label x:Name="Label23"
							Content="Description"
							Grid.Column="0"
							Grid.Row="1"
							Style="{StaticResource Label.Selected}"
							/>

					<TextBox x:Name="Tbx02"
							Grid.Column="1"
							Grid.Row="1"

							IsEnabled="{Binding Converter={StaticResource NullObjToFalse}}"
							res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
							res:TextBoxBehavior.SelectAllTextOnFocus="True"
							Text="{Binding Item.Description,
														 FallbackValue='description',
														 TargetNullValue=''}"
							Style="{StaticResource TextBox.Selected}"
							/>


					<Label x:Name="Label2x"
							Content="Settings"
							Grid.Column="0"
							Grid.Row="2"
							Style="{StaticResource Label.Selected}"
							/>

					<DockPanel x:Name="dpSettings"
							Grid.Column="1"
							Grid.Row="2"
							Margin="5,0,0,0"
							>

						<ComboBox x:Name="CbxItemClass"
								Tag="Item"
								Margin="0,0,5,0"
								Width="105"
								Height="18"
								Padding="0"
								HorizontalAlignment="right"

								d:ItemsSource="{Binding Source={x:Static sheetSupport:ItemClassDef.ItemClassDefs}}"
								FontSize="{StaticResource ConditionFontSize}"
								BorderThickness="2"
								custom:CustomProperties.MouseOverBrush="{StaticResource ItemsControl.Subject.Background.MouseOver}"
								custom:CustomProperties.NotEnabledBrush="{StaticResource ItemsControl.Subject.Background.Disabled}"
								IsEditable="False"
								IsReadOnly="True"
								custom:CustomProperties.DropDownBrushh="{StaticResource ItemsControl.ListItem.Background.Normal}"
								custom:CustomProperties.DropDownWidth="90.0"
								DockPanel.Dock="Left"
								MaxDropDownHeight="100"
								SelectedValuePath="Key"
								SelectedValue="{Binding Item.ItemClassIndex,
																				FallbackValue=1}"
								ItemsSource="{Binding Source={x:Static sheetSupport:ItemClassDef.ItemClassDefs}}"
								ItemContainerStyle="{StaticResource ComboBoxItemContainerStyle1}"
								FocusVisualStyle="{x:Null}"
								Template="{StaticResource ComboBoxTemplate1}"
								>
							<!--  IsDropDownOpen="{Binding ElementName=MainWinClsfrEd, Path=PopupIsOpenCbx0, Mode=TwoWay}"  -->
							<!--  SelectionChanged="CbxItemClass_SelectionChanged"  -->
							<!--  MouseUp="Cbx_OnMouseUp"  -->

							<ComboBox.ItemTemplate>
								<DataTemplate x:Name="DtCbxItemClass">
									<TextBlock
											Margin="0"
											Padding="0,0,0,2"
											FontSize="10"
											Text="{Binding Path=Value.Name,
																		 FallbackValue='name'}"
											>
										<TextBlock.Style>
											<Style TargetType="TextBlock">
												<Setter Property="Foreground" Value="White" />
												<Style.Triggers>
													<Trigger Property="IsEnabled" Value="false">
														<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</TextBlock.Style>
									</TextBlock>
								</DataTemplate>
							</ComboBox.ItemTemplate>


							<ComboBox.Style>
								<Style
										TargetType="ComboBox"
										BasedOn="{StaticResource Cbox1Style1}"
										>
									<EventSetter
											Event="Label.MouseUp"
											Handler="CbxLabel_OnMouseUp"
											/>
									<Setter Property="Background" Value="{StaticResource ItemsControl.Subject.Background.Normal}" />
									<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />
									<Setter Property="IsEnabled" Value="true" />
									<Style.Triggers>
										<DataTrigger Value="{x:Null}" Binding="{Binding Path=Item}">

											<Setter Property="IsEnabled" Value="false" />

										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>


						<Border x:Name="bdrSortValue"
								Margin="5,4,0,4"
								Padding="4,0,4,2"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="left"
								>
							<Border.Style>
								<Style TargetType="{x:Type Border}">
									<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Normal}" />
									<Setter Property="IsEnabled" Value="True" />
									<Style.Triggers>
										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Background" Value="{StaticResource ItemsControl.Value.Background.Disabled}" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<TextBox x:Name="TbxSortValue"
									MinWidth="50"
									Padding="16,0,16,0"
									VerticalAlignment="Center"
									HorizontalContentAlignment="Center"
									FontSize="{StaticResource ConditionFontSize}"
									Background="Transparent"
									BorderThickness="0"
									res:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text"
									res:TextBoxBehavior.SelectAllTextOnFocus="True"
									Text="{Binding Path=Item.SortCode,
																 Mode=TwoWay,
																 FallbackValue='n/a'}"
									>
								<TextBox.Style>
									<Style
											TargetType="TextBox"
											BasedOn="{StaticResource TextBox.Base}"
											>
										<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Normal}" />

										<Setter Property="IsEnabled" Value="true" />
										<Style.Triggers>
											<DataTrigger Value="{x:Null}" Binding="{Binding Item}">
												<Setter Property="IsEnabled" Value="false" />
												<!-- <Setter Property="Foreground" Value="{StaticResource ItemsControl.Value.Background.Disabled}"/> -->
												<Setter Property="Foreground" Value="{StaticResource ItemsControl.Text.Disabled.Alt2}" />

											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBox.Style>
							</TextBox>

						</Border>


						<Border x:Name="BdrFixed"
								Margin="0,0,5,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>

							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background}" />
									<Setter Property="IsEnabled" Value="true" />
									<Setter Property="Visibility" Value="Visible" />
									<Style.Triggers>
										<DataTrigger Value="{x:Null}" Binding="{Binding Path=Item}">
											<Setter Property="IsEnabled" Value="false" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding Path=Item.IsLocked}">
											<Setter Property="IsEnabled" Value="false" />
										</DataTrigger>
										<DataTrigger Value="false" Binding="{Binding ElementName=MainWinClsfrEd, Path=UserIsAdmin, FallbackValue='false'}">
											<Setter Property="Visibility" Value="Collapsed" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxFixed"
									Content="Fixed"
									Margin="3,2,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									BorderBrush="white"
									IsChecked="{Binding Path=Item.IsFixed,
																			Mode=TwoWay}"
									IsEnabled="{Binding ElementName=BdrFixed,
																			Path=IsEnabled}"
									>
								<CheckBox.Style>
									<Style
											TargetType="CheckBox"
											BasedOn="{StaticResource Ckbx1Style}"
											>
										<Setter Property="Foreground" Value="White" />
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="False">
												<Setter Property="Foreground" Value="LightGray" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</CheckBox.Style>
							</CheckBox>

						</Border>

						<Border x:Name="BdrLocked"
								Margin="0,0,5,0"
								Width="55"
								Height="18"
								Padding="0"
								HorizontalAlignment="right"
								BorderThickness="0"
								CornerRadius="3"
								DockPanel.Dock="Right"
								>

							<!--  IsEnabled="{Binding Item.IsFixed,  -->
							<!--  Converter={StaticResource NotBool}}"  -->
							<Border.Style>
								<Style
										TargetType="Border"
										BasedOn="{StaticResource Border.Base}"
										>
									<Setter Property="Background" Value="{StaticResource CheckBox.Background}" />
									<Setter Property="IsEnabled" Value="true" />
									<Style.Triggers>
										<DataTrigger Value="{x:Null}" Binding="{Binding Path=Item}">
											<Setter Property="IsEnabled" Value="false" />
										</DataTrigger>
										<DataTrigger Value="true" Binding="{Binding Path=Item.IsFixed}">
											<Setter Property="IsEnabled" Value="false" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Border.Style>

							<CheckBox x:Name="CkbxLocked"
									Content="Locked"
									Margin="3,2,0,0"
									Height="12"
									VerticalAlignment="Center"
									FontSize="10"
									Background="Transparent"
									BorderBrush="white"
									IsChecked="{Binding Path=Item.IsLocked,
																			Mode=TwoWay}"
									IsEnabled="{Binding ElementName=BdrLocked,
																			Path=IsEnabled}"
									>

								<CheckBox.Style>
									<Style
											TargetType="CheckBox"
											BasedOn="{StaticResource Ckbx1Style}"
											>
										<Setter Property="Foreground" Value="White" />
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="False">
												<Setter Property="Foreground" Value="LightGray" />
											</Trigger>
										</Style.Triggers>
									</Style>
								</CheckBox.Style>

							</CheckBox>

							<!--  Checked="CkbxLocked_OnChecked"  -->
						</Border>


					</DockPanel>


					<StackPanel
							Grid.Column="0"
							Grid.Row="3"
							Orientation="Vertical"
							>

						<Label x:Name="Label24"
								Content="Conditions"
								Margin="5,2,0,0"
								VerticalAlignment="Top"
								Style="{StaticResource Label.Selected}"
								/>

					</StackPanel>

					<ListView x:Name="Lv2"
							Grid.Column="0"
							Grid.Row="4"
							Grid.ColumnSpan="3"
							Margin="5,0,5,6"
							MinHeight="26"
							Padding="0,0,0,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="top"
							HorizontalContentAlignment="Stretch"
							VerticalContentAlignment="Bottom"
							d:DataContext="{x:Static sample:SampleData.Temp}"
							ItemContainerStyle="{StaticResource Lv2ItemContainerStyle1}"
							ItemTemplateSelector="{StaticResource Lv2ConditionSelector}"
							ItemsSource="{Binding Item.CompareOps,
																		FallbackValue={x:Null}}"
							Style="{StaticResource Tv1Lv1Style}"
							/>
					<!--  ItemTemplate="{StaticResource Lv2DataTemplate0}"  -->
					<!--  SelectionChanged="Lv2_SelectionChanged"  -->

					<Button x:Name="BtnAddCondition"
							Content="+"
							Grid.Column="2"
							Grid.Row="4"
							Margin="0,0,25,19"
							Width="30"
							Height="30"
							Padding="4,-2.5,0,0"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							HorizontalContentAlignment="Stretch"
							VerticalContentAlignment="Stretch"
							FontSize="26"
							FontWeight="Bold"
							BorderThickness="0"
							IsDefault="False"
							IsTabStop="False"
							Click="BtnAddCondition_OnClick"
							>
						<Button.Effect>
							<DropShadowEffect />
						</Button.Effect>

						<Button.Style>
							<Style
									TargetType="{x:Type Button}"
									BasedOn="{StaticResource Button.Condition.Style}"
									>
								<Setter Property="IsEnabled" Value="False" />
								<Style.Triggers>
									<DataTrigger Value="true" Binding="{Binding HasSelection, ElementName=MainWinClsfrEd}">
										<Setter Property="IsEnabled" Value="True" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Button.Style>
					</Button>

				</Grid>
			</Border>

			<DockPanel
					Grid.Column="0"
					Grid.Row="2"
					Margin="0,0,0,6"
					HorizontalAlignment="Stretch"
					Background="{StaticResource Win.Title.Background}"
					>
				<Label x:Name="Label25"
						Content="Sample Sheet Files"
						Margin="0,0,0,0"
						Padding="2,3,2,4"
						VerticalAlignment="Center"
						FontSize="13"
						Foreground="White"
						DockPanel.Dock="Left"
						/>
				<Label
						Content="{Binding FileList.Files.Count,
															FallbackValue=0}"
						Margin="0,0,0,0"
						Padding="2,3,2,4"
						FontSize="13"
						Foreground="White"
						ContentStringFormat="{} ({0})"
						DockPanel.Dock="Left"
						/>

			</DockPanel>

			<DataGrid x:Name="Dg1"
					Grid.Column="0"
					Grid.Row="3"
					HorizontalAlignment="Stretch"
					HorizontalContentAlignment="Stretch"
					DataContext="{Binding FileList,
																ElementName=MainWinClsfrEd,
																FallbackValue={x:Null}}"
					d:DataContext="{Binding Source={x:Static sample:SampleData.FileList2}}"
					Background="{StaticResource TreeView.Background}"
					HorizontalGridLinesBrush="{StaticResource TreeViewRow.BorderBrush.Light}"
					AutoGenerateColumns="False"
					CanUserAddRows="False"
					GridLinesVisibility="Horizontal"
					HeadersVisibility="None"
					HorizontalScrollBarVisibility="Auto"
					VerticalScrollBarVisibility="Visible"
					ItemsSource="{Binding Files}"
					CellStyle="{StaticResource Dg.Cell.Base}"
					RowStyle="{StaticResource Dg.Row.Base}"
					Style="{DynamicResource Dg1Style}"
					>
				<DataGrid.Columns>

					<DataGridTemplateColumn CellStyle="{StaticResource Dg.Cell.Base}">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate DataType="{x:Type sampleFileSupport:SheetPdf}">

								<DockPanel
										Margin="-2,0,-2,0"
										Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}},
																		Path=ViewportWidth}"
										HorizontalAlignment="Stretch"
										>
									<!--  Grid.Column="1"  -->
									<!--  Grid.Row="0"  -->
									<Border
											Margin="0,0,0,5"
											HorizontalAlignment="Right"
											VerticalAlignment="Bottom"
											BorderThickness="1,0,1,0"
											DockPanel.Dock="Right"
											>

										<StackPanel Orientation="Vertical">
											<Label x:Name="Label27a"
													Content="{Binding Path=SheetNumComponentData[0].AbbrevName,
																						Mode=OneWay,
																						FallbackValue='Type',
																						Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
													Margin="2,0,0,2"
													Foreground="DimGray"
													Style="{StaticResource Dg.CellLabel.Title}"
													/>

											<Label x:Name="Label28a"
													Content="{Binding FilePathInfo.FileNameObject.SheetIdType,
																						FallbackValue=GRN}"
													Margin="2,1,0,0"
													Foreground="DimGray"
													Style="{StaticResource Dg.CellLabel.Data}"
													/>
										</StackPanel>

										<Border.Style>
											<Style
													TargetType="Border"
													BasedOn="{StaticResource Dg.CellLabel.Border}"
													>
												<Setter Property="Visibility" Value="Visible" />
												<Style.Triggers>
													<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.SheetIdType, Mode=OneWay}">
														<Setter Property="Visibility" Value="Collapsed" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Border.Style>
									</Border>

									<!--  Grid.Column="0"  -->
									<!--  Grid.Row="0"  -->
									<StackPanel
											Margin="6,0,0,0"
											DockPanel.Dock="Left"
											Orientation="Vertical"
											>

										<StackPanel Orientation="Horizontal">

											<Label x:Name="Label25"
													Content="{Binding FilePathInfo.FileNameObject.SheetNumber,
																						FallbackValue='filename'}"
													Margin="2,3,0,0"
													MinWidth="86"
													Padding="0,0,10,0"
													HorizontalAlignment="Stretch"
													Foreground="White"
													/>

											<Label x:Name="Label26"
													Content="{Binding FilePathInfo.FileNameObject.SheetTitle,
																						FallbackValue='filename'}"
													Margin="0,3,0,0"
													Padding="0"
													HorizontalAlignment="Stretch"
													Foreground="White"
													/>
										</StackPanel>

										<StackPanel
												Margin="2"
												Orientation="Horizontal"
												>

											<!--  phase - building  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label26a"
															Content="{Binding Path=SheetNumComponentData[0].AbbrevName,
																								Mode=OneWay,
																								FallbackValue='Ph / Bl',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>

													<Label x:Name="Label26b"
															Content="{Binding FilePathInfo.FileNameObject.PhaseBldg,
																								Mode=OneWay,
																								TargetNullValue='--',
																								FallbackValue=GRN}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Value="{x:Null}" Binding="{Binding ElementName=Dg1, Path=DataContext.Building}" />
																	<Condition Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.PhaseBldg}" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Visibility" Value="Collapsed">
																</Setter>
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>


											<!--  pd spacer  -->
											<!-- removed
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label27b"
															Content="{Binding Path=SheetNumComponentData[1].AbbrevName,
																								Mode=OneWay,
																								FallbackValue='Ph / Bl',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}" />

													<Label x:Name="Label28b"
															Content="{Binding FilePathInfo.FileNameObject.PhaseBldg,
																								Mode=OneWay,
																								TargetNullValue='\-\-',
																								FallbackValue=GRN}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}" />
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}">
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Value="{x:Null}" Binding="{Binding ElementName=Dg1, Path=DataContext.Building}" />
																	<Condition Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.PhaseBldg}" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Visibility" Value="Collapsed">
																</Setter>
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>
											-->

											<!--  discipline (2)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label29"
															Content="{Binding Path=SheetNumComponentData[2].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='D',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label30"
															Content="{Binding FilePathInfo.FileNameObject.Discipline,
																								FallbackValue=99}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Discipline, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  category (4)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label32"
															Content="{Binding Path=SheetNumComponentData[4].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='C',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>

													<Label x:Name="Label31"
															Content="{Binding FilePathInfo.FileNameObject.Category,
																								FallbackValue=123A}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Category, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  sub-cat (6)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label33"
															Content="{Binding Path=SheetNumComponentData[6].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Sc',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label34"
															Content="{Binding FilePathInfo.FileNameObject.Subcategory,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Subcategory, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  modifier (8)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label35"
															Content="{Binding Path=SheetNumComponentData[8].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='M',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label36"
															Content="{Binding FilePathInfo.FileNameObject.Modifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Modifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  sub-modifier (10)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37"
															Content="{Binding Path=SheetNumComponentData[10].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Sm',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38"
															Content="{Binding FilePathInfo.FileNameObject.Submodifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Submodifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  identifier (12)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37a"
															Content="{Binding Path=SheetNumComponentData[12].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Id',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38a"
															Content="{Binding FilePathInfo.FileNameObject.Identifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Identifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--  sub-identifier (14)  -->
											<Border>
												<StackPanel Orientation="Horizontal">
													<Label x:Name="Label37b"
															Content="{Binding Path=SheetNumComponentData[14].AbbrevName,
																								Mode=OneTime,
																								FallbackValue='Si',
																								Source={x:Static file:FileNameSheetIdentifiers.ShtIds}}"
															Foreground="DimGray"
															Style="{StaticResource Dg.CellLabel.Title}"
															/>
													<Label x:Name="Label38b"
															Content="{Binding FilePathInfo.FileNameObject.Subidentifier,
																								FallbackValue=none}"
															Foreground="White"
															Style="{StaticResource Dg.CellLabel.Data}"
															/>
												</StackPanel>
												<Border.Style>
													<Style
															TargetType="Border"
															BasedOn="{StaticResource Dg.CellLabel.Border}"
															>
														<Setter Property="Visibility" Value="Visible" />
														<Style.Triggers>
															<DataTrigger Value="{x:Null}" Binding="{Binding FilePathInfo.FileNameObject.Subidentifier, Mode=OneWay}">
																<Setter Property="Visibility" Value="Collapsed" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

										</StackPanel>
									</StackPanel>

									<!-- </Grid> -->
								</DockPanel>


							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>

		<!--#endregion-->

		<!--#region > selection panel-->

		<TreeView x:Name="Tv1"
				Tag="{Binding ContextCmdDelete,
											ElementName=MainWinClsfrEd}"
				Grid.Column="0"
				Grid.Row="1"
				Margin="5"
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				DataContext="{Binding ClassificationFile.TreeBase,
															ElementName=MainWinClsfrEd}"
				d:DataContext="{Binding Source={x:Static sample:SampleData.TreeBase}}"
				Background="{StaticResource ItemsControl.Background}"
				ScrollViewer.HorizontalScrollBarVisibility="Auto"
				ItemContainerStyle="{StaticResource Tv1ItemContainerStyle1}"
				ItemTemplate="{StaticResource Tv1ItemTemplate1}"
				ItemsSource="{Binding ChildrenView}"
				Style="{StaticResource Tv1Style1}"

				/>
				<!-- SelectedItemChanged="Tv1_OnSelectedItemChanged" -->
		<!--  d:DataContext="{d:DesignInstance Type=sample:SampleData}"  -->
		<!--  d:DataContext="{Binding Source={x:Static sample:SampleData.BaseOfTreeRoot}}"  -->

		<!--#endregion-->

		<!--#region > debug panel bottom-->
		<DockPanel
				Grid.Column="0"
				Grid.Row="3"
				Grid.ColumnSpan="2"
				Height="400"
				Visibility="Collapsed"
				>
			<ContentControl
					Margin="0,5,0,5"
					MinWidth="400"
					ContentTemplate="{DynamicResource Lv3DataTemplate30}"
					/>

			<!--  ContentTemplate="{DynamicResource Tv1ItemTemplate1}"  -->
			<!--  ContentTemplate="{DynamicResource Lv1DataTemplate0}"  -->
			<!--  ContentTemplate="{DynamicResource Lv2DataTemplate0}"  -->

			<!--  ContentTemplate="{DynamicResource Lv3DataTemplate30}"  -->

			<Grid
					Margin="20,0,0,0"
					Height="120"
					Background="{StaticResource ItemsControl.ListItem.Background.Normal}"
					DockPanel.Dock="Right"
					>

				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="80" />


				</Grid.ColumnDefinitions>

				<Grid.RowDefinitions>
					<RowDefinition Height="24" />
					<RowDefinition Height="24" />
					<RowDefinition Height="24" />
					<RowDefinition Height="24" />
					<RowDefinition Height="24" />
				</Grid.RowDefinitions>



				<Label
						Content="Selected"
						Grid.Column="0"
						Grid.Row="0"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Foreground="White"
						/>
				<Rectangle
						Grid.Column="0"
						Grid.Row="0"
						Margin="5,0,5,0"
						Height="20"
						StrokeThickness="1"
						Stroke="#FF26A0DA"
						Fill="#3D26A0DA"
						/>

				<Label
						Content="Hover"
						Grid.Column="0"
						Grid.Row="1"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Foreground="White"
						/>
				<Rectangle
						Grid.Column="0"
						Grid.Row="1"
						Margin="5,0,5,0"
						Height="20"
						StrokeThickness="1"
						Stroke="#A826A0DA"
						Fill="#1F26A0DA"
						/>


				<Rectangle
						Grid.Column="0"
						Grid.Row="2"
						Margin="5,0,5,0"
						Height="20"
						StrokeThickness="1"
						Stroke="#CCC2E4F4"
						Fill="#BF26A0DA"
						/>

				<Label
						Content="Hover Alt"
						Grid.Column="0"
						Grid.Row="2"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Foreground="White"
						/>


				<Rectangle
						Grid.Column="0"
						Grid.Row="3"
						Margin="5,0,5,0"
						Height="20"
						StrokeThickness="1"
						Stroke="#CC80C4E5"
						Fill="#3DDADADA"
						/>

				<Label
						Content="SelNoFocAlt"
						Grid.Column="0"
						Grid.Row="3"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Foreground="White"
						/>



				<Label
						Content="SelNoFoc"
						Grid.Column="0"
						Grid.Row="4"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Foreground="White"
						/>
				<Rectangle
						Grid.Column="0"
						Grid.Row="4"
						Margin="5,0,5,0"
						Height="20"
						StrokeThickness="1"
						Stroke="#FFDADADA"
						Fill="#3DDADADA"
						/>

			</Grid>

			<TreeView x:Name="Tv3"
					Margin="20,0,0,0"
					HorizontalAlignment="Stretch"
					HorizontalContentAlignment="Stretch"
					DataContext="{Binding ClassificationFile.TreeBase,
																ElementName=MainWinClsfrEd}"
					d:DataContext="{Binding Source={x:Static sample:SampleData.TreeBase}}"
					Background="{StaticResource ItemsControl.Background}"
					Visibility="Collapsed"
					DockPanel.Dock="left"
					ScrollViewer.HorizontalScrollBarVisibility="Auto"
					ItemContainerStyle="{StaticResource Tv1ItemContainerStyle1}"
					ItemTemplate="{StaticResource Tv3ItemTemplate3}"
					ItemsSource="{Binding ChildrenView}"
					Style="{StaticResource Tv1Style1}"
					/>

		</DockPanel>
		<!--#endregion-->

	</Grid>
	<!--#endregion-->


</Window>
