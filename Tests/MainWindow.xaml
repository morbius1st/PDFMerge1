<Window x:Name="mainWin"
		x:Class="Tests.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:Seq="clr-namespace:Tests.Sequence"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:local="clr-namespace:Tests"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		Title="MainWindow"
		Width="1500"
		Height="900"
		DataContext="{Binding ElementName=mainWin}"
		mc:Ignorable="d"
		Background="#444444"
		Loaded="MainWin_Loaded"
		>
	<Window.Resources>

		<Style x:Key="tbx"
				TargetType="{x:Type TextBox}"
				>
			<Setter Property="Background" Value="#333333" />
			<Setter Property="FontFamily" Value="Droid Sans Mono" />
			<Setter Property="FontSize" Value="12" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="HorizontalScrollBarVisibility" Value="Visible" />
			<Setter Property="Padding" Value="8" />
			<Setter Property="TextWrapping" Value="NoWrap" />
			<Setter Property="VerticalScrollBarVisibility" Value="Visible" />
		</Style>

		<x:Static x:Key="mx"
				Member="local:MainWindow.Items2"
				/>
		<x:Static x:Key="px"
				Member="local:MainWindow.Parts2"
				/>
		<x:Static x:Key="dx"
				Member="local:MainWindow.Disciplines2"
				/>
		<sys:Double x:Key="NaN">
			NaN
		</sys:Double>

		<ControlTemplate x:Key="item1"
				TargetType="{x:Type TreeViewItem}"
				>
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="250" />
					<ColumnDefinition Width="150" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>
				<TextBox x:Name="tbx1"
						Grid.Column="0"
						HorizontalAlignment="Stretch"
						Text="{Binding Header,
													 RelativeSource={RelativeSource TemplatedParent}}"
						/>
				<TextBox x:Name="tbx2"
						Grid.Column="1"
						Width="120"
						Text="textbox 2"
						/>
				<TextBox x:Name="tbx3"
						Grid.Column="2"
						Width="120"
						Text="textbox 3"
						/>
			</Grid>
		</ControlTemplate>

		<Style x:Key="dgIdHdr"
				TargetType="{x:Type DataGridColumnHeader}"
				>
			<Setter Property="BorderBrush" Value="LightSkyBlue" />
			<Setter Property="Margin" Value="0" />
		</Style>

		<Style x:Key="dgIdHdrBeg"
				TargetType="{x:Type DataGridColumnHeader}"
				BasedOn="{StaticResource dgIdHdr}"
				>
			<Setter Property="BorderThickness" Value="1,0,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgIdHdrMid"
				TargetType="{x:Type DataGridColumnHeader}"
				BasedOn="{StaticResource dgIdHdr}"
				>
			<Setter Property="BorderThickness" Value="0,0,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgIdHdrEnd"
				TargetType="{x:Type DataGridColumnHeader}"
				BasedOn="{StaticResource dgIdHdr}"
				>
			<Setter Property="BorderThickness" Value="0,0,1,1" />
			<Setter Property="HorizontalAlignment" Value="Stretch" />
		</Style>

		<Style x:Key="dgHeader2"
				TargetType="{x:Type DataGridColumnHeader}"
				>
			<Setter Property="Height" Value="0" />

		</Style>


		<Style x:Key="dgIdCel"
				TargetType="{x:Type DataGridCell}"
				>
			<Setter Property="BorderBrush" Value="LightSkyBlue" />
			<Setter Property="BorderThickness" Value="0" />
		</Style>

		<Style x:Key="dgIdCelBeg"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgIdCel}"
				>
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgRowHdr"
				TargetType="{x:Type DataGridRowHeader}"
				>
			<Setter Property="BorderBrush" Value="Blue" />
			<Setter Property="BorderThickness" Value="0" />
			<Setter Property="Width" Value="20" />
		</Style>


		<Style x:Key="dgCel"
				TargetType="{x:Type DataGridCell}"
				>
			<Setter Property="Background" Value="White" />
			<Setter Property="BorderBrush" Value="LightSkyBlue" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridCell}">
						<Border
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								SnapsToDevicePixels="True"
								>
							<ContentPresenter
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
					<!-- <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" /> -->
					<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				</Trigger>
				<Trigger Property="IsKeyboardFocusWithin" Value="True">
					<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
				</Trigger>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsSelected" Value="true" />
						<Condition Property="Selector.IsSelectionActive" Value="false" />
					</MultiTrigger.Conditions>
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
					<!-- <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" /> -->
					<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
				</MultiTrigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="dgCelBeg"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgCel}"
				>
			<Setter Property="BorderThickness" Value="1,1,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgCelEnd"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgCel}"
				>
			<Setter Property="BorderThickness" Value="0,1,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Left" />
		</Style>

		<Style x:Key="dgCelDetBeg"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgCel}"
				>
			<Setter Property="BorderThickness" Value="1,0,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgCelDetMid"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgCel}"
				>
			<Setter Property="BorderThickness" Value="0,0,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
		</Style>

		<Style x:Key="dgCelDetEnd"
				TargetType="{x:Type DataGridCell}"
				BasedOn="{StaticResource dgCel}"
				>
			<Setter Property="BorderThickness" Value="0,0,1,1" />
			<Setter Property="HorizontalContentAlignment" Value="Left" />
		</Style>


		<!--#region > datagrid sample-->

		<!--  Control colors.  -->

		<Color x:Key="WindowColor">#FFE8EDF9</Color>
		<Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
		<Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

		<Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
		<Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
		<Color x:Key="DisabledForegroundColor">#FF888888</Color>

		<Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
		<Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

		<Color x:Key="ControlLightColor">White</Color>
		<Color x:Key="ControlMediumColor">#FF7381F9</Color>
		<Color x:Key="ControlDarkColor">#FF211AA9</Color>

		<Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
		<Color x:Key="ControlPressedColor">#FF211AA9</Color>


		<Color x:Key="GlyphColor">#FF444444</Color>
		<Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>


		<!--  Border colors  -->

		<Color x:Key="BorderLightColor">#FFCCCCCC</Color>
		<Color x:Key="BorderMediumColor">#FF888888</Color>
		<Color x:Key="BorderDarkColor">#FF444444</Color>

		<Color x:Key="PressedBorderLightColor">#FF888888</Color>
		<Color x:Key="PressedBorderDarkColor">#FF444444</Color>

		<Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
		<Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

		<Color x:Key="DefaultBorderBrushDarkColor">Black</Color>


		<!--  Control-specific resources.  -->

		<Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
		<Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
		<Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

		<Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

		<LinearGradientBrush x:Key="MenuPopupBrush" StartPoint="0.5,0" EndPoint="0.5,1">
			<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
			<GradientStop Offset="0.5" Color="{DynamicResource ControlMediumColor}" />
			<GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" />
		</LinearGradientBrush>

		<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
			<LinearGradientBrush.GradientStops>
				<GradientStopCollection>
					<GradientStop Offset="0" Color="#000000FF" />
					<GradientStop Offset="0.4" Color="#600000FF" />
					<GradientStop Offset="0.6" Color="#600000FF" />
					<GradientStop Offset="1" Color="#000000FF" />
				</GradientStopCollection>
			</LinearGradientBrush.GradientStops>
		</LinearGradientBrush>


		<BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />


		<!--  Style and template for the button in the upper left corner of the DataGrid.  -->

		<Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
				TargetType="{x:Type Button}"
				>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Rectangle x:Name="Border"
									SnapsToDevicePixels="True"
									>
								<Rectangle.Stroke>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource BorderLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource BorderMediumColor}" />
									</LinearGradientBrush>
								</Rectangle.Stroke>
								<Rectangle.Fill>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
									</LinearGradientBrush>
								</Rectangle.Fill>
							</Rectangle>
							<Polygon x:Name="Arrow"
									Margin="8,8,3,3"
									HorizontalAlignment="Right"
									VerticalAlignment="Bottom"
									Opacity="0.15"
									Points="0,10 10,10 10,0"
									Stretch="Uniform"
									>
								<Polygon.Fill>
									<SolidColorBrush Color="{DynamicResource GlyphColor}" />
								</Polygon.Fill>
							</Polygon>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="Border"
													Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="Border"
													Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlPressedColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Disabled">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames
													Storyboard.TargetName="Arrow"
													Storyboard.TargetProperty="(UIElement.Visibility)"
													>
												<DiscreteObjectKeyFrame
														Value="{x:Static Visibility.Collapsed}"
														KeyTime="0"
														/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the DataGrid.  -->

		<Style TargetType="{x:Type DataGrid}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="BorderBrush">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
						<GradientStop Offset="0" Color="{DynamicResource BorderLightColor}" />
						<GradientStop Offset="1" Color="{DynamicResource BorderDarkColor}" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
			<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
			<Setter Property="ScrollViewer.PanningMode" Value="Both" />
			<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGrid}">
						<Border x:Name="border"
								Padding="{TemplateBinding Padding}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								SnapsToDevicePixels="True"
								>
							<Border.Background>
								<SolidColorBrush Color="{DynamicResource ControlLightColor}" />
							</Border.Background>
							<ScrollViewer x:Name="DG_ScrollViewer"
									Background="Black"
									Focusable="false"
									>
								<ScrollViewer.Template>
									<ControlTemplate TargetType="{x:Type ScrollViewer}">
										<Grid>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto" />
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="Auto" />
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition Height="*" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>

											<Button
													Width="{Binding CellsPanelHorizontalOffset,
																					RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
													Command="{x:Static DataGrid.SelectAllCommand}"
													Focusable="false"
													Visibility="{Binding HeadersVisibility,
																							 ConverterParameter={x:Static DataGridHeadersVisibility.All},
																							 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																							 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
													Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
																																				TypeInTargetAssembly={x:Type DataGrid}}}"
													/>

											<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
													Grid.Column="1"
													Visibility="{Binding HeadersVisibility,
																							 ConverterParameter={x:Static DataGridHeadersVisibility.Column},
																							 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																							 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
													/>

											<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
													Grid.Row="1"
													Grid.ColumnSpan="2"
													CanContentScroll="{TemplateBinding CanContentScroll}"
													/>

											<ScrollBar x:Name="PART_VerticalScrollBar"
													Grid.Column="2"
													Grid.Row="1"
													Value="{Binding VerticalOffset,
																					Mode=OneWay,
																					RelativeSource={RelativeSource TemplatedParent}}"
													Maximum="{TemplateBinding ScrollableHeight}"
													Orientation="Vertical"
													ViewportSize="{TemplateBinding ViewportHeight}"
													Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
													/>

											<Grid
													Grid.Column="1"
													Grid.Row="2"
													>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
													<ColumnDefinition Width="*" />
												</Grid.ColumnDefinitions>

												<ScrollBar x:Name="PART_HorizontalScrollBar"
														Grid.Column="1"
														Value="{Binding HorizontalOffset,
																						Mode=OneWay,
																						RelativeSource={RelativeSource TemplatedParent}}"
														Maximum="{TemplateBinding ScrollableWidth}"
														Orientation="Horizontal"
														ViewportSize="{TemplateBinding ViewportWidth}"
														Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
														/>
											</Grid>
										</Grid>
									</ControlTemplate>
								</ScrollViewer.Template>
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Disabled">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
													>
												<EasingColorKeyFrame
														Value="{DynamicResource ControlLightColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Normal" />
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsGrouping" Value="true">
					<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
				</Trigger>
			</Style.Triggers>
		</Style>


		<!--  Style and template for the DataGridCell.  -->

		<Style TargetType="{x:Type DataGridCell}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridCell}">
						<Border x:Name="border"
								Background="Transparent"
								BorderThickness="1"
								BorderBrush="Transparent"
								SnapsToDevicePixels="True"
								>
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="FocusStates">
									<VisualState x:Name="Unfocused" />
									<VisualState x:Name="Focused" />
								</VisualStateGroup>
								<VisualStateGroup x:Name="CurrentStates">
									<VisualState x:Name="Regular" />
									<VisualState x:Name="Current">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="border"
													Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource DatagridCurrentCellBorderColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the DataGridRow.  -->

		<Style TargetType="{x:Type DataGridRow}">
			<Setter Property="Background">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource ControlLightColor}" />
				</Setter.Value>
			</Setter>
			<Setter Property="SnapsToDevicePixels" Value="true" />
			<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
			<Setter Property="ValidationErrorTemplate">
				<Setter.Value>
					<ControlTemplate>
						<TextBlock
								Margin="2,0,0,0"
								VerticalAlignment="Center"
								Foreground="Red"
								Text="!"
								/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridRow}">
						<Border x:Name="DGR_Border"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								SnapsToDevicePixels="True"
								>
							<Border.Background>
								<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
									<GradientStop Offset="0" Color="Transparent" />
									<GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" />
								</LinearGradientBrush>
							</Border.Background>

							<SelectiveScrollingGrid>
								<SelectiveScrollingGrid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</SelectiveScrollingGrid.ColumnDefinitions>
								<SelectiveScrollingGrid.RowDefinitions>
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
								</SelectiveScrollingGrid.RowDefinitions>
								<DataGridCellsPresenter
										Grid.Column="1"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										ItemsPanel="{TemplateBinding ItemsPanel}"
										/>
								<DataGridDetailsPresenter
										Grid.Column="1"
										Grid.Row="1"
										SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen,
																																									 ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
																																									 Converter={x:Static DataGrid.RowDetailsScrollingConverter},
																																									 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
										Visibility="{TemplateBinding DetailsVisibility}"
										/>
								<DataGridRowHeader
										Grid.RowSpan="2"
										SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
										Visibility="{Binding HeadersVisibility,
																				 ConverterParameter={x:Static DataGridHeadersVisibility.Row},
																				 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																				 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
										/>
							</SelectiveScrollingGrid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />


									<!--  Provide a different appearance for every other row.  -->

									<VisualState x:Name="Normal_AlternatingRow">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ContentAreaColorLight}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>

												<EasingColorKeyFrame
														Value="{StaticResource ContentAreaColorDark}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>



									<!--
										In this example, a row in Editing or selected mode has an
										identical appearances. In other words, the states
										Normal_Selected, Unfocused_Selected, Normal_Editing,
										MouseOver_Editing, MouseOver_Unfocused_Editing,
										and Unfocused_Editing are identical.
									-->


									<VisualState x:Name="Normal_Selected">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="Unfocused_Selected">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="Normal_Editing">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="MouseOver_Editing">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="MouseOver_Unfocused_Editing">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="Unfocused_Editing">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlDarkColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="MouseOver">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMediumColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>



									<!--
										In this example, the appearance of a selected row
										that has the mouse over it is the same regardless of
										whether the row is selected.  In other words, the states
										MouseOver_Editing and MouseOver_Unfocused_Editing are identical.
									-->


									<VisualState x:Name="MouseOver_Selected">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>

									<VisualState x:Name="MouseOver_Unfocused_Selected">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="DGR_Border"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the resize control on the DataGridRowHeader.  -->

		<Style x:Key="RowHeaderGripperStyle"
				TargetType="{x:Type Thumb}"
				>
			<Setter Property="Height" Value="8" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Cursor" Value="SizeNS" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the DataGridRowHeader.  -->

		<Style TargetType="{x:Type DataGridRowHeader}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
						<Grid>
							<Border x:Name="rowHeaderBorder"
									Width="10"
									BorderThickness="1"
									>
								<Border.BorderBrush>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource BorderLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource BorderDarkColor}" />
									</LinearGradientBrush>
								</Border.BorderBrush>
								<Border.Background>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
									</LinearGradientBrush>
								</Border.Background>
								<StackPanel Orientation="Horizontal">
									<ContentPresenter
											VerticalAlignment="Center"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											/>
									<Control
											SnapsToDevicePixels="false"
											Visibility="{Binding (Validation.HasError),
																					 Converter={StaticResource bool2VisibilityConverter},
																					 RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
											Template="{Binding ValidationErrorTemplate,
																				 RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
											/>
								</StackPanel>
							</Border>

							<Thumb x:Name="PART_TopHeaderGripper"
									VerticalAlignment="Top"
									Style="{StaticResource RowHeaderGripperStyle}"
									/>
							<Thumb x:Name="PART_BottomHeaderGripper"
									VerticalAlignment="Bottom"
									Style="{StaticResource RowHeaderGripperStyle}"
									/>
							<VisualStateManager.VisualStateGroups>


								<!--
									This example does not specify an appearance for every
									state.  You can add storyboard to the states that are listed
									to change the appearance of the DataGridRowHeader when it is
									in a specific state.
								-->


								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="Normal_CurrentRow" />
									<VisualState x:Name="Unfocused_EditingRow" />
									<VisualState x:Name="Normal_EditingRow" />
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<ColorAnimationUsingKeyFrames
													Storyboard.TargetName="rowHeaderBorder"
													Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
													>
												<EasingColorKeyFrame
														Value="{StaticResource ControlMouseOverColor}"
														KeyTime="0"
														/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="MouseOver_CurrentRow" />
									<VisualState x:Name="MouseOver_Unfocused_EditingRow" />
									<VisualState x:Name="MouseOver_EditingRow" />
									<VisualState x:Name="MouseOver_Unfocused_Selected" />
									<VisualState x:Name="MouseOver_Selected" />
									<VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
									<VisualState x:Name="MouseOver_CurrentRow_Selected" />
									<VisualState x:Name="Unfocused_Selected" />
									<VisualState x:Name="Unfocused_CurrentRow_Selected" />
									<VisualState x:Name="Normal_CurrentRow_Selected" />
									<VisualState x:Name="Normal_Selected" />
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the resize control on the DataGridColumnHeader.  -->

		<Style x:Key="ColumnHeaderGripperStyle"
				TargetType="{x:Type Thumb}"
				>
			<Setter Property="Width" Value="8" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Cursor" Value="SizeWE" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the DataGridColumnHeader.  -->

		<Style TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
						<Grid>
							<Border x:Name="columnHeaderBorder"
									Padding="3,0,3,0"
									BorderThickness="1"
									>
								<Border.BorderBrush>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource BorderLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource BorderDarkColor}" />
									</LinearGradientBrush>
								</Border.BorderBrush>
								<Border.Background>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
										<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
									</LinearGradientBrush>
								</Border.Background>
								<ContentPresenter
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>

							<Thumb x:Name="PART_LeftHeaderGripper"
									HorizontalAlignment="Left"
									Style="{StaticResource ColumnHeaderGripperStyle}"
									/>
							<Thumb x:Name="PART_RightHeaderGripper"
									HorizontalAlignment="Right"
									Style="{StaticResource ColumnHeaderGripperStyle}"
									/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
						<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
						<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
		</Style>


		<!--  Style and template for the DataGridColumnHeadersPresenter.  -->

		<Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
						<Grid>
							<DataGridColumnHeader x:Name="PART_FillerColumnHeader"
									IsHitTestVisible="False"
									/>
							<ItemsPresenter />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>



		<!--#endregion-->



	</Window.Resources>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="*" />
			<RowDefinition Height="*" />
			<RowDefinition Height="90" />
		</Grid.RowDefinitions>

		<TextBox x:Name="tbxLeft"
				Grid.Column="0"
				Grid.Row="0"
				Height="100"
				HorizontalAlignment="Stretch"
				VerticalAlignment="top"
				Text="TextBlock"
				TextWrapping="Wrap"
				Style="{StaticResource tbx}"
				/>
		<DataGrid
				Grid.Column="0"
				Grid.Row="0"
				Margin="0,100,0,0"
				Width="480"
				Height="200"
				HorizontalAlignment="Left"
				VerticalAlignment="top"
				DataContext="{Binding Disciplines.DisciplineVue,
															ElementName=mainWin,
															Mode=OneWay}"
				d:DataContext="{Binding DisciplineVue,
																Mode=OneWay,
																Source={StaticResource dx}}"
				AutoGenerateColumns="True"
				ItemsSource="{Binding}"
				/>
		<!--  d:DataContext="{Binding DisciplineVue,  -->
		<!--  Mode=OneWay,  -->
		<!--  Source={StaticResource dx}}"  -->
		<!--  DataContext="{Binding ElementName=mainWin, Path=Disciplines, Mode=OneWay}"  -->

		<TreeView x:Name="tv01"
				Grid.Column="1"
				Grid.Row="0"
				Height="300"
				HorizontalAlignment="Stretch"
				VerticalAlignment="top"
				HorizontalContentAlignment="Stretch"
				VerticalContentAlignment="Stretch"
				FontSize="12"
				Background="#333333"
				Foreground="White"
				>
			<TreeViewItem x:Name="item1"
					Foreground="White"
					Header="xaml item 1"
					>
				<TreeViewItem
						Foreground="White"
						Header="xaml sub-item"
						Template="{StaticResource item1}"
						/>
			</TreeViewItem>
			<TreeViewItem x:Name="Item2"
					Foreground="White"
					IsExpanded="True"
					Header="xaml item 2"
					>
				<TreeViewItem
						Foreground="White"
						Header="xaml sub-item"
						Template="{StaticResource item1}"
						/>
			</TreeViewItem>

		</TreeView>

		<Label
				Content="SeqItems"
				Grid.Column="0"
				Grid.Row="1"
				Foreground="White"
				/>


		<DataGrid x:Name="dgId"
				Grid.Column="0"
				Grid.Row="1"
				Margin="0,25,0,0"
				Width="580"
				HorizontalAlignment="Left"
				VerticalAlignment="Stretch"
				DataContext="{Binding SqItems.Items,
															ElementName=mainWin,
															Mode=OneWay}"
				d:DataContext="{Binding Items,
																Mode=OneWay,
																Source={StaticResource mx}}"
				BorderThickness="1"
				IsReadOnly="True"
				IsSynchronizedWithCurrentItem="True"
				AutoGenerateColumns="False"
				GridLinesVisibility="None"
				HeadersVisibility="None"
				RowDetailsVisibilityMode="VisibleWhenSelected"
				ItemsSource="{Binding}"
				RowHeaderStyle="{StaticResource dgRowHdr}"
				>
			<DataGrid.Columns>
				<DataGridTextColumn
						Width="40"
						Binding="{Binding Key}"
						Visibility="Visible"
						CellStyle="{StaticResource dgCelBeg}"
						/>
				<DataGridTextColumn
						Width="*"
						Binding="{Binding Value.Description}"
						Visibility="Visible"
						CellStyle="{StaticResource dgCelEnd}"
						/>
			</DataGrid.Columns>
			<DataGrid.RowDetailsTemplate>
				<DataTemplate>
					<Border Height="Auto">
						<DataGrid x:Name="dgIdDetail"
								Margin="0,0,0,5"
								Height="auto"
								BorderThickness="0"
								HorizontalGridLinesBrush="Transparent"
								AutoGenerateColumns="False"
								GridLinesVisibility="None"
								ItemsSource="{Binding Value.Parts}"
								RowHeaderStyle="{StaticResource dgRowHdr}"
								>
							<DataGrid.Columns>
								<DataGridTextColumn
										Width="80"
										Binding="{Binding Code}"
										Header="Code"
										CellStyle="{StaticResource dgCelDetBeg}"
										HeaderStyle="{StaticResource dgIdHdrBeg}"
										/>
								<DataGridTextColumn
										Width="120"
										Binding="{Binding Title}"
										Header="Title"
										CellStyle="{StaticResource dgCelDetMid}"
										HeaderStyle="{StaticResource dgIdHdrMid}"
										/>
								<DataGridTextColumn
										Width="150"
										Binding="{Binding Description}"
										Header="Description"
										CellStyle="{StaticResource dgCelDetEnd}"
										HeaderStyle="{StaticResource dgIdHdrEnd}"
										/>

								<DataGridTemplateColumn Header="Name" Width="150" 
								>

									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<ComboBox
													ItemsSource="{Binding ElementName=mainWin, Path=ComboBoxLoad}"
													SelectedValuePath="EmployeeName"
													DisplayMemberPath="EmployeeName"
													SelectedValue="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridCell}}, Path=DataContext.Test}"
										
											/>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
							</DataGrid.Columns>
						</DataGrid>
					</Border>
				</DataTemplate>
			</DataGrid.RowDetailsTemplate>

		</DataGrid>

		<Label
				Content="PartsList"
				Grid.Column="0"
				Grid.Row="2"
				Foreground="White"
				/>

		<DataGrid x:Name="dataGridB"
				Grid.Column="0"
				Grid.Row="2"
				Margin="0,25,0,0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				DataContext="{Binding Parts.PartsList,
															ElementName=mainWin,
															Mode=OneWay}"
				d:DataContext="{Binding PartsList,
																Mode=OneWay,
																Source={StaticResource px}}"
				HorizontalGridLinesBrush="LightSkyBlue"
				VerticalGridLinesBrush="LightSkyBlue"
				IsReadOnly="True"
				IsSynchronizedWithCurrentItem="True"
				AreRowDetailsFrozen="False"
				AutoGenerateColumns="False"
				RowDetailsVisibilityMode="VisibleWhenSelected"
				SelectionMode="Single"
				VerticalScrollBarVisibility="Visible"
				ItemsSource="{Binding}"
				>
			<DataGrid.Columns>
				<DataGridTextColumn Binding="{Binding Key}">
					<DataGridTextColumn.Header>
						<DataGridColumnHeader
								Content="Discipline"
								Width="150"
								HorizontalAlignment="Stretch"
								Visibility="Visible"
								/>
					</DataGridTextColumn.Header>
				</DataGridTextColumn>
			</DataGrid.Columns>
			<!--  RowStyle="{DynamicResource DataGridRowStyle1}"  -->
			<DataGrid.RowDetailsTemplate>
				<DataTemplate>
					<Border
							BorderThickness="1"
							BorderBrush="Red"
							>

						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="120" />
							</Grid.RowDefinitions>
							<Button
									Content="Done"
									Grid.Row="0"
									Margin="6,2,0,2"
									Width="45"
									Height="15"
									Padding="0"
									HorizontalAlignment="Left"
									FontSize="10"
									Visibility="Visible"
									Click="BtnRowDone_OnClick"
									/>
							<DataGrid
									Grid.Row="1"
									HorizontalAlignment="Stretch"
									HorizontalGridLinesBrush="LightSkyBlue"
									VerticalGridLinesBrush="LightSkyBlue"
									IsReadOnly="True"
									AutoGenerateColumns="False"
									HorizontalScrollBarVisibility="Visible"
									VerticalScrollBarVisibility="Visible"
									ItemsSource="{Binding Value.Parts}"
									>
								<DataGrid.Columns>
									<DataGridTextColumn
											Width="80"
											Binding="{Binding Value.Code}"
											Header="Code"
											CellStyle="{StaticResource dgCel}"
											HeaderStyle="{StaticResource dgIdHdrBeg}"
											/>
									<DataGridTextColumn
											Width="120"
											Binding="{Binding Value.Title}"
											Header="Title"
											CellStyle="{StaticResource dgIdCelBeg}"
											HeaderStyle="{StaticResource dgIdHdrMid}"
											/>
									<DataGridTextColumn
											Binding="{Binding Value.Description}"
											Header="Description"
											CellStyle="{StaticResource dgIdCelBeg}"
											HeaderStyle="{StaticResource dgIdHdrMid}"
											/>
								</DataGrid.Columns>
							</DataGrid>
						</Grid>
					</Border>
				</DataTemplate>
			</DataGrid.RowDetailsTemplate>
		</DataGrid>


		<Button x:Name="btnFilter1"
				Content="Filter Arch"
				Grid.Column="1"
				Grid.Row="3"
				Margin="0,0,120,47.4"
				Width="96"
				Height="32"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnSelectArch_Click"
				/>

		<Button x:Name="btnDebug_Copy"
				Content="Debug"
				Grid.Column="1"
				Grid.Row="3"
				Margin="0,0,9.6,47.4"
				Width="96"
				Height="32"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnDebug_Click"
				/>


		<Button x:Name="btnGo"
				Content="Go"
				Grid.Column="1"
				Grid.Row="3"
				Margin="0,0,120,10"
				Width="96"
				Height="32"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnGo_Click"
				/>
		<Button x:Name="btnDone"
				Content="Done"
				Grid.Column="1"
				Grid.Row="3"
				Margin="0,0,10,10"
				Width="96"
				Height="32"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnDone_Click"
				/>
		<Button x:Name="btnFilter1_Copy"
				Content="Filter Clear"
				Grid.Column="1"
				Grid.Row="3"
				Margin="0,0,228.6,47.4"
				Width="96"
				Height="32"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Click="BtnFilterClr_Click"
				/>




		<DataGrid x:Name="DG1"
				Grid.Column="1"
				Grid.Row="1"
				Margin="0,25,0,0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				HorizontalContentAlignment="Stretch"
				DataContext="{Binding Parts.PartsList,
															ElementName=mainWin,
															Mode=OneWay}"
				d:DataContext="{Binding Source={StaticResource px},
																Path=PartsList,
																Mode=OneWay}"
				Background="Blue"
				HorizontalGridLinesBrush="LightSkyBlue"
				VerticalGridLinesBrush="LightSkyBlue"
				IsReadOnly="True"
				IsSynchronizedWithCurrentItem="True"
				AreRowDetailsFrozen="False"
				AutoGenerateColumns="False"
				RowDetailsVisibilityMode="VisibleWhenSelected"
				SelectionMode="Single"
				VerticalScrollBarVisibility="Visible"
				ItemsSource="{Binding}"
				CellStyle="{DynamicResource DataGridCellStyle1}"
				RowStyle="{DynamicResource DataGridRowStyle1}"
				>

			<DataGrid.Resources>

				<Style x:Key="DataGridRowStyle1"
						TargetType="{x:Type DataGridRow}"
						>
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
					<Setter Property="SnapsToDevicePixels" Value="true" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type DataGridRow}">
								<Border x:Name="DGR_Border"
										BorderBrush="{TemplateBinding BorderBrush}"
										SnapsToDevicePixels="True"
										>
									<SelectiveScrollingGrid x:Name="selectiveScrollingGrid">
										<SelectiveScrollingGrid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</SelectiveScrollingGrid.ColumnDefinitions>
										<SelectiveScrollingGrid.RowDefinitions>
											<RowDefinition Height="*" />
											<RowDefinition Height="Auto" />
										</SelectiveScrollingGrid.RowDefinitions>
										<DataGridCellsPresenter
												Grid.Column="1"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												ItemsPanel="{TemplateBinding ItemsPanel}"
												/>
										<DataGridDetailsPresenter
												Grid.Column="1"
												Grid.Row="1"
												SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen,
																																											 ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
																																											 Converter={x:Static DataGrid.RowDetailsScrollingConverter},
																																											 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
												Visibility="{TemplateBinding DetailsVisibility}"
												/>
										<DataGridRowHeader
												Grid.RowSpan="2"
												SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
												Visibility="{Binding HeadersVisibility,
																						 ConverterParameter={x:Static DataGridHeadersVisibility.Row},
																						 Converter={x:Static DataGrid.HeadersVisibilityConverter},
																						 RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
												/>
									</SelectiveScrollingGrid>

									<VisualStateManager.VisualStateGroups>
										<VisualStateGroup x:Name="CommonStates">
											<VisualState x:Name="Normal" />
											<VisualState x:Name="Normal_AlternatingRow" />
											<VisualState x:Name="Unfocused_Editing" />
											<VisualState x:Name="Normal_Editing" />
											<VisualState x:Name="Unfocused_Selected" />
											<VisualState x:Name="Normal_Selected">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames
															Storyboard.TargetName="DGR_Border"
															Storyboard.TargetProperty="(Panel.Background)"
															>
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<SolidColorBrush Color="#FF51FF59" />
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
											<VisualState x:Name="MouseOver">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames
															Storyboard.TargetName="DGR_Border"
															Storyboard.TargetProperty="(Panel.Background)"
															>
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<SolidColorBrush Color="#FFBBEFFF" />
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
											<VisualState x:Name="MouseOver_Unfocused_Editing" />
											<VisualState x:Name="MouseOver_Editing" />
											<VisualState x:Name="MouseOver_Unfocused_Selected" />
											<VisualState x:Name="MouseOver_Selected">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames
															Storyboard.TargetName="DGR_Border"
															Storyboard.TargetProperty="(Panel.Background)"
															>
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<SolidColorBrush Color="#FF60FFBD" />
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
										</VisualStateGroup>
									</VisualStateManager.VisualStateGroups>
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
					<Setter Property="ValidationErrorTemplate">
						<Setter.Value>
							<ControlTemplate>
								<TextBlock
										Margin="2,0,0,0"
										VerticalAlignment="Center"
										Foreground="Red"
										Text="!"
										/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<Trigger Property="IsNewItem" Value="True">
							<Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
						</Trigger>
					</Style.Triggers>
				</Style>


				<Style x:Key="ColumnHeaderGripperStyle"
						TargetType="{x:Type Thumb}"
						>
					<Setter Property="Background" Value="Transparent" />
					<Setter Property="Cursor" Value="SizeWE" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type Thumb}">
								<Border
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Setter Property="Width" Value="8" />
				</Style>

				<Style x:Key="DataGridCellStyle1"
						TargetType="{x:Type DataGridCell}"
						>
					<Setter Property="Background" Value="Transparent" />
					<Setter Property="BorderBrush" Value="Transparent" />
					<Setter Property="BorderThickness" Value="1" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type DataGridCell}">
								<Border x:Name="border"
										BorderThickness="{TemplateBinding BorderThickness}"
										BorderBrush="{TemplateBinding BorderBrush}"
										SnapsToDevicePixels="True"
										>

									<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<!--<Style.Triggers>
						<Trigger Property="IsSelected"
										 Value="True">
							<Setter Property="Background"
											Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin"
										 Value="True">
							<Setter Property="BorderBrush"
											Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
													 Value="true" />
								<Condition Property="Selector.IsSelectionActive"
													 Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Background"
											Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
							<Setter Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
							<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled"
										 Value="false">
							<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</Style.Triggers>-->
				</Style>


			</DataGrid.Resources>


			<DataGrid.Columns>



				<DataGridTextColumn Binding="{Binding Key}">
					<DataGridTextColumn.Header>
						<DataGridColumnHeader
								Content="Discipline"
								Width="150"
								HorizontalAlignment="Stretch"
								Visibility="Visible"
								/>
					</DataGridTextColumn.Header>
				</DataGridTextColumn>
			</DataGrid.Columns>

			<DataGrid.RowDetailsTemplate>
				<DataTemplate>
					<Border
							BorderThickness="1"
							BorderBrush="Red"
							>
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="120" />
							</Grid.RowDefinitions>
							<Button
									Content="Done"
									Grid.Row="0"
									Margin="6,2,0,2"
									Width="45"
									Height="15"
									Padding="0"
									HorizontalAlignment="Left"
									FontSize="10"
									Visibility="Visible"
									Click="BtnRowDone_OnClick"
									/>
							<DataGrid
									Grid.Row="1"
									HorizontalAlignment="Stretch"
									HorizontalGridLinesBrush="LightSkyBlue"
									VerticalGridLinesBrush="LightSkyBlue"
									IsReadOnly="True"
									AutoGenerateColumns="False"
									HorizontalScrollBarVisibility="Visible"
									VerticalScrollBarVisibility="Visible"
									ItemsSource="{Binding Value.Parts}"
									>
								<DataGrid.Columns>
									<DataGridTextColumn
											Width="80"
											Binding="{Binding Value.Code}"
											Header="Code"
											/>
									<DataGridTextColumn
											Width="120"
											Binding="{Binding Value.Title}"
											Header="Title"
											/>
									<DataGridTextColumn
											Binding="{Binding Value.Description}"
											Header="Description"
											/>
								</DataGrid.Columns>
							</DataGrid>
						</Grid>
					</Border>
				</DataTemplate>
			</DataGrid.RowDetailsTemplate>
		</DataGrid>




	</Grid>
</Window>
